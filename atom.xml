<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ubik&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-19T12:15:58.192Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Adam Ubik</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fibonacci 数列的最优解及特征方程的一般解法</title>
    <link href="http://yoursite.com/2019/09/08/fib/"/>
    <id>http://yoursite.com/2019/09/08/fib/</id>
    <published>2019-09-08T13:24:27.000Z</published>
    <updated>2019-12-19T12:15:58.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fib-问题"><a href="#fib-问题" class="headerlink" title="fib 问题"></a>fib 问题</h1><p><code>fib(n) = fib(n-1) + fib(n-2),n &gt; 2 且 fib(1) = fib(2) = 1</code><br>编程求 fib(n)<br>把 <code>fib</code> 看作一个函数，公式直接告诉我们递推和边界条件（n = 1和n = 2)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(n &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f1(n - <span class="number">1</span>) + f1(n - <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>随后，我们可以很简单地把递归变为递推，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[] = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">       dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">       dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i &lt;= n;i++)&#123;</span><br><span class="line">           dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> dp[n];</span><br></pre></td></tr></table></figure><p>这样，对于每次的n，都要有 O(n) 的时间复杂度，我们可以把计算的过程“缓存“起来，对于上述递推，只要把 dp 数组放到外边，避免每次调用f函数都重新计算，或者设置一个 flag 看是否已经算好了，这里不再赘述。</p><p>但是，注意到文章开头提到的递推式对应一个二阶递推数列，可以用矩阵乘法的形式（而不是前边说到的按照公式一步步求）表达其递推式，而矩阵乘法类似快速幂，可以通过<strong>分治</strong>降低时间复杂度至 O(logN)。<br>于是，我们先解决矩阵乘法问题，回忆线性代数所学，关键代码下，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m1.length; i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m2[<span class="number">0</span>].length;j++)&#123;</span><br><span class="line">               <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m2.length; k++ )&#123;</span><br><span class="line">                    res[i][j] += m1[i][k] * m2[k][j];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>当然，对于muliMatrix函数的参数，我们应给予valid 验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (m1 == <span class="keyword">null</span> || m1.length == <span class="number">0</span> || m1[<span class="number">0</span>] == <span class="keyword">null</span> || m1[<span class="number">0</span>].length == <span class="number">0</span> || m2 == <span class="keyword">null</span> || m2.length == <span class="number">0</span> </span><br><span class="line">        || m2[<span class="number">0</span>] == <span class="keyword">null</span> || m2[<span class="number">0</span>].length == <span class="number">0</span> || m1[<span class="number">0</span>].length != m2.length)</span><br></pre></td></tr></table></figure><p>接下来是<strong>矩阵的幂次方</strong>问题，与整数的幂次方类似，以 71 为例子，71的二进制表示为 1001001，于是，10 的 71次方表示为 <code>10^64 * 10^8 * 10^1</code>，同理应用于 矩阵乘法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;p != <span class="number">0</span>; p &gt;&gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//这里(p &amp; 1)要加括号</span></span><br><span class="line">            <span class="keyword">if</span>( (p &amp; <span class="number">1</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">                res = muliMatrix(res , tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = muliMatrix(tmp,tmp);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>最后，我们要找出文章开头的递推公式对应的状态矩阵，对于一个二阶递推数列，其状态矩阵是<code>2*2</code>的方阵,从而有<br><code>(fib(n),fib(n-1))= (fib(n-1),fib(n-2)) * [[a,b],[c,d]]</code><br>带入 fib 前四项，可求得状态矩阵<code>[[1,1],[1,0]]</code>.<br>从而，fib数列的通项表示为 <code>[[1,1],[1,0]] ^ (n-2)</code>的第一列的和：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] base = &#123;&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span>[][] res = matrixPower(base, n-<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> res[<span class="number">0</span>][<span class="number">0</span>] + res[<span class="number">1</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>至此，时间复杂度 O(logN),常数空间复杂度的 fib(n) 求法get。对于三阶或者更高阶递推数列也是一样的道理，矩阵乘法和幂次都可直接复用，唯一的不同是手动计算状态矩阵。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fib-问题&quot;&gt;&lt;a href=&quot;#fib-问题&quot; class=&quot;headerlink&quot; title=&quot;fib 问题&quot;&gt;&lt;/a&gt;fib 问题&lt;/h1&gt;&lt;p&gt;&lt;code&gt;fib(n) = fib(n-1) + fib(n-2),n &amp;gt; 2 且 fib(1) =
      
    
    </summary>
    
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>redis学习笔记</title>
    <link href="http://yoursite.com/2019/09/03/redis2/"/>
    <id>http://yoursite.com/2019/09/03/redis2/</id>
    <published>2019-09-03T13:24:27.000Z</published>
    <updated>2019-12-19T12:11:46.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>客户端提供的技术 合并多次对服务端的请求，<strong>改变读写顺序来大幅提高性能</strong>，客户端体现为 wrwr -&gt; wwrr<br><strong>服务端没区别</strong><br>优点： 大幅节省IO时间<br>利用自带的 redis-benchmark 测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark -t <span class="built_in">set</span> -q</span><br><span class="line">SET: 114416.48 requests per second</span><br><span class="line">redis-benchmark -t <span class="built_in">set</span> -P 2 -q</span><br><span class="line">SET: 225733.64 requests per second</span><br><span class="line">redis-benchmark -t <span class="built_in">set</span> -P 3 -q</span><br><span class="line">SET: 320512.81 requests per second</span><br><span class="line">redis-benchmark -t <span class="built_in">set</span> -P 60 -q</span><br><span class="line">SET: 729927.06 requests per second</span><br></pre></td></tr></table></figure><p>深入分析</p><p>write 内核为socket 分配的发送缓冲 -&gt; 网卡 -&gt; 【网际路由】 -&gt; 服务器网卡 -&gt; 接受缓冲 recv buffer -&gt; read读出消息<br>在这个过程中， write 只负责将数据写到 send buffer，osk负责发送 buffer 的数据，如果buffer 满了，就要等待，这就是 IO 的真正耗时。<br>同理，如果 recv 缓冲区空的，就要等到非空，才能read，这就是 读IO 的耗时。<br>pipe 减少了read时等待缓冲区为空的时间，因此效率高 </p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>不严格<br>对应于 begin commit rollback，redis 的命令是 multi，exec，discard。正如其名，在 exec 前不会执行，只是存放在队列。注意到 redis 是单线程的，不存在线程安全问题。<br>但执行过程down掉怎么办？<br>放弃<strong>原子性</strong>，允许部分成功，只保证隔离性（单线程）。<br>并发修改时除了事务，也可以使用乐观锁，“默认会成功，否则再回退”，<br>举例：double 操作，利用 watch ，然后执行事务，若执行过程中数据被其他请求改变，则返回nil或者抛出异常，逻辑如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    do_watch()</span><br><span class="line">    commands()</span><br><span class="line">    multi()</span><br><span class="line">    send_commands()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        exec()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> WatchError:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>为了提高性能，可以结合 pipeline 一次发多个指令。</p><h1 id="pubsub"><a href="#pubsub" class="headerlink" title="pubsub"></a>pubsub</h1><p>redis 的 list 做 queue 不支持多播，pubsub 解决这个问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subscribe k1,k2,k3</span><br><span class="line">publish k1 v1</span><br><span class="line">subscribe re</span><br></pre></td></tr></table></figure><p>因为无持久化机制，发送时如果消费者不在线，就丢失了，因此不常用。<br>Stream数据结构带来了可持久化的消息队列</p><h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><p>5.0新出的，支持多播的可持久化的消息队列，大数据量直接上kafka，小数据，要求速度可以用这个。</p><h1 id="info-获取参数"><a href="#info-获取参数" class="headerlink" title="info 获取参数"></a>info 获取参数</h1><p>一些关键参数如下</p><ul><li>每秒执行指令 <code>info stat</code></li><li>复制积压缓冲区 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:1ec7be00347ba6c1837af7eeb37b28ac6a2c2100</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure></li><li>内存占用 <code>info memory</code></li><li>连接数 <code>redis-cli info clients</code></li><li>拒绝连接数 <code>redis-cli info stats |grep reject</code></li></ul><h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><p>32bit编译节约内存空间（c语言的变量大小与os有关，不像java写死了）</p><h1 id="sentinel"><a href="#sentinel" class="headerlink" title="sentinel"></a>sentinel</h1><p>作用：中间层to 监控和路由表</p><h1 id="懒惰删除"><a href="#懒惰删除" class="headerlink" title="懒惰删除"></a>懒惰删除</h1><p>redis单线程，为避免删除大数据时卡顿，丢其他线程异步完成。 <code>flushall flushdb也是如此</code><br>丢的过程是把 key 的内存回收操作包装成一个任务，塞进异步任务队列，队列要求线程安全，因为它同时被 C 和 P 消费。<br>另一个异步线程是 AOF Sync</p><h1 id="优雅使用Jedis"><a href="#优雅使用Jedis" class="headerlink" title="优雅使用Jedis"></a>优雅使用Jedis</h1><p>由于 Java 的多线程，Jedis 常从线程池里边拿</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JedisPool pool = <span class="keyword">new</span> JedisPool();</span><br><span class="line">    Jedis jedis = pool.getResource(); <span class="comment">// 拿出 Jedis 链接对象</span></span><br><span class="line">    doSomething(jedis);</span><br><span class="line">    jedis.close(); <span class="comment">// 归还链接</span></span><br></pre></td></tr></table></figure><p>如果<code>doSomething(jedis);</code>出了异常，jedis无法归还，多个线程这样会造成阻塞。因此需要使用 try-with-resource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (Jedis jedis = pool.getResource()) &#123; <span class="comment">// 用完自动 close</span></span><br><span class="line">      doSomething(jedis);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为了规范，强制程序员释放资源，需要封装一下redispool，还可以添加<strong>重试机制</strong></p><h1 id="保护-redis"><a href="#保护-redis" class="headerlink" title="保护 redis"></a>保护 redis</h1><p>keys 指令会导致 Redis 卡顿，flushdb 和 flushall 会让 Redis 的所有数据全部清空<br><code>rename-command keys abckeysabc</code><br><code>rename-command flushall &quot;&quot;</code></p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>不同于 C 语言的字符数组+null结束符，redis 字符串可修改，叫做<code>Simple Dynamic String</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SDS</span>&lt;T&gt; &#123;</span></span><br><span class="line">  T capacity; <span class="comment">// 最大值</span></span><br><span class="line">  T len; <span class="comment">// 已使用</span></span><br><span class="line">  byte flags; <span class="comment">// 特殊标识</span></span><br><span class="line">  byte[] content; <span class="comment">// 数组内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用泛型T而不是int是为了节省空间，因为当字符串很小的时候，容量用 byte、short表示更节约空间，且默认 len == cap，因为大多时候不会 append 修改。另外，sds 整体类似于 Java 的 arrayList,当最大容量不够时会扩容。</p><p>字符串在长度小于 1M 之前，扩容空间采用加倍策略，也就是保留 100% 的冗余空间。当长度超过 1M 之后，为了避免加倍后的冗余空间过大而导致浪费，每次扩容只会多分配 1M 大小的冗余空间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;管道&quot;&gt;&lt;a href=&quot;#管道&quot; class=&quot;headerlink&quot; title=&quot;管道&quot;&gt;&lt;/a&gt;管道&lt;/h1&gt;&lt;p&gt;客户端提供的技术 合并多次对服务端的请求，&lt;strong&gt;改变读写顺序来大幅提高性能&lt;/strong&gt;，客户端体现为 wrwr -&amp;gt; 
      
    
    </summary>
    
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>什么是好的代码?</title>
    <link href="http://yoursite.com/2019/09/03/safety_and_effcience_of_code/"/>
    <id>http://yoursite.com/2019/09/03/safety_and_effcience_of_code/</id>
    <published>2019-09-03T13:24:27.000Z</published>
    <updated>2019-12-19T12:03:00.833Z</updated>
    
    <content type="html"><![CDATA[<p>对于工业用代码或者说业务逻辑、系统开发的代码来说，经济、安全是首先要考虑的，这是脱离于需求之外的基本要求。正如设计原则中讲到的，设计的第一要义是安全，核心是以人为本（口意，串台了……<br>具体来说，好的代码应该</p><ol><li>满足需求</li><li>写法规范（参考alibaba开发手册和唯品会开发手册（Java）</li><li>通过单元、基准和集成测试</li><li>经济，投入少、收益大<br>坏的代码自然相反。</li></ol><p>我们应从规范而不是单纯或者根本不该靠程序员自身的 focus 和开发素养避免 <code>error</code>，具体来说<br>首先，程序员应该有合格的职业素养，严格按照编码规范写代码。<br>其次，编译器应该给出适当的报错和警告 warning，强如 Rust，把变量的生命周期提前到了语法分析时来尽可能避免内存泄漏。<br>第三是<strong>回归测试</strong>，软件测试会尽可能地覆盖关键逻辑和负面清单，以确保关键功能能够正确执行， 关键错误能够有效处理，另外，这些测试代码还有一个关键用途就是做回归测试 。如果有代码变更，我们可以用回 归测试来检查这样的代码变更有没有使代码变得更坏。<br>第四是代码评审，一般通过阅读代码，肉眼检查代码错误，<br>最后是代码分析，通过商业软件如 Coverity FindBugs 等静态代码检查工具来避免错误。比方说Golang 语言禁止大括号另起一行也算是代码分析吧。</p><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><h2 id="代码分块"><a href="#代码分块" class="headerlink" title="代码分块"></a>代码分块</h2><p><code>if ((firstName != null) &amp;&amp; (lastName != null))</code><br>好于</p><p><code>if (firstName != null &amp;&amp; lastName != null</code> </p><ul><li>同级别代码块左对齐，前后留行分割</li><li>代码块之间留白</li><li>同行内代码块空格分割，如<ul><li><code>String firstName, lastName;</code></li><li><code>(firstName != null) &amp;&amp; (lastName != null</code></li></ul></li><li>一行一个行为，如<ul><li><code>if (variable != null) variable.doSomething();</code> ❌</li><li><code>if (variable != null) {variable.doSomething(); }</code>换行就好多了 <ul><li>但换行也有限制，一般每行80个字符（阿里的 Java 开发手册以及提问的艺术中建议的邮件格式都如此）。超过应该换行，在逗号，运算符处换行，换行后与上一行同级别表达式对齐或者八个空格缩进。<br>如<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">object.methodOne(parameterForMethodOne, anObject.methodTwo(parameterOneForMethodTwo,</span><br><span class="line">parameterTwoForMethodTwo, parameterThreeForMethodTwo));</span><br><span class="line"><span class="comment">// bad indentation</span></span><br><span class="line"><span class="keyword">if</span> ((conditionOne &amp;&amp; conditionTwo)</span><br><span class="line">|| (conditionThree &amp;&amp; conditionFour)) &#123;</span><br><span class="line">doSomething(); &#125;</span><br><span class="line"><span class="comment">// a better indentation, using 8 spaces for the indentation if ((conditionOne &amp;&amp; conditionTwo)</span></span><br><span class="line">|| (conditionThree &amp;&amp; conditionFour)) &#123; doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="关于注释的目的和用法"><a href="#关于注释的目的和用法" class="headerlink" title="关于注释的目的和用法"></a>关于注释的目的和用法</h1></li></ul></li></ul></li></ul><ol><li>记录版权，开源代码大都有这些东西。使用一般的星号注释符<code>(/**/)</code>。注 释块的首行和尾行只使用星号注释符，中间行以缩进一个空格的星号开始，文字和星号之 间使用一个空格。</li><li>生成用户文档，如 JavaDoc，这些文档帮助使用者了解软件的功能和细节，主要面向的是该 软件的使用者，而不是该软件的开发者。使用 Javadoc 要求的格式，文档注释符 <code>(/-*/)。</code> 除了首行使用特殊的文档注释符(/)</li><li>解释源代码。常使用<code>//</code><h1 id="注释的原则"><a href="#注释的原则" class="headerlink" title="注释的原则"></a>注释的原则</h1></li><li>准确</li><li>必要</li><li>清晰<br>满足这三点即可，中文还是英文不必削足适履。</li></ol><h1 id="关于代码声明"><a href="#关于代码声明" class="headerlink" title="关于代码声明"></a>关于代码声明</h1><p>形如<code>[存储类别限定符][访问控制修饰符][类型][名称]</code>这样的用来声明自定义变量、类、方法的 code 的规范</p><ol><li>一行一个而不是多个，git 修改时好看</li><li>包括 effictive java 在内的书都在强调的：临时变量等用到再分配</li><li>类中声明在一起（开头）而不是分散。</li><li>声明时就初始化。———— LC 刷多了自然了解，在条件语句中初始化然后在最后返回时会报错。</li><li>类和方法声明后的<code>{</code>紧跟代码，<code>}</code>单独成行</li><li>小括号紧跟标识符以标明是方法</li><li>搜索（SEO、vi等） <code>public class extends xx</code>,<code>abstract class</code> 等<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1>添加在属性、方法和类上的特殊信息，用以丰富功能。当然，这里讨论技术之外的事情，只讲比较“软”的规范和建议。</li><li>重写的方法加<code>@Override</code> 注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span>(since=<span class="string">"1.1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> ascii[], <span class="keyword">int</span> hibyte)</span> </span>&#123; </span><br><span class="line"> <span class="keyword">this</span>(ascii, hibyte, <span class="number">0</span>, ascii.length); </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>如上述过时接口应使用 <code>@deprecated</code>注明。在规范描述中，说明废弃的原因 以及替代的办法;对于有计划要删除的接口，要注明计划删除的版本号。且对使用了废弃接口的方法应尽早转换。<h1 id="关于异常"><a href="#关于异常" class="headerlink" title="关于异常"></a>关于异常</h1>异常的四个要素是 类名、描述、堆栈和异常转换。类名对应“出了啥错”；描述对应“为啥出错”；堆栈说明“什么地方出了错”；异常转换记录对应了 JVM 或者编译器的理解。</li><li>永远不要用异常来处理正常的业务逻辑</li><li>checkedException 要在 声明的时候说清楚，不要只抛个空壳。</li><li>尽力保留所有的异常信息和转化场景避免信息丢失（如 catch 中 throw catch 到的 throwable 和异常描述。</li></ol><h1 id="从用户角度出发"><a href="#从用户角度出发" class="headerlink" title="从用户角度出发"></a>从用户角度出发</h1><blockquote><p>Apdex = (1 × 满意样本数 + 0.5 × 容忍样本数 + 0 × 挫败样本数) / 样本 总数</p></blockquote><p>互联网领域最佳等待时间(T)和最大可容忍等待时间(F)的选择有着非常经典的经 验值，那就是最佳等待时间是 2 秒以内，最大可容忍等待时间是最佳等待时间的 4 倍，也 就是 8 秒以内。<br>所以，对于一个应用，100个样本中 70个2s内，20个2～8s，10个大于8s，则其 Apdex 为0.8。<br>从用户角度来说，大致符合二八原则，十次有两次慢的，那就是慢的。所以80分并不是好成绩，应继续努力优化（加存储、计算或网络资源或者改进代码）或者重写。</p><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><p>软件缺陷的严重程度正比于用户的痛苦程度，包括深度和广度两方面。体现为严重性和可能性。可以分为若干级{高严重性，[中严重性,]低严重性}叉乘{高可能性，[中可能性,]低可能性}<br>即使是代码无错误，也可能存在用户的新需求认为代码存在错误，要求代码更新。</p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>为避免过度设计，两个问题</p><ol><li>什么是必须做的</li><li>什么是当下必须做的？</li></ol><h1 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h1><ol><li><p>永远不要写<br><code>String str = new String(&quot;xx&quot;);</code><br>而是<br><code>String str1 = xx;</code></p></li><li><p>永远不要使用原始数据类型（基本数据类型对应的类，如 Long,Integer)的构造方法</p></li><li><p>不使用原始数据类型来避免装箱和拆箱的类型转换</p></li><li><p>尽可能使用单例模式</p></li><li><p>减小标识符引用的对象的尺寸</p><ul><li>减少独占空间</li><li>尽量共享<ul><li>一成不变（immutable)</li><li>禁止修改<h1 id="延迟修改"><a href="#延迟修改" class="headerlink" title="延迟修改"></a>延迟修改</h1></li></ul></li></ul></li><li><p><strong>一般</strong>定义时初始化，但初始化耗费资源过多时例外。<br>举例：JDK8 的 Arraylist 在扩容时才初始化新数组来提高响应速度和减少内存占用。</p></li><li><p>权衡————CPU监测是否初始化带来的时间开销和延迟初始化带来的空间、时间节省</p></li><li><p>风险————非静态变量存在线程安全问题</p></li><li><p>PS： JDK11 开始，HashMap 缺省构造不直接分配数组。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于工业用代码或者说业务逻辑、系统开发的代码来说，经济、安全是首先要考虑的，这是脱离于需求之外的基本要求。正如设计原则中讲到的，设计的第一要义是安全，核心是以人为本（口意，串台了……&lt;br&gt;具体来说，好的代码应该&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;满足需求&lt;/li&gt;
&lt;li&gt;写法规
      
    
    </summary>
    
    
    
      <category term="code" scheme="http://yoursite.com/tags/code/"/>
    
      <category term="规范" scheme="http://yoursite.com/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>代码应该以怎样的顺序组织？</title>
    <link href="http://yoursite.com/2019/09/02/order_of_code/"/>
    <id>http://yoursite.com/2019/09/02/order_of_code/</id>
    <published>2019-09-02T03:11:27.000Z</published>
    <updated>2019-12-19T11:59:30.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于代码的顺序"><a href="#关于代码的顺序" class="headerlink" title="关于代码的顺序"></a>关于代码的顺序</h1><p>为了更快地读和理解代码，应该统一代码块、变量、方法修饰符的顺序，这样即使只是自己看也会更清爽。我没有在开发手册中看到对于这些东西的具体规范，于是在网上找到了一个我认为合适的规范。如果以后工作有变，再修改这篇博客。<br>首先，头部的版权和许可声明、package以及 import 就不多说了，不这么写编译器根本通不过。<br>其次就是类的定义了，与之前写法一样，依次是</p><ol><li>类的规范（注释）</li><li>类的声明</li><li>类的属性和方法</li></ol><p>3中顺序为</p><ol><li>类的属性</li><li>构造方法</li><li>工厂方法</li><li>其他方法<br>（JDK 中有一些或者说大致就是这个顺序（与平常写法类似））。唯一要解释的是工厂方法不是构造方法却可以构造类，所以放在构造方法和一般方法之间。</li></ol><p>对于方法，公有方法应有</p><ol><li>方法规范</li><li>方法声明</li><li>方法实现<br>规范应包括 </li></ol><ul><li>方法介绍</li><li>注意事项<code>@apiNote</code></li><li>实现方法的要求<code>@implSpec</code></li><li>实现方法的注意事项<code>@implNote</code></li><li>参数、返回值、异常（受检异常和运行时异常都要）<br>还有一些可选项，如创始版本<code>@since</code>（当创始版本和所属类创始版本一致时可以省略，否则要加上）,参考接口索引等。</li></ul><h1 id="变量限定词的顺序"><a href="#变量限定词的顺序" class="headerlink" title="变量限定词的顺序"></a>变量限定词的顺序</h1><p>我们总是会写 <code>psvm</code>（用IDEA的都知道啥意思，哈哈），这里我使用这个顺序来做规范。当然，一般用会用到这么多，但要知道有这个规范。</p><ol><li>public/private/protected (访问控制限定词，制定访问权限) 2. abstract (抽象类或者抽象方法，具体实现由子类完成)</li><li>static (静态类、方法或者类属性)</li><li>final (定义不能被修改的类、方法或者类属性)</li><li>transient(定义不能被序列化的类属性) 6. volatile(定义使用主内存的变量)</li><li>default(声明缺省的方法)</li><li>synchronized(声明同步的方法)</li><li>native(声明本地的方法，也就是 Java 以外的语言实现的方法) 10. strictfp(声明使用精确浮点运算)。</li></ol><p>理论上，这些问题都是 compile 过程中语法分析的问题，如前所说，可以通过静态代码检查工具实现，阿里巴巴针对IDEA 推出的规范工具我也在用，只是有一些功能如限定词顺序，空行分割代码块还未实现，且检查工具归根到底也要你自己改正，所以这些代码组织方式还是要熟悉，起码知道有这么回事，尽量写出 well organized code，我觉得这是一种乐趣。</p><h1 id="文件顺序"><a href="#文件顺序" class="headerlink" title="文件顺序"></a>文件顺序</h1><p>代码之上一层就是文件，这同样影响可读性。</p><ol><li><p>COPYRIGHT 版权放在根目录（在并非每个源文件头都有版权的情况下这么干），说明这个软件归属谁、有什么版权诉求。</p></li><li><p>LICENSE 也放在根目录下边，决定能否使用、如何使用。</p></li><li><p>README 具体怎么操作来使用，放在根目录下，markdown 编写</p></li><li><p>src 软件是怎么实现的。内部应分文件对应不同的 package（Golang 文件和 package 不重合）</p></li><li><p>test 存放测试代码，内部文件应分开以对应不同的功能</p></li><li><p>doc 使用指南和代码示例，给非开发人员或者说用软件的人做。</p></li><li><p>make 代码的构建脚本</p></li></ol><p>在实际操作中，写好代码的方法自然不会只有这一种，如前文所说，这只是为了达成 consensus for high productivity。代码本质上还是需求决定的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于代码的顺序&quot;&gt;&lt;a href=&quot;#关于代码的顺序&quot; class=&quot;headerlink&quot; title=&quot;关于代码的顺序&quot;&gt;&lt;/a&gt;关于代码的顺序&lt;/h1&gt;&lt;p&gt;为了更快地读和理解代码，应该统一代码块、变量、方法修饰符的顺序，这样即使只是自己看也会更清爽。我没有
      
    
    </summary>
    
    
    
      <category term="code" scheme="http://yoursite.com/tags/code/"/>
    
      <category term="规范" scheme="http://yoursite.com/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>提问的艺术,如何问才更可能得到想要的答案</title>
    <link href="http://yoursite.com/2019/09/01/how%20to%20ask/"/>
    <id>http://yoursite.com/2019/09/01/how to ask/</id>
    <published>2019-09-01T03:11:27.000Z</published>
    <updated>2019-12-19T11:50:33.096Z</updated>
    
    <content type="html"><![CDATA[<p>程序员要面对的变量非常多，这导致程序员会遇见各种各样的问题，为了节约时间提高效率，询问在这一方面有经验的程序员是个好主意。但如果想得到想要的 solution，你需要学习如何提问。<br>关于这个问题已经有了非常好的答案，<a href="https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener">原文链接</a></p><p>这里转载，方便按目录翻阅和记忆。</p><h1 id="提问之前"><a href="#提问之前" class="headerlink" title="提问之前"></a>提问之前</h1><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p><ol><li>尝试在你准备提问的论坛的旧文章中搜索答案。</li><li>尝试上网搜索以找到答案。</li><li>尝试阅读手册以找到答案。</li><li>尝试阅读常见问题文件（FAQ）以找到答案。</li><li>尝试自己检查或试验以找到答案。</li><li>向你身边的强者朋友打听以找到答案。</li><li>如果你是程序开发者，请尝试阅读源代码以找到答案。</li></ol><h1 id="提问时"><a href="#提问时" class="headerlink" title="提问时"></a>提问时</h1><h3 id="选择合适的论坛"><a href="#选择合适的论坛" class="headerlink" title="选择合适的论坛"></a>选择合适的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p><ul><li>在与主题不合的论坛上贴出你的问题。</li><li>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。</li><li>在太多的不同新闻群组上重复转贴同样的问题（cross-post）。</li><li>向既非熟人也没有义务解决你问题的人发送私人电邮。</li></ul><h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>搜索，<strong>然后</strong> 在 Stack Exchange 问。</p><p>近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。</p><p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p><p>Stack Exchange 已经成长到<a href="http://stackexchange.com/sites" target="_blank" rel="noopener">超过一百个网站</a>，以下是最常用的几个站：</p><ul><li>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。</li><li>Stack Overflow 是问写程序有关的问题。</li><li>Server Fault 是问服务器和网管相关的问题</li></ul><h3 id="网站和-IRC-论坛"><a href="#网站和-IRC-论坛" class="headerlink" title="网站和 IRC 论坛"></a>网站和 IRC 论坛</h3><p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。</p><h3 id="使用项目邮件列表"><a href="#使用项目邮件列表" class="headerlink" title="使用项目邮件列表"></a>使用项目邮件列表</h3><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：</p><ul><li>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</li><li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</li><li>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li><li>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h3></li></ul><p>在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code>、<code>急</code>（更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。</p><p>一个好标题范例是<code>目标 —— 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p><blockquote><p>蠢问题：救命啊！我的笔记本电脑不能正常显示了！</p></blockquote><blockquote><p>聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。</p></blockquote><blockquote><p>更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p></blockquote><p>编写<code>目标 —— 差异</code> 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<strong>和</strong>你遇到的问题。</p><p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p><p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 <code>Re: 测试</code> 或者 <code>Re: 新 bug</code> 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。</p><p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。</p><p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。</p><p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你<strong>只想</strong>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p><h3 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h3><p>以<code>请将你的回复发送到……</code>来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html" target="_blank" rel="noopener">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p><p>在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p><h3 id="用清晰、正确、精准并语法正确的语句"><a href="#用清晰、正确、精准并语法正确的语句" class="headerlink" title="用清晰、正确、精准并语法正确的语句"></a>用清晰、正确、精准并语法正确的语句</h3><p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。</p><p>正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<strong>必须很</strong>准确，而且有迹象表明你是在思考和关注问题。</p><p>正确地拼写、使用标点和大小写，不要将<code>its</code>混淆为<code>it&#39;s</code>，<code>loose</code>搞成<code>lose</code>或者将<code>discrete</code>弄成<code>discreet</code>。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox" target="_blank" rel="noopener">Alan Cox</a> 也许可以这样做，但你不行）。</p><p>更白话的说，如果你写得像是个半文盲，那多半得不到理睬。也不要使用即时通信中的简写或<a href="http://zh.wikipedia.org/wiki/火星文" target="_blank" rel="noopener">火星文</a>，如将<code>的</code>简化为<code>d</code>会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p><p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。</p><p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：<br>[译注：以下附上原文以供使用]</p><blockquote><p>English is not my native language; please excuse typing errors.</p></blockquote><ul><li>英文不是我的母语，请原谅我的错字或语法。</li></ul><blockquote><p>If you speak $LANGUAGE, please email/PM me;<br>I may need assistance translating my question.</p></blockquote><ul><li>如果你说<strong>某语言</strong>，请寄信/私讯给我；我需要有人协助我翻译我的问题。</li></ul><blockquote><p>I am familiar with the technical terms,<br>but some slang expressions and idioms are difficult for me.</p></blockquote><ul><li>我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。</li></ul><blockquote><p>I’ve posted my question in $LANGUAGE and English.<br>I’ll be glad to translate responses, if you only use one or the other.</p></blockquote><ul><li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li></ul><h3 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h3><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p><ul><li>使用纯文字而不是 HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html" target="_blank" rel="noopener">关闭 HTML</a> 并不难）。</li><li>使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。</li><li>不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。</li><li>但是，对一些特殊的文件<strong>不要</strong>设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。</li><li>在英语论坛中，不要使用<code>Quoted-Printable</code> MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的<code>=20</code>符号既难看也分散注意力，甚至有可能破坏内容的语意。</li><li>绝对，<strong>永远</strong>不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。</li><li>如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的<code>智能引号</code>功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉<code>智能引号</code>单选框），以免在你的邮件中到处散布垃圾字符。</li><li>在论坛，勿滥用<code>表情符号</code>和<code>HTML</code>功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。</li></ul><p>如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的<code>查看源代码</code>命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。</p><h3 id="精确地描述问题并言之有物"><a href="#精确地描述问题并言之有物" class="headerlink" title="精确地描述问题并言之有物"></a>精确地描述问题并言之有物</h3><ul><li>仔细、清楚地描述你的问题或 Bug 的症状。</li><li>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：<code>Fedora Core 4</code>、<code>Slackware 9.1</code>等）。</li><li>描述在提问前你是怎样去研究和理解这个问题的。</li><li>描述在提问前为确定问题而采取的诊断步骤。</li><li>描述最近做过什么可能相关的硬件或软件变更。</li><li>尽可能的提供一个可以<code>重现这个问题的可控环境</code>的方法。</li></ul><p>尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。</p><p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p><p><a href="http://www.chiark.greenend.org.uk/~sgtatham/" target="_blank" rel="noopener">Simon Tatham</a> 写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html" target="_blank" rel="noopener">如何有效的报告 Bug</a>》的出色文章。强力推荐你也读一读。</p><h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p><p>这样做的用处至少有三点。<br>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；<br>第二，简化问题使你更有可能得到<strong>有用</strong>的答案；<br>第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p><h3 id="别动辄声称找到-Bug"><a href="#别动辄声称找到-Bug" class="headerlink" title="别动辄声称找到 Bug"></a>别动辄声称找到 Bug</h3><p>当你在使用软件中遇到问题，除非你非常、<strong>非常</strong>的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的<code>Bug</code>，你应该能提供相应位置的修正或替代文件。</p><p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#在提问之前">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p><p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有<code>Bug</code>时，这尤其严重。</p><p>提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是<strong>你</strong>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。</p><h3 id="低声下气不能代替你的功课"><a href="#低声下气不能代替你的功课" class="headerlink" title="低声下气不能代替你的功课"></a>低声下气不能代替你的功课</h3><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：<code>我知道我只是个可悲的新手，一个撸瑟，但...</code>。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。</p><p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。</p><p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</p><h3 id="描述问题症状而非你的猜测"><a href="#描述问题症状而非你的猜测" class="headerlink" title="描述问题症状而非你的猜测"></a>描述问题症状而非你的猜测</h3><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p><p><strong>蠢问题</strong></p><blockquote><p>我在编译内核时接连遇到 SIG11 错误，<br>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），<br>256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，<br>但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。<br>所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p></blockquote><p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：<code>所有的诊断专家都来自密苏里州。</code> 美国国务院的官方座右铭则是：<code>让我看看</code>（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：<code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code>） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！</p><h3 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h3><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。</p><p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，<code>多</code>不等于<code>好</code>。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p><p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。</p><h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p><p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p><p><strong>蠢问题</strong></p><blockquote><p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），<br>但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。</p></blockquote><p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p><h3 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h3><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。</p><p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<strong>回复者</strong>来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p><p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是<code>向我发电邮，我将为论坛归纳这些回复</code>。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。</p><h3 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p><p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p><p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p><p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问<code>我想更好的理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p><h3 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h3><p>别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：<code>它不能工作</code>会让你完全被忽略。只贴几十行代码，然后说一句：<code>在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;</code>比较有可能让你得到回应。</p><p>最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看<a href="#话不在多而在精">话不在多而在精</a>一节）。</p><p>一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p><p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p><h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p><p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的<strong>使用者</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的使用者也许仍会给你一些提示。</p><h3 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h3><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code>或者<code>这有答案吗？</code>。</p><p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p><p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code>或者<code>不，没答案</code>。</p><p>一般来说，避免用 <code>是或否</code>、<code>对或错</code>、<code>有或没有</code>类型的问句，除非你想得到<a href="http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html" target="_blank" rel="noopener">是或否类型的回答</a>。</p><h3 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h3><p>这是你的问题，不是我们的。宣称<code>紧急</code>极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，<code>紧急</code>这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。</p><p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p><p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如<code>紧急：帮我救救这个毛绒绒的小海豹！</code>肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。</p><p>如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。</p><h3 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h3><p>彬彬有礼，多用<code>请</code>和<code>谢谢您的关注</code>，或<code>谢谢你的关照</code>。让大家都知道你对他们花时间免费提供帮助心存感激。</p><p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）</p><p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p><p>（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得<code>先谢了</code>意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说<code>先谢了</code>，<strong>然后</strong>事后再对回复者表示感谢，或者换种方式表达感激，譬如用<code>谢谢你的关注</code>或<code>谢谢你的关照</code>。）</p><h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p><p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>的有趣），因此可以利用此时间去解决其它问题。</p><p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p><p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p><p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p><p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p><p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p><p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p><h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p><p>问题：<a href="#q1">我能在哪找到 X 程序或 X 资源？</a></p><p>问题：<a href="#q2">我怎样用 X 做 Y？</a></p><p>问题：<a href="#q3">如何设定我的 shell 提示？</a></p><p>问题：<a href="#q4">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p><p>问题：<a href="#q5">我的程序/设定/SQL 语句没有用</a></p><p>问题：<a href="#q6">我的 Windows 电脑有问题，你能帮我吗？</a></p><p>问题：<a href="#q7">我的程序不会动了，我认为系统工具 X 有问题</a></p><p>问题：<a href="#q8">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p><p>问题：<a href="#q9">我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</a></p><hr><p><a id="q1"></a></p><blockquote><p>问题：我能在哪找到 X 程序或 X 资源？</p></blockquote><p>回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 <a href="http://www.google.com" target="_blank" rel="noopener">Google</a> 吗？</p><p><a id="q2"></a></p><blockquote><p>问题：我怎样用 X 做 Y？</p></blockquote><p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p><p><a id="q3"></a></p><blockquote><p>问题：如何设定我的 shell 提示？？</p></blockquote><p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 <a href="#RTFM">RTFM</a>，然后自己去找出来。</p><p><a id="q4"></a></p><blockquote><p>问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</p></blockquote><p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p><p><a id="q5"></a></p><blockquote><p>问题：我的{程序/设定/SQL 语句}不工作</p></blockquote><p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p><ul><li>你还有什么要补充的吗？</li><li>真糟糕，希望你能搞定。</li><li>这关我有什么屁事？</li></ul><p><a id="q6"></a></p><blockquote><p>问题：我的 Windows 电脑有问题，你能帮我吗？</p></blockquote><p>回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。</p><p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你<strong>可以</strong>问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p><p><a id="q7"></a></p><blockquote><p>问题：我的程序不会动了，我认为系统工具 X 有问题</p></blockquote><p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。</p><p><a id="q8"></a></p><blockquote><p>问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？</p></blockquote><p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html" target="_blank" rel="noopener">这儿</a>找到使用者群组的清单）。</p><p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<strong>所有</strong>被怀疑的硬件作关键词仔细搜索。</p><p><a id="q9"></a></p><blockquote><p>问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</p></blockquote><p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p><h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p></blockquote><p>这种问法无非想得到 <a href="#RTFM">STFW</a> 这样的回答。</p><p><strong>聪明问题</strong>：</p><blockquote><p>我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？</p></blockquote><p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我从 foo 项目找来的源码没法编译。它怎么这么烂？</p></blockquote><p>他觉得都是别人的错，这个傲慢自大的提问者。</p><p><strong>聪明问题</strong>：</p><blockquote><p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？</p></blockquote><p>提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我的主机板有问题了，谁来帮我？</p></blockquote><p>某黑客对这类问题的回答通常是：<code>好的，还要帮你拍拍背和换尿布吗？</code>，然后按下删除键。</p><p><strong>聪明问题</strong>：</p><blockquote><p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p></blockquote><p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。</p><p>在最后一个问题中，注意<code>告诉我答案</code>和<code>给我启示，指出我还应该做什么诊断工作</code>之间微妙而又重要的区别。</p><p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。</p><p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。</p><p>事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的<strong>名</strong>人，而是因为我用了正确的方式来提问。</p><p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<strong>像</strong>个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。</p><h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p><p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p><p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p><p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p><p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p><p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。</p><h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><strong>态度和善一点</strong>。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p><p><strong>对初犯者私下回复</strong>。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</p><p><strong>如果你不确定，一定要说出来</strong>！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p><p><strong>如果帮不了忙，也别妨碍他</strong>。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 —— 有些可怜的呆瓜会把它当成真的指令。</p><p><strong>试探性的反问以引出更多的细节</strong>。如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。</p><p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。</p><p><strong>如果你决定回答，就请给出好的答案</strong>。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（wordaround），应推荐更好的工具，重新界定问题。</p><p><strong>正面的回答问题</strong>！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试 X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都没有。</p><p><strong>帮助你的社区从问题中学习</strong>。当回复一个好问题时，问问自己<code>如何修改相关文件或常见问题文件以免再次解答同样的问题？</code>，接着再向文件维护者发一份补丁。</p><p>如果你是在研究一番后才做出的回答，<strong>展现你的技巧而不是直接端出结果</strong>。毕竟<code>授人以鱼不如授人以渔</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;程序员要面对的变量非常多，这导致程序员会遇见各种各样的问题，为了节约时间提高效率，询问在这一方面有经验的程序员是个好主意。但如果想得到想要的 solution，你需要学习如何提问。&lt;br&gt;关于这个问题已经有了非常好的答案，&lt;a href=&quot;https://github.co
      
    
    </summary>
    
    
    
      <category term="提问" scheme="http://yoursite.com/tags/%E6%8F%90%E9%97%AE/"/>
    
      <category term="沟通" scheme="http://yoursite.com/tags/%E6%B2%9F%E9%80%9A/"/>
    
  </entry>
  
  <entry>
    <title>DDIA阅读笔记</title>
    <link href="http://yoursite.com/2019/08/01/ddia/"/>
    <id>http://yoursite.com/2019/08/01/ddia/</id>
    <published>2019-08-01T03:11:27.000Z</published>
    <updated>2019-12-19T12:07:09.246Z</updated>
    
    <content type="html"><![CDATA[<p>无主复制<br>amazon 用在 Dynamo 后再次流行。<br>无主，那往哪写？同时写或者一个coordinator解决。<br>写的时候一个节点挂掉，读的时候出错咋办？–同时读多个副本并仲裁<br>那么挂掉的节点如果赶上？<br>读修复或者反熵（一个后台进程to 查找数据副本之间的差异并复制缺少的数据</p><p>最后写入胜利：正如其名，只有时间戳最大的会被写入，其他丢弃。这实现了最终收敛的目标。</p><p>并发的定义：时间并不重要，现实中很难判断两个事件是否发生于同时间。所以，两个操作互相意识不到对方存在，则称其为并发，</p><p>此前发生关系：版本号解决，同时加以和客户端的交互，如果要合并同时写入的值，那么客户端需要做一些额外的工作。比如插入求交集，删除使用 tombstone 机制而不是物理上的删除。应用逻辑汇总写这些代码容易出错，所以又一些自动操作和数据结构解决这些问题。如 CRDT 数据结构家族。</p><h1 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h1><blockquote><p>我们必须跳出电脑指令序列的窠臼。 叙述定义、描述元数据、梳理关系，而不是编写过程。</p></blockquote><p>大体量的数据不仅需要复制，也需要分区 partitions，也称为分片 sharding for 可扩展性。其目标是将数据和查询负载均衡在各个节点上。除了随机，一个合理的办法是根据 key 的范围、hash分区。前者对应图书馆的书的摆放，后者则引出了一致性hash 的问题。</p><p>一个反面的例子是 mod N 函数做hash冲突，这会使得我们在添加节点（增加N）时移动几乎所有节点的部分数据————我们只应该移动必须的数据。<br>一个简单的解决方案是创建比节点更多的分区，并为各个节点分配多个分区。通过类似线程中的工作窃取（就是均摊啦）实现公平分配。</p><p>在将数据分割到多个机器上的节点后，如何 route ？ 这是 service discovery 问题，在微服务架构中提的很多，但通过网络访问的软件都有这个问题。<br>三种方式做服务发现。 比较常用的是 zk 跟踪集群元数据做协调服务。</p><blockquote><p>zk的用处？<br>————服务发现。ZooKeeper来跟踪集群元数据，每个节点在ZooKeeper中注册自己，ZooKeeper维护分区到节点的可靠映射。 其他参与者（如路由层或分区感知客户端）可以在ZooKeeper中订阅此信息。 只要分区分配发生的改变，或者集群中添加或删除了一个节点，ZooKeeper就会通知路由层使路由信息保持最新状态。HBase，SolrCloud和Kafka也使用ZooKeeper来跟踪分区分配。<br>MongoDB具有类似的体系结构，但它依赖于自己的配置服务器（config server） 实现和mongos守护进程作为路由层。Cassandra和Riak采取不同的方法：他们在节点之间使用流言协议（gossip protocol） 来传播群集状态的变化。请求可以发送到任意节点，该节点会转发到包含所请求的分区的适当节点（图6-7中的方法1）。这个模型在数据库节点中增加了更多的复杂性，但是避免了对像ZooKeeper这样的外部协调服务的依赖。</p></blockquote><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><blockquote><p>让程序员来处理过度使用事务导致的性能问题，总比缺少事务编程好得多。</p></blockquote><blockquote><p>数据系统的任何一个节点都有出错的可能。</p></blockquote><p>transaction 是简化并发问题的首选机制（数据系统）</p><p>隔离性是一个很复杂的问题。</p><p>串行化算法<br>2PL 两阶段锁定<br>性能差</p><p>谓词锁<br>索引范围锁</p><p>可序列化快照隔离–&gt;&gt;mvcc实现<br>线性一致性（强一致性）linearizability<br>是一个新鲜度保证。举个例子。 一主二从，两个从节点接收到主的复制请求时间不同而给出的被查询结果不同。</p><p>如果与写入同时发生的读取可以返回旧值或新值，那么读者可能会在写入期间看到数值在旧值和新值之间来回翻转。<br>一个合理的解决是在第一次读到新值后，后边的都是新值（即避免翻转）。<br>正式的定义是注释6:<br><strong>表现为</strong>：<strong>好像只有一个数据副本，而且所有的操作都是原子的</strong><br>通过记录所有请求和响应的时序，并检查它们是否可以排列成有效的顺序，测试一个系统的行为是否线性一致性是可能的。</p><h1 id="线性一致性和可序列化-p279"><a href="#线性一致性和可序列化-p279" class="headerlink" title="线性一致性和可序列化 p279"></a>线性一致性和可序列化 p279</h1><p>脑裂：leader 从一个变为多个。</p><p>zk 和 etcd 之类的协调服务通过<strong>一致性算法</strong> 以容错的方式实现线性一致的操作，线性一致性存储服务是这些协调任务的基础。</p><p>从复制的角度，四种复制哪些可以实现强一致性？哪些不能？为什么？</p><p>实际上线性一致性的系统很少，在不使用内存屏障或者围栏的情况下，CPU、内存也不满足。原因是每个CPU核都有自己的内存缓存和存储缓冲区。默认情况下，内存访问首先走缓存，任何变更会异步写入主存。失去了线性一致性。</p><p>性能上，线性一致性，读写请求的响应时间至少与网络延迟的不确定性成正比。</p><h1 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h1><p>只考虑了一个一致性模型（即线性一致性）和一种故障（网络分区 ，或活跃但彼此断开的节点）。它没有讨论任何关于网络延迟，死亡节点或其他权衡的事。【2，42】<br>分区（partition）指代将大数据集细分为小数据集的操作（分片<br>网络分区（network partition）是一种特定类型的网络故障</p><h1 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h1><p>单主复制通过选择一个节点作为主库来确定操作的全序，</p><p>顺序，线性一致性和共识之间有着深刻的联系。领导者在单主复制中的主要目的就是，在复制日志中确定写入顺序vi 第九章：一致性与共识286 （order of write）——也就是从库应用这些写入的顺序。如果不存在一个领导者，则并发操作可能导致冲突</p><p>在线性一致的数据存储中是不存在并发操作的，此时操作是全序的。否则相反。<br>但全序不一定非得要线性一致。可以用时间戳解决。有一个简单的方法来产生与因果关系一致的序列号。它被称为兰伯特时间戳【56】。P292</p><h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><p>真实的系统通常没有准确的时钟，算法只能看到石英振荡器和 NTP 产生的实时逼近，但可以假设存在一个无法访问的全局时钟，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;无主复制&lt;br&gt;amazon 用在 Dynamo 后再次流行。&lt;br&gt;无主，那往哪写？同时写或者一个coordinator解决。&lt;br&gt;写的时候一个节点挂掉，读的时候出错咋办？–同时读多个副本并仲裁&lt;br&gt;那么挂掉的节点如果赶上？&lt;br&gt;读修复或者反熵（一个后台进程to 查
      
    
    </summary>
    
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Rust 的错误处理</title>
    <link href="http://yoursite.com/2019/08/01/2019-08-02-Rust%20%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2019/08/01/2019-08-02-Rust 的错误处理/</id>
    <published>2019-08-01T03:11:00.000Z</published>
    <updated>2019-10-29T13:36:36.484Z</updated>
    
    <content type="html"><![CDATA[<p>在 Rust 中，错误处理主要包括显式的 panic 和 Option。</p><p>一个使用 panic 的例子</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">give_princess</span></span>(gift: &amp;<span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="comment">// 公主讨厌蛇，所以如果公主表示厌恶的话我们要停止！</span></span><br><span class="line">    <span class="keyword">if</span> gift == <span class="string">"snake"</span> &#123; <span class="built_in">panic!</span>(<span class="string">"AAAaaaaa!!!!"</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"I love &#123;&#125;s!!!!!"</span>, gift);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当错误有可能发生，且应当由调用者处理时，使用 Result 而不是 unwrap 然后 使用 expect，除非是在测试或者 prototype develop.</li></ul><p>std 中的 Option<T> enum 类型用于可能有“不存在”的情况，其内容包括</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Some(T)//找到一个属于 T 类型的元素</span><br><span class="line">None//相当于null</span><br></pre></td></tr></table></figure><p>之后用 <code>match</code> 进行显式的处理或者 <code>unwarp</code> 隐式处理。后者要么返回 some 内部元素，要么直接 panic。</p><p>一个用 match 处理的例子</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">give</span></span>(gift: <span class="built_in">Option</span>&lt;&amp;<span class="built_in">str</span>&gt;)&#123;</span><br><span class="line">    <span class="keyword">match</span> gift&#123;</span><br><span class="line">        <span class="literal">Some</span>(<span class="string">"snake"</span>) =&gt; <span class="built_in">println!</span>(<span class="string">"fuck"</span> ),</span><br><span class="line">        <span class="literal">Some</span>(inner) =&gt; <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,inner ),</span><br><span class="line">        <span class="literal">None</span> =&gt;<span class="built_in">println!</span>(<span class="string">"???"</span> ),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意这里要用 Some 包装，直接传字符串会报错</span></span><br><span class="line"><span class="comment">//————你看 give 的 para 就知道了</span></span><br><span class="line"><span class="keyword">let</span> food = <span class="literal">Some</span>(<span class="string">"food"</span>);</span><br><span class="line"><span class="keyword">let</span> snake = <span class="literal">Some</span>(<span class="string">"snake"</span>);</span><br><span class="line"><span class="keyword">let</span> void = <span class="literal">None</span>;</span><br><span class="line">give(food);</span><br><span class="line">give(<span class="literal">None</span>);</span><br><span class="line">give(snake);</span><br><span class="line">give(void);</span><br></pre></td></tr></table></figure><p>从上边可以看出来，当 match 很多事，使用较为繁琐，此时可以使用组合算子（combinator），以 模块化的风格来管理控制流。主要就是用 closure 方便地对主要情况而非特殊情况（None）进行处理，例子如下</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">process</span></span>(food: <span class="built_in">Option</span>&lt;Food&gt;) -&gt; <span class="built_in">Option</span>&lt;Cooked&gt; &#123;</span><br><span class="line">    food.map(|f| Peeled(f))</span><br><span class="line">        .map(|Peeled(f)| Chopped(f))</span><br><span class="line">        .map(|Chopped(f)| Cooked(f))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>map() 以链式调用的方式来简化 match 语句。然而，如果以返回类型是 Option<T> 的函数作为 map() 的参数，会导致出现嵌套形式 Option&lt;Option<T>&gt;。这样多层串联 调用就会变得混乱。所以有必要引入 and_then()，在某些语言中它叫做 flatmap。例子如下</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要做一份好菜，我们需要原材料和食谱。</span></span><br><span class="line"><span class="comment">// 我们可以借助一系列 `match` 来表达这个逻辑：</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">cookable_v1</span></span>(food: Food) -&gt; <span class="built_in">Option</span>&lt;Food&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> have_ingredients(food) &#123;</span><br><span class="line">        <span class="literal">None</span>       =&gt; <span class="literal">None</span>,</span><br><span class="line">        <span class="literal">Some</span>(food) =&gt; <span class="keyword">match</span> have_recipe(food) &#123;</span><br><span class="line">            <span class="literal">None</span>       =&gt; <span class="literal">None</span>,</span><br><span class="line">            <span class="literal">Some</span>(food) =&gt; <span class="literal">Some</span>(food),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以使用 `and_then()` 把上面的逻辑改写得更紧凑：</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">cookable_v2</span></span>(food: Food) -&gt; <span class="built_in">Option</span>&lt;Food&gt; &#123;</span><br><span class="line">    have_ingredients(food).and_then(have_recipe)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Result 是 Option 类型的更丰富的版本，描述的是可能 的错误而不是可能的不存在。<br>Result 有很多类似 Option 的方法。例如 unwrap()，它要么举出元素 T，要么就 panic.我们希望把 错误返回给调用者，这样它可以决定回应错误的正确方式。<br>例子如下</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiply</span></span>(first_number_str: &amp;<span class="built_in">str</span>, second_number_str: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="comment">// 我们试着用 `unwrap()` 把数字放出来。它会咬我们一口吗？</span></span><br><span class="line">    <span class="keyword">let</span> first_number = first_number_str.parse::&lt;<span class="built_in">i32</span>&gt;().unwrap();</span><br><span class="line">    <span class="keyword">let</span> second_number = second_number_str.parse::&lt;<span class="built_in">i32</span>&gt;().unwrap();</span><br><span class="line">    first_number * second_number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从unwrap改为模式匹配</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiply</span></span>(first_number_str: &amp;<span class="built_in">str</span>, second_number_str: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">i32</span>, ParseIntError&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> first_number_str.parse::&lt;<span class="built_in">i32</span>&gt;() &#123;</span><br><span class="line">        <span class="literal">Ok</span>(first_number)  =&gt; &#123;</span><br><span class="line">            <span class="keyword">match</span> second_number_str.parse::&lt;<span class="built_in">i32</span>&gt;() &#123;</span><br><span class="line">                <span class="literal">Ok</span>(second_number)  =&gt; &#123;</span><br><span class="line">                    <span class="literal">Ok</span>(first_number * second_number)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="literal">Err</span>(e) =&gt; <span class="literal">Err</span>(e),</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">Err</span>(e) =&gt; <span class="literal">Err</span>(e),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 组合算子</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiply</span></span>(first_number_str: &amp;<span class="built_in">str</span>, second_number_str: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">i32</span>, ParseIntError&gt; &#123;</span><br><span class="line">    first_number_str.parse::&lt;<span class="built_in">i32</span>&gt;().and_then(|first_number| &#123;</span><br><span class="line">        second_number_str.parse::&lt;<span class="built_in">i32</span>&gt;().map(|second_number| first_number * second_number)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 match 和 提前返回 early return 代替组合算子</span></span><br><span class="line"><span class="comment">// 注意 return ，终于用到了哈哈哈</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiply</span></span>(first_number_str: &amp;<span class="built_in">str</span>, second_number_str: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">i32</span>, ParseIntError&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> first_number = <span class="keyword">match</span> first_number_str.parse::&lt;<span class="built_in">i32</span>&gt;() &#123;</span><br><span class="line">        <span class="literal">Ok</span>(first_number)  =&gt; first_number,</span><br><span class="line">        <span class="literal">Err</span>(e) =&gt; <span class="keyword">return</span> <span class="literal">Err</span>(e),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> second_number = <span class="keyword">match</span> second_number_str.parse::&lt;<span class="built_in">i32</span>&gt;() &#123;</span><br><span class="line">        <span class="literal">Ok</span>(second_number)  =&gt; second_number,</span><br><span class="line">        <span class="literal">Err</span>(e) =&gt; <span class="keyword">return</span> <span class="literal">Err</span>(e),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="literal">Ok</span>(first_number * second_number)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// unwrap 且避免产生 panic，? 几乎1 就等于一个会返回 Err 而不是 panic 的 unwrap</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiply</span></span>(first_number_str: &amp;<span class="built_in">str</span>, second_number_str: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">i32</span>, ParseIntError&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> first_number = first_number_str.parse::&lt;<span class="built_in">i32</span>&gt;()?;</span><br><span class="line">    <span class="keyword">let</span> second_number = second_number_str.parse::&lt;<span class="built_in">i32</span>&gt;()?;</span><br><span class="line"></span><br><span class="line">    <span class="literal">Ok</span>(first_number * second_number)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在出现 ？以前，是使用 try! 宏的，栗子如下</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiply</span></span>(first_number_str: &amp;<span class="built_in">str</span>, second_number_str: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">i32</span>, ParseIntError&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> first_number = <span class="built_in">try!</span>(first_number_str.parse::&lt;<span class="built_in">i32</span>&gt;());</span><br><span class="line">    <span class="keyword">let</span> second_number = <span class="built_in">try!</span>(second_number_str.parse::&lt;<span class="built_in">i32</span>&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="literal">Ok</span>(first_number * second_number)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">Ps:为了减少代码量，可以使用 </span><br><span class="line">```rust</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">AliasedResult</span></span>&lt;T&gt; = <span class="built_in">Result</span>&lt;T, ParseIntError&gt;;</span><br></pre></td></tr></table></figure><p>这样，函数名可以改为</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiply</span></span>(first_number_str: &amp;<span class="built_in">str</span>, second_number_str: &amp;<span class="built_in">str</span>) -&gt; AliasedResult&lt;<span class="built_in">i32</span>&gt;</span><br></pre></td></tr></table></figure><p>参考资料</p><ol><li><a href="https://doc.rust-lang.org/rust-by-example/" target="_blank" rel="noopener">Rust by Example</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Rust 中，错误处理主要包括显式的 panic 和 Option。&lt;/p&gt;
&lt;p&gt;一个使用 panic 的例子&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Rust" scheme="http://yoursite.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务的原理与实现</title>
    <link href="http://yoursite.com/2019/07/13/2019-08-22-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/07/13/2019-08-22-分布式事务的学习笔记/</id>
    <published>2019-07-13T14:33:14.000Z</published>
    <updated>2019-10-30T08:39:53.767Z</updated>
    
    <content type="html"><![CDATA[<p>看《从 Paxos 到 Zookeeper》看的很爽，于是在 唯一了解的 CAP 和选举问题之外，系统地整理了分布式事务的相关问题。</p><h1 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h1><p>分布式事务就是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。本质上来说，分布式事务就是为了保证不同数据库的数据一致性。</p><p>换句话说，分布式事务 = n 个本地事务。通过事务管理器，达到 n 个本地事务要么全部成功，要么全部失败。</p><h1 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h1><p>一句话：单机装不下了(……)至于是数据量太大还是为了性能或者计算能力，下边慢慢说。<br>举世闻名（……）的微服务就是把一个项目整体拆分成由不同事务组成的模块，显然不同的模块分布在不同的逻辑块上。<br>举个例子，一个公司之内，用户的资产可能分为好多个部分，比如余额，积分，优惠券等等。在公司内部有可能积分功能由一个微服务团队维护，优惠券又是另外的团队维护。<br>这样的话就无法保证积分扣减了之后，优惠券能否扣减成功。<br>另一个原因是数据库要做分库分表。当然从实际角度考虑，在千万量级之前，做数据库的分库分表并不是什么好主意。<br>但即使不这样，NoSQL 自带的分布式特性使得常用来做缓存的 Redis 也需要使用者了解一定的分布式知识（这句话很绕，但词法和语法分析都没问题，哈哈）</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>数据库的 ACID 满足了数据库本地事务的基础，但是它无法满足分布式事务，这个时候衍生了 CAP 和 BASE 两个经典理论。</p><h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><p>CAP 理论</p><p>CAP 定理，又被叫作布鲁尔定理。对于设计分布式系统来说(不仅仅是分布式事务)的架构师来说，CAP 就是你的入门理论。</p><ul><li><p>C (一致性)：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）</p></li><li><p>A (可用性)：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）</p></li><li><p>P (分区容错性)：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在 C 和 A 之间做出选择。</p></li></ul><p>高可用、数据一致性是很多系统设计的目标，但是分区又是不可避免的事情。我们来看一看分别拥有 CA、CP 和 AP 的情况。</p><ul><li>CA without P：如果不要求 P（不允许分区），则 C（强一致性）和A（可用性）是可以保证的。但其实分区不是你想不想的问题，而是始终会存在，因此 CA 的系统更多的是允许分区后各子系统依然保持 CA 。<ul><li>单机的Oracle或MySQL之类的传统RDBMS数据库没有分区容错，是CA系统，可以达到强一致性和可用性。</li></ul></li></ul><ul><li><p>CP without A：如果不要求 A（可用），相当于每个请求都需要在 Server 之间强一致，而 P（分区）会导致同步时间无限延长，如此 CP 也是可以保证的。很多传统的数据库分布式事务都属于这种模式。</p><ul><li><p>半同步复制在master写binlog成功之后不立即提交，而是等待其中一个slave同步成功，只要有一个slave同步成功，立即提交。这种方式比异步复制性能稍差（需要等待至少一个slave同步成功才提交），但是在一定程度上保证了数据一致性（依然不是CP系统：如果同步slave2失败，master和slave1在commit之后挂了，slave2对外提供服务，从slave2中无法查询到刚才提交的数据）。</p><p><img src="/img/8904178FA8EA0F47AFE1CB749F7E4AD5.jpg" alt="插图"></p></li></ul></li><li><p>AP wihtout C：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的NoSQL都属于此类。</p><ul><li><p>Mysql 的异步复制在master写binlog成功之后立即提交，不等待slave的同步结果。这种方式有很高的性能，但是牺牲了数据一致性。如果slave同步不成功就会造成master和slave数据不一致。异步复制虽然性能高（A），但是数据有可能不一致（C），所以异步复制是AP系统。</p><p><img src="/img/5728A35581B66B735DDC81C3670D02AD.jpg" alt="插图"></p></li></ul></li></ul><h3 id="总结如下"><a href="#总结如下" class="headerlink" title="总结如下"></a>总结如下</h3><ul><li>MySQL 主从异步复制是 AP 系统。</li><li>MySQL 主从半同步复制是 CP 系统。</li><li>Zookeeper 是 CP 系统。</li><li>Redis 主从同步是 AP 系统。</li><li>Eureka 主从同步是 AP 系统。</li></ul><h2 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h2><p>BASE 是 Basically Available(基本可用)、Soft state(软状态)和 Eventually consistent (最终一致性) 三个短语的缩写。是对 CAP 中AP 的一个扩展</p><p>BA 基本可用：分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。<br>S 软状态：允许系统中存在中间状态，这个状态不影响系统可用性，这里指的是 CAP 中的不一致。<br>E 最终一致：最终一致是指经过一段时间后，所有节点数据都将会达到一致。<br>BASE 解决了 CAP 中理论没有网络延迟，在 BASE 中用软状态和最终一致，保证了延迟后的一致性。</p><p>BASE 和 ACID 是相反的，它完全不同于 ACID 的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。</p><p>对于大部分的分布式应用而言，只要数据在规定的时间内达到最终一致性即可。我们可以把符合传统的 ACID 叫做刚性事务，把满足 BASE 理论的最终一致性事务叫做柔性事务。<br>具体到分布式事务的实现上，业界主要采用了 XA 协议的强一致规范以及柔性事务的最终一致规范。</p><h1 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h1><ol><li><p>XA 方案</p></li><li><p>TCC 方案</p></li><li><p>本地消息表</p></li><li><p>可靠消息最终一致性方案</p></li><li><p>最大努力通知方案</p></li><li><p>SAGA</p></li></ol><h2 id="XA"><a href="#XA" class="headerlink" title="XA"></a>XA</h2><p>XA 是 X/Open CAE Specification (Distributed Transaction Processing)模型，它定义的 TM（Transaction Manager）与 RM（Resource Manager）之间进行通信的接口。</p><p>Java中 的 javax.transaction.xa.XAResource 定义了 XA 接口，它依赖数据库厂商对 jdbc-driver 的具体实现。</p><p>mysql-connector-java-5.1.30 的实现可参 com.mysql.jdbc.jdbc2.optional.MysqlXAConnection 类。<br>在 XA 规范中，数据库充当 RM 角色，应用需要充当 TM 的角色，即生成全局的 txId ，调用 XAResource 接口，把多个本地事务协调为全局统一的分布式事务。</p><p>目前 XA 有两种实现：</p><ol><li><p>基于一阶段提交( 1PC ) 的弱 XA 。</p></li><li><p>基于二阶段提交( 2PC ) 的强 XA 。</p></li></ol><h3 id="弱XA"><a href="#弱XA" class="headerlink" title="弱XA"></a>弱XA</h3><p>弱 XA 通过去掉 XA 的 Prepare 阶段，以达到减少资源锁定范围而提升并发性能的效果。典型的实现为在一个业务线程中，遍历所有的数据库连接，依次做 commit 或者 rollback。同本地事务相比，性能损耗低，但在事务提交的执行过程中，若出现网络故障、数据库宕机等预期之外的异常，将会造成数据不一致，且无法进行回滚。<br>目前 MyCAT、Sharding-Sphere 默认支持。</p><h3 id="强XA"><a href="#强XA" class="headerlink" title="强XA"></a>强XA</h3><p>二阶段提交是 XA 的标准实现。它将分布式事务的提交拆分为 2 个阶段：prepare 和 commit/rollback 。<br>    - 第一阶段：事务管理器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交。<br>    - 第二阶段：事务协调器要求每个数据库提交数据，或者回滚数据。<br>开启 XA 全局事务后，所有子事务会按照本地默认的隔离级别锁定资源，并记录 undo 和 redo 日志。然后由 TM 发起 prepare 投票，询问所有的子事务是否可以进行提交：<br>    - 当所有子事务反馈的结果为 “yes” 时，TM 再发起 commit 。<br>    - 若其中任何一个子事务反馈的结果为“no”，TM 则发起 rollback 。<br>    -如果在 prepare 阶段的反馈结果为 “yes” ，而 commit 的过程中出现宕机等异常时，则在节点服务重启后，可根据 XA recover 再次进行 commit 补偿，以保证数据的一致性。</p><p>尽量保证了数据的强一致，实现成本较低，在各大主流数据库都有自己实现，对于 MySQL 是从 5.5 开始支持。但会有很多问题</p><ol><li>单点问题：事务管理器在整个流程中扮演的角色很关键，如果其宕机，比如在第一阶段已经完成，在第二阶段正准备提交的时候事务管理器宕机，资源管理器就会一直阻塞，导致数据库无法使用。</li><li>同步阻塞：在准备就绪之后，资源管理器中的资源一直处于阻塞，直到提交完成，释放资源</li><li>数据不一致：两阶段提交协议虽然为分布式数据强一致性所设计，但仍然存在数据不一致性的可能，比如在第二阶段中，假设协调者发出了事务commit 的通知，但是因为网络问题该通知仅被一部分参与者所收到并执行了 commit 操作，其余的参与者则因为没有收到通知一直处于阻塞状态，这时候就产生了数据的不一致性。<br>可以采用现成的 Sharding Sphere来解决， 支持基于 XA 的强一致性事务解决方案，可以通过 SPI 注入不同的第三方组件作为事务管理器实现 XA 协议，如 Atomikos 和 Narayana 。<br>这个方案很少用————数据库一般不能跨服务操作————自己的服务有自己的数据库。一个反例是马云爸爸的88会员，真的🐂🍺。</li></ol><h2 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h2><p>TCC 模型是把锁的粒度完全交给业务处理，它需要每个子事务业务都实现Try-Confirm / Cancel 接口，其本质也是 2PC ，只是 TCC 在应用层控制。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ol><li>Try:<ul><li>尝试执行业务</li><li>完成所有业务检查（一致性）</li><li>预留必须业务资源（准隔离性）</li></ul></li><li>Confirm:<ul><li>确认执行业务；</li><li>真正执行业务，不作任何业务检查</li><li>只使用Try阶段预留的业务资源</li><li>Confirm 操作满足幂等性</li></ul></li><li>Cancel:<ul><li>取消执行业务</li><li>释放Try阶段预留的业务资源</li><li>Cancel操作满足幂等性<br>这三个阶段，都会按本地事务的方式执行。不同于 XA的prepare ，TCC 无需将 XA 的投票期间的所有资源挂起，因此极大的提高了吞吐量。</li></ul></li></ol><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>A –&gt; B 汇款100元。那么汇款服务和收款服务分别需要实现，Try-Confirm-Cancel 接口，并在业务初始化阶段将其注入到 TCC 事务管理器中。<br>汇款服务</p><ol><li>Try：<ul><li>检查A账户有效性，即查看A账户的状态是否为“转帐中”或者“冻结”</li><li>检查A账户余额是否充足</li><li>从A账户中扣减 100 元，并将状态置为“转账中”</li><li>预留扣减资源，将从 A 往 B 账户转账 100 元这个事件存入消息或者日志中</li></ul></li><li>Confirm：<ul><li>不做任何操作</li></ul></li><li>Cancel：<ul><li>A 账户增加 100 元</li><li>从日志或者消息中，释放扣减资源<br>收钱服务</li></ul></li><li>Try：<ul><li>检查 B 账户账户是否有效；</li></ul></li><li>Confirm：<ul><li>读取日志或者消息，B 账户增加 100 元</li><li>从日志或者消息中，释放扣减资源；</li></ul></li><li>Cancel：<ul><li>不做任何操作<br>由此可以看出，TCC 模型对业务的侵入强，改造的难度大。尽量不用，因为代码，尤其是回滚很麻烦。<br>但是，在需要前置资源锁定的场景，不得不使用 XA 或 TCC 的方式。再例如说，下单场景，在订单创建之前，需要扣除如下几个资源：</li></ul></li></ol><ul><li>优惠劵</li><li>钱包余额</li><li>积分</li></ul><p>那么，不得不进行前置多资源锁定，无非是使用 XA 的强锁，还是 TCC 的弱锁。在 oceans 的 tag 0.0.1 中，在未使用 TCC 的情况下，模拟 TCC 的效果的苦闷。</p><h2 id="本地消息表"><a href="#本地消息表" class="headerlink" title="本地消息表"></a>本地消息表</h2><p><img src="/img/02EDF3EDC128207E5786CC98F8722538.jpg" alt="插图"></p><ol><li><p>A 系统在自己本地一个事务里操作同时，插入一条数据到消息表；</p></li><li><p>接着 A 系统将这个消息发送到 MQ 中去；</p></li><li><p>B 系统接收到消息之后，在一个事务里，往自己本地消息表里插入一条数据，同时执行其他的业务操作，如果这个消息已经被处理过了，那么此时这个事务会回滚，这样保证不会重复处理消息；</p></li><li><p>B 系统执行成功之后，就会更新自己本地消息表的状态以及 A 系统消息表的状态；</p></li><li><p>如果 B 系统处理失败了，那么就不会更新消息表状态，那么此时 A 系统会定时扫描自己的消息表，如果有未处理的消息，会再次发送到 MQ 中去，让 B 再次处理；</p></li><li><p>这个方案保证了最终一致性，哪怕 B 事务失败了，但是 A 会不断重发消息，直到 B 那边成功为止。</p></li></ol><h2 id="可靠消息最终一致性方案"><a href="#可靠消息最终一致性方案" class="headerlink" title="可靠消息最终一致性方案"></a>可靠消息最终一致性方案</h2><p>不要用本地的消息表了，直接基于 MQ 来实现事务，具体如下<br><img src="/img/3507F4657A6C7DA9A2346EB210888D9E.jpg" alt="插图"></p><ol><li>A 系统先发送一个 prepared 消息到 mq，如果这个 prepared 消息发送失败那么就直接取消操作别执行了；</li><li>如果这个消息发送成功过了，那么接着执行本地事务，如果成功就告诉 mq 发送确认消息，如果失败就告诉 mq 回滚消息；</li><li>如果发送了确认消息，那么此时 B 系统会接收到确认消息，然后执行本地的事务；</li><li>mq 会自动定时轮询所有 prepared 消息回调你的接口，问你，这个消息是不是本地事务处理失败了，所有没发送确认的消息，是继续重试还是回滚？一般来说这里你就可以查下数据库看之前本地事务是否执行，如果回滚了，那么这里也回滚吧。这个就是避免可能本地事务执行成功了，而确认消息却发送失败了。</li><li>这个方案里，要是系统 B 的事务失败了咋办？重试咯，自动不断重试直到成功，如果实在是不行，要么就是针对重要的资金类业务进行回滚，比如 B 系统本地回滚后，想办法通知系统 A 也回滚；或者是发送报警由人工来手工回滚和补偿。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>TCC 和 MQ 都是以服务为范围进行分布式事务的处理，而 XA、BED、SAGA 则是以数据库为范围进行分布式处理。<br>对于数据库中间件来说，更趋向于选择后者，对于业务而言侵入小，改造的成本低。<br>Ps: 两个 2PC 事务的开源框架，<a href="https://github.com/Dromara/Raincat" target="_blank" rel="noopener">Raincat</a>&amp;<a href="https://github.com/codingapi/tx-lcn" target="_blank" rel="noopener">LCN</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://my.oschina.net/lhztt/blog/915533" target="_blank" rel="noopener">分布式系统理论（一）：CAP定理</a></li><li><a href="https://queue.acm.org/detail.cfm?id=1394128" target="_blank" rel="noopener">Base: An Acid Alternative</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看《从 Paxos 到 Zookeeper》看的很爽，于是在 唯一了解的 CAP 和选举问题之外，系统地整理了分布式事务的相关问题。&lt;/p&gt;
&lt;h1 id=&quot;个人理解&quot;&gt;&lt;a href=&quot;#个人理解&quot; class=&quot;headerlink&quot; title=&quot;个人理解&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>了解并发编程中的RCU</title>
    <link href="http://yoursite.com/2019/06/15/2019-05-30-RCU/"/>
    <id>http://yoursite.com/2019/06/15/2019-05-30-RCU/</id>
    <published>2019-06-15T13:33:14.000Z</published>
    <updated>2019-06-15T14:17:35.200Z</updated>
    
    <content type="html"><![CDATA[<p>为了保护共享数据,需要一些同步机制,如自旋锁(spinlock)，读写锁(rwlock),CPU的速度与访问内存的速度差距越来越大，而这种锁使用了原子操作指令，它需要原子地访问内存，也就说获得锁的开销与访存速度相关，另外在大部分非x86架构上获取锁使用了内存栅(Memory Barrier)，这会导致处理器流水线停滞或刷新，因此它的开销相对于CPU速度而言就越来越大。<br><a href="https://www.ibm.com/developerworks/cn/linux/l-rcu/index.html" target="_blank" rel="noopener">RCU</a><br>RCU(Read-Copy Update),读，拷贝更新,是一种基于延后处理的同步机制，在 2002 年 10 月 引入 Linux 内核。它允许读操作与更新操作并发执行而不是像常规的互斥锁一样让线程串行执行，从而提高了程序的可扩展性，相较于读写锁，有更好的性能。在非抢占式的内核里，RCU 读端的函数完全是 0 开销。</p><p>RCU 由三种机制构成</p><ol><li><p>用于插入的订阅机制</p></li><li><p>等待已有 RCU 结束的方法</p></li><li><p>使读端不受并发插入、删除的干扰的机制，也即维护多个版本的准则。</p></li></ol><p><a href="https://cloud.tencent.com/developer/article/1006226" target="_blank" rel="noopener">MESI是一种内存缓存一致性协议</a>， 存在“modified”，“exclusive”，“shared”和“invalid”四种状态，协议可以在一个指定的缓存行中应用这四种状态。因此，协议在每一个缓存行中维护一个两位的状态标记，这个标记附着在缓存行的物理地址和数据后面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了保护共享数据,需要一些同步机制,如自旋锁(spinlock)，读写锁(rwlock),CPU的速度与访问内存的速度差距越来越大，而这种锁使用了原子操作指令，它需要原子地访问内存，也就说获得锁的开销与访存速度相关，另外在大部分非x86架构上获取锁使用了内存栅(Memory
      
    
    </summary>
    
    
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="RCU" scheme="http://yoursite.com/tags/RCU/"/>
    
  </entry>
  
  <entry>
    <title>用 Optional 取代 null 的思考</title>
    <link href="http://yoursite.com/2019/06/13/2019-05-28-%E7%94%A8%20Optional%20%E5%8F%96%E4%BB%A3%20null/"/>
    <id>http://yoursite.com/2019/06/13/2019-05-28-用 Optional 取代 null/</id>
    <published>2019-06-13T14:33:14.000Z</published>
    <updated>2019-10-30T08:38:15.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h1><p>空指针异常 <code>NullPointerExpection</code> 是在 Java 开发过程中常见的异常，当我们访问数组中超过其长度-1的 Index 时，或者对 null 进行<code>.</code>运算时都会引发这个异常。一般来说，可以通过防御式检查<code>if(Object != null</code>来减少之。但很明显，这种方式牺牲了可读性，而且因为逐层潜嵌套，降低了可扩展性。而为了避免逐层嵌套使用多个返回值，那么可维护性就降低了。<br>实际上，空指针及对它的预防都有很多问题。</p><ul><li><p>它代表的是在静态类型语言中以一种错误的方式对缺失变量值的建模，本身没有任何意义。</p></li><li><p>它会使代码膨胀</p></li><li><p>Java一直试图避免让程序员意识到指针的存在，唯一的例外是：null指针</p></li><li><p>null并不属于任何类型， 这意味着它可以被赋值给任意引用类型的变量。这会导致问题，原因是当这个变量被传递到系统中的另一个部分后，你将无法获知这个null变量最初的赋值到底是什么类型。</p></li></ul><p>在 Java8 中提供了 Option 类来解决这个问题。————当你知道类中某个属性可能为 null 时，采用  <code>Optional&lt;class&gt;</code> 来代替 <code>class</code>.这样，从静态代码的角度，我们至少可以知道哪些值可为 null，哪些不可，方便我们排查错误。</p><p>官方文档描述如下</p><blockquote><p>A container object which may or may not contain a non-null value. If a value is present, isPresent() will return true and get() will return the value.</p></blockquote><p>那么，Optional 和 null 到底有什么区别呢？实际上，变量存在时， Optional类只是对类简单封装。变量不存在时， 缺失的值会被建模成一个“空”的Optional对象，由方法 <code>Optional.empty()</code> 返回。<code>Optional.empty()</code> 方法是一个静态工厂方法，它返回 Optional 类的特定单一实例。你可能还有疑问，null 引用和 <code>Optional.empty()</code> 有什么本?的区别吗？从语义上， 你可以把它们当作一回事儿， 但是实际中它们之间的差别非常大 ： 如果你尝试解引用一个 null ， 一 定 会 触发 NullPointerException ，不过使用 <code>Optional.empty()</code> 就完全没事，它是 Optional 类的一个有效对象，多种场景都能调用，非常有用。</p><h2 id="创建-Optional-对象"><a href="#创建-Optional-对象" class="headerlink" title="创建 Optional 对象"></a>创建 Optional 对象</h2><ol><li><p>声明一个空的 Optional<br><code>Optional&lt;Car&gt; optCar = Optional.empty();</code></p></li><li><p>依据一个非空值创建 Optional<br><code>Optional&lt;Car&gt; optCar = Optional.of(car);</code></p></li><li><p>创建可接受null的Optional</p><p> <code>Optional&lt;Car&gt; optCar = Optional.ofNullable(car);</code></p></li></ol><h2 id="使用-map-从-Optional-对象中提取和转换值"><a href="#使用-map-从-Optional-对象中提取和转换值" class="headerlink" title="使用 map 从 Optional 对象中提取和转换值"></a>使用 map 从 Optional 对象中提取和转换值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; name =</span><br><span class="line">optInsurance.map(Insurance::getName;</span><br></pre></td></tr></table></figure><h2 id="使用-flatMap-链接-Optional-对象"><a href="#使用-flatMap-链接-Optional-对象" class="headerlink" title="使用 flatMap 链接 Optional 对象"></a>使用 flatMap 链接 Optional 对象</h2><p>链式调用 map() 根本无法通过编译，原因是 Optional 发生了嵌套，可以使用 flatMap 完成.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person.flatMap(Person::getCar)  </span><br><span class="line">.flatMap(Car::getInsurance)  </span><br><span class="line">.map(Insurance::getName) </span><br><span class="line">.orElse(<span class="string">"Unknown"</span>);</span><br></pre></td></tr></table></figure><h2 id="无法序列化的-Optional"><a href="#无法序列化的-Optional" class="headerlink" title="无法序列化的 Optional"></a>无法序列化的 Optional</h2><p>Java??的架构师 Brian Goetz曾 经非常明确地说过，Optional的设计初衷仅仅是要支持能返回Optional对象的语法，所以它也并未实现Serializable接口，如果你一定要实现序列化的模型，可以这样做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> Car car;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;Car&gt; <span class="title">getCarAsOptional</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(car);  </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;空指针异常&quot;&gt;&lt;a href=&quot;#空指针异常&quot; class=&quot;headerlink&quot; title=&quot;空指针异常&quot;&gt;&lt;/a&gt;空指针异常&lt;/h1&gt;&lt;p&gt;空指针异常 &lt;code&gt;NullPointerExpection&lt;/code&gt; 是在 Java 开发过程中常见的异常
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="异常" scheme="http://yoursite.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
      <category term="重构" scheme="http://yoursite.com/tags/%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>对象存储的优势及实习问题记录</title>
    <link href="http://yoursite.com/2019/06/13/2019-07-04-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E5%8F%8AGET%20Bucket%20(List%20Objects)%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/06/13/2019-07-04-对象存储技术学习及GET Bucket (List Objects)性能问题/</id>
    <published>2019-06-13T14:33:14.000Z</published>
    <updated>2019-10-29T23:41:01.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h1><p>“对象存储”来源于英文“Object Storage”或“Object-based Storage”</p><h3 id="特性与目标"><a href="#特性与目标" class="headerlink" title="特性与目标"></a>特性与目标</h3><p>多租户<br>不假设数据特征，包括类型，大小等<br>存储空间可无限扩展，且性能该随容量水平扩展而线性提升，不然数据量越大，请求越多，性能却不提升，系统的存取性能只会越来越慢<br>数据安全<br>服务高可靠</p><h3 id="索引设计"><a href="#索引设计" class="headerlink" title="索引设计"></a>索引设计</h3><p>顶级命名空间service+bucket即可</p><h3 id="元信息"><a href="#元信息" class="headerlink" title="元信息"></a>元信息</h3><p>属于哪个存储空间<br>类型<br>大小<br>校验值<br>最后修改时间</p><h4 id="特殊元信息"><a href="#特殊元信息" class="headerlink" title="特殊元信息"></a>特殊元信息</h4><p>演唱者是谁<br>作词者是谁<br>作曲者是谁<br>属于哪张唱片<br>属于什么风格</p><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>传统存储中，块存储暴露Block 文件系统或者网络文件系统如NFS暴露POSIX接口</p><h2 id="DAS-Direct-Attached-Storage"><a href="#DAS-Direct-Attached-Storage" class="headerlink" title="DAS  Direct-Attached Storage"></a>DAS  Direct-Attached Storage</h2><p>直连式存储。直接连接到某台计算机且其他计算机无法获取，如PC的硬盘驱动器。因为服务器无需通过网络来读写数据，所以DAS能为终端用户提供比网络存储更高的性能。如微软公司推荐使用DAS安装Exchange。<br>缺点是依赖服务器主机操作系统进行数据的IO读写和存储维护管理，数据备份和恢复要求占用服务器主机资源（包括CPU、系统IO等）。直连式存储的数据量越大，备份和恢复的时间就越长，对服务器硬件的依赖性和影响就越大。 </p><h2 id="NAS-Network-Attached-Storage"><a href="#NAS-Network-Attached-Storage" class="headerlink" title="NAS  Network-Attached Storage"></a>NAS  Network-Attached Storage</h2><p>网络附属存储/网络接入存储<br>简单说就是连接在网络上，具备资料存储功能的装置，也因此称为网络存储器。将存储设备与服务器彻底分离，底层磁盘通过文件系统类型（分区，格式化后）通过网络的方式（发送ip包）共享给前端应用</p><h2 id="SAN-Storage-Area-Network"><a href="#SAN-Storage-Area-Network" class="headerlink" title="SAN Storage Area Network"></a>SAN Storage Area Network</h2><p>存储区域网络<br> 通过光纤设备将存储设别和服务器连接一起，数据和服务器分离，底层磁盘以块的模式共享给前端的应用服务器。<br> SAN是一个采用网状通道（简称FC）技术，通过FC交换机连接存储阵列和服务器主机，建立专用于数据存储的区域网络。<br> <img src="/img/5E33AC1A918F56A6FFCF48F433A594BF.jpg" alt="插图"></p><h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><ul><li><p>服务可用性更高<br>通过支持对象数据的高可靠性和业务节点的高可靠性网络、节点的多冗余设计，系统设计可用性达到99.99%。</p></li><li><p>数据可靠性更高<br>通过提供对象数据多份冗余和保证多份对象的数据一致性自动修复技术来提供对象数据的高可靠性。OBS系统设计的数据持久性高达99.999999999%（11个9），意为对象存储服务里1000亿个用户文件，每月最多只有1个文件发生数据丢失的可能性。</p></li><li><p>用户数据更安全<br>用户数据传输到OBS时支持SSL加密，同时，OBS通过AK/SK对访问用户的身份进行鉴权，且结合了ACL、桶策略等多种方式对桶和对象进行访问控制，确保数据传输与访问的安全。此外，用户所上传的对象数据在对象存储服务中分片随机存储在不同硬盘上，所以即便磁盘数据被盗走，也无法将其还原成对象数据。</p></li><li><p>容量无限扩展<br>OBS所有业务、存储节点采用分布式集群方式工作，各功能节点、集群都可以独立扩容，整个扩容过程对用户完全透明。用户只需尽情享用云存储带来的无限空间，不必预测未来的存储需求并可以按需要向上和向下扩展，从而大幅提高业务灵活性。</p></li><li><p>维护成本更低<br>由于数据存储在OBS中，企业无需招聘专门的存储设备维护人员，设备的维护交由OBS处理即可。</p></li></ul><h1 id="实习问题记录"><a href="#实习问题记录" class="headerlink" title="实习问题记录"></a>实习问题记录</h1><h2 id="为什么GET-Bucket-List-Objects-在Object多时会慢？"><a href="#为什么GET-Bucket-List-Objects-在Object多时会慢？" class="headerlink" title="为什么GET Bucket (List Objects)在Object多时会慢？"></a>为什么GET Bucket (List Objects)在Object多时会慢？</h2><p>原问题“get bucket那个接口的实现比较麻烦，在object的量很大的情况下，这个接口的性能会很差。你可以想想这个问题”<br>根据API文档所说</p><ol><li>数据量大，多次循环调用该 API才可获得给定 Prefix 条件的所有对象列表。不像其他API只需要一次Http通信；网络通信次数多，</li><li>需要模拟文件系统的目录结构，对delimiter划分的相同前缀的多个对象遍历和合并。底层实现需要较深的函数调用栈或者内存空间。</li><li>Object数量多时更改更频繁，缓存容易失效</li></ol><p>不知道元信息的存储系统是否支持事务，如果不支持，并发情况下我觉得会加共享锁（读锁），锁竞争也会带来性能开销。可以用redis、zookeeper做分布式协调组件的情况下，可以多个请求竞争一个锁，只有一个请求到达并被处理，然后更新缓存供其他请求使用，从而提高吞吐量</p><p>就是关于 GET Bucket (List Objects)在Object多时性能很差的问题，有没有这几个原因</p><ol><li>网络IO次数多。根据文档所说，利用marker参数多次迭代调用该 API才可获得给定 Prefix 条件的所有对象列表。</li><li>计算资源消耗大。文档说支持用delimiter模拟文件系统的目录结构，对delimiter划分的相同前缀的多个对象遍历和合并。这需要较深的函数调用栈或者内存空间以及计算量。</li><li>保持实时性和一致性带来的开销。如文档所说，缓存容易失效，这会导致更多磁盘IO和数据处理。且读取过程中要加共享锁防止元数据被修改导致的一致性问题。</li></ol><p>看文档我觉得服务器应该是一次完成所有数据的处理，但要分段返回是因为数据可能太大吗？</p><p>关于处理方法<br>文档说因为性能问题不要依赖这个接口的并发调用，而是用户自己缓存数据，这是不是说对数据的准确性要求不太高。那这样后端在并发情况下通过选举其中一个请求到达服务器，从mysql或别的拿到结果放入缓存，其他请求都走缓存，就可以一定程度解决吞吐量的问题。同样，通过elasticsearch或者其他放弃事务机制的搜索方式元数据提高响应速度</p><h2 id="Q：“假设现在数据量在单机承受能力之内，用mysql来存储元信息，怎么处理list请求”"><a href="#Q：“假设现在数据量在单机承受能力之内，用mysql来存储元信息，怎么处理list请求”" class="headerlink" title="Q：“假设现在数据量在单机承受能力之内，用mysql来存储元信息，怎么处理list请求”"></a>Q：“假设现在数据量在单机承受能力之内，用mysql来存储元信息，怎么处理list请求”</h2><p>比如按照Zone划分表，表中有所属bucket信息，类型，大小，校验值，最后修改时间，特殊元信息等字段，可以在编程语言层面记录已经处理过的bucket，实现下次根据marker参数继续处理。事务机制（隔离性）可以方便地保证一致性问题，同时可以对marker或其他字段走索引加快IO速度。<br>mysql8之后已不自带缓存，如文档所说如果要加缓存可以用redis。同时在编程语言层面利用元信息的最后修改时间字段实现缓存自动更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对象存储&quot;&gt;&lt;a href=&quot;#对象存储&quot; class=&quot;headerlink&quot; title=&quot;对象存储&quot;&gt;&lt;/a&gt;对象存储&lt;/h1&gt;&lt;p&gt;“对象存储”来源于英文“Object Storage”或“Object-based Storage”&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="对象存储" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>Golang 学习笔记</title>
    <link href="http://yoursite.com/2019/06/02/2019-06-13-Go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/06/02/2019-06-13-Go学习笔记/</id>
    <published>2019-06-02T04:55:14.000Z</published>
    <updated>2019-09-01T02:30:31.539Z</updated>
    
    <content type="html"><![CDATA[<p>Mutex 做匿名字段 相关方法必须 pointer-receiver ，or 因复制导致锁机制失效。<br>（匿名字段，也称嵌入字段，Mutex、接口组合常用，注意方法覆盖问题）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d data</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">d.test(<span class="string">"read"</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">d.test(<span class="string">"write"</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> &#123;</span><br><span class="line">sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *data)</span> <span class="title">test</span> <span class="params">(s <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">d.Lock()</span><br><span class="line"><span class="keyword">defer</span> d.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++&#123;</span><br><span class="line">fmt.Println(s,i)</span><br><span class="line">time.Sleep(<span class="number">3</span>*time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mutex 锁不支持递归，即使在同一gr下也会死锁。</p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ol><li>反射可以将“接口类型变量”转换为“反射类型对象”。</li></ol><ol start="2"><li>反射可以将“反射类型对象”转换为“接口类型变量”。</li><li>如果要修改“反射类型对象”，其值必须是“可写的”。<br>自我描述（self-representation）和监测（examination）。反射机制就是在运行时动态的调用对象的方法和属性，gRPC通过反射实现。</li></ol><p>每个interface变量都有一个对应pair，pair中记录了实际变量的值和类型（value，type）反射就是用来检测存储在接口变量内部(值value；类型concrete type) pair对的一种机制。</p><h2 id="为什么慢？"><a href="#为什么慢？" class="headerlink" title="为什么慢？"></a>为什么慢？</h2><p>Golang reflect慢主要有两个原因</p><p>涉及到内存分配以及后续的GC；</p><p>reflect实现里面有大量的枚举，也就是for循环，比如类型之类的。</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>OO中，接口定义对象的行为；Go中，接口是一组方法签名，当一个类型为接口中所有方法提供定义时，称为实现该接口，与OOP类似，但耦合低，可以通过向上类型转换使编码更一致（函数参数声明为接口，函数定义调用接口方法，具体做什么依赖于运行时传入的实现接口的具体类（当然，Go中是接收该类的方法）。duck typing。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>实现会有运行期开销，最常见于提供包外访问或者预留扩展空间。接口也是一种结构类型，只是编译器加了限制，体现在</p><ol><li>不能由字段</li><li>不能定义自己的方法</li><li>不能实现方法</li><li>可嵌入其他接口<h2 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h2>由上可知，所有类型都实现了空接口（0个方法），都可以向上转型为空接口类型<h2 id="接口的内部表现"><a href="#接口的内部表现" class="headerlink" title="接口的内部表现"></a>接口的内部表现</h2>（K，V）表示，K是接口的基础类型，V是具体类型的值<h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2>类型断言用于提取接口的基础值，语法：i.(T)，如果不接收ok会报错<h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findType</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;  </span><br><span class="line">    <span class="keyword">switch</span> i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">        fmt.Printf(<span class="string">"String: %s\n"</span>, i.(<span class="keyword">string</span>))</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">        fmt.Printf(<span class="string">"Int: %d\n"</span>, i.(<span class="keyword">int</span>))</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">"Unknown type\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>也可以与接口比较，在case语句里边写点调用接口的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Describer <span class="keyword">interface</span> &#123;  </span><br><span class="line">    Describe()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> St <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s St)</span> <span class="title">Describe</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    fmt.Println(<span class="string">"被调用le!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findType</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;  </span><br><span class="line">    <span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> Describer:</span><br><span class="line">        v.Describe()</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">        fmt.Println(<span class="string">"String 变量"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">"unknown type\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    findType(<span class="string">"Naveen"</span>)</span><br><span class="line">    st := St(<span class="string">"我的字符串"</span>)</span><br><span class="line">    findType(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是接口覆盖了type定义的基本类型string</p><h1 id="匿名结构体、匿名类"><a href="#匿名结构体、匿名类" class="headerlink" title="匿名结构体、匿名类"></a>匿名结构体、匿名类</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">strt := <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">name: <span class="string">"Naveen R"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mutex 做匿名字段 相关方法必须 pointer-receiver ，or 因复制导致锁机制失效。&lt;br&gt;（匿名字段，也称嵌入字段，Mutex、接口组合常用，注意方法覆盖问题）&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发计数器探秘</title>
    <link href="http://yoursite.com/2019/06/02/2019-05-29-%E5%B9%B6%E5%8F%91%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    <id>http://yoursite.com/2019/06/02/2019-05-29-并发计数器/</id>
    <published>2019-06-02T04:33:14.000Z</published>
    <updated>2019-09-01T02:35:00.926Z</updated>
    
    <content type="html"><![CDATA[<p>计数可以说是计算机硬件最常见的功能，CPU 可以通过 CAS（Compare and swap）算法保证并发下数据的准确性，包括 IA32、Space 在内的 CPU 架构中采用的都是CAS指令，其语义为“<strong>我认为V的值应该为A，如果是，那么将V的值更新为B，否则不修改并告诉V的值实际为多少</strong>”，本质上是由现代CPU在硬件级实现的原子指令，允许进行无阻塞，多线程的数据操作同时兼顾了安全性以及效率，是一种<strong>乐观锁</strong>技术。</p><p>具体来说就是，CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。常用于在多线程编程中实现不被打断的数据交换操作，从而避免多线程同时改写某一数据时由于执行顺序不确定性以及中断的不可预知性产生的数据不一致问题。</p><p>对照到 Java 中，java.util.concurrent.atomic 中的Atomic* 通过 Unsafe 类调用 JVM 提供的 CAS 操作使用了这项技术，这些类又在 java.util.concurrent 包中的其他类中广泛使用。JDK1.7 源码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;  </span><br><span class="line">            <span class="keyword">long</span> current = get();  </span><br><span class="line">            <span class="keyword">long</span> next = current + <span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">if</span> (compareAndSet(current, next))  </span><br><span class="line">                <span class="keyword">return</span> current;  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapLong(<span class="keyword">this</span>, valueOffset, expect, update);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，<code>get()</code>方法获取当前的 long 值，然后自增，随后自旋判断新值与当前值，如果成功就返回，否则返回1. 注意到调用的是 unsafe 方法中的 <code>compareAndSwapLong()</code>,这对应x86 CPU 上的 <code>LOCK CMPXCHG</code> ，而在 JDK1.8 中，使用 <code>getAndAddLong()</code> 完成 <code>getAndIncrement</code>，这对应 x86 CPU 上的 <code>LOCK XADD</code> 指令。</p><h1 id="ABA"><a href="#ABA" class="headerlink" title="ABA"></a>ABA</h1><p>从上文可以发现一个问题：如果V的值多次改变，且改变过程中起始数值一样，那么 CAS 操作依然和 V 值没有改变的情况一样，这就是 ABA 问题。<br>具体来说，</p><ul><li><p>线程1 试图改变 value1 的值，从0改为1</p></li><li><p>线程2 抢占 value1，从0改为2，又改为0</p></li><li><p>线程1 得到 vaule，发现没有改过，又改为1</p></li></ul><p>整个过程看起来没什么不对，毕竟殊途同归，但在使用指针操作一些并发数据结构时容易出现问题。<br>为了解决这个方案，可以采用 ABA’ 策略，添加额外的标记来记录修改，AtomicStampedReference 中的 compareAndSet 方法不仅会检查当前引用是否等于预期引用，而且会检查当前标志是否等于预期标志，全部相等才以原子方式将该引用和该标志的值设置为给定的更新值。</p><p>此外，如果 CAS 一直不成功，就会长期占用 CPU 时间，因此，JUC 中有些地方 如 BlockingQueue 的 SynchronousQueue 就限制了 CAS 的次数。<br>CAS 也只能针对一个共享变量操作，有多个共享变量只能用锁，或者把多个变量搞成一个变量。</p><p>因此，在 JDK1.8 中，提供了 java.util.concurrency.atomic.LongAdder 类，根据文档，其性能高于 AtomicLong，一般情况下可直接替代 AtomicLong 使用，只是 LongAdder 没有返回值，当需要返回值的时候，还是要用 AtomicLong 。Netty 中也有封装这两个类。</p><p>那么，LongAdder 是如何获得远高于 AtomicLong 的性能的呢？</p><ol><li><p>利用 Cell 减少并发修改时的冲突<br>在 LongAdder 父类 Striped64 中有 长度为2的 n 次方的volatile Cell[] cells，每个 cell 填充了一个  @Contended 的 Long 字段来避免伪共享问题。<br>假共享( false sharing)是指一种错误的工程实践,在同一块缓存线中存放多个互相独立且被多个CPU访问的变量，当某个CPU改变了其中一个变量的值时,迫使其他CPU的本地高速缓存中对应的相同缓存线无效化。这种工程实践会显著地限制并行系统的可扩展性。</p></li><li><p>使用 ThreadLocalRandom 替代 Random</p></li><li><p>longAccumulate 使用 UNSAFE.compareAndSwapLong 完成自旋，且在初次 cas 方式失败的情况下(说明多个线程同时想更新这个值)，尝试将这个值分隔成多个 Cell，让这些竞争的线程只负责更新自己所属的 Cell从而将竞争压力分散开。</p></li></ol><h1 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h1><ol><li>在 LongAdder 出现之前， Java 性能监控框架 dropwizard/metrics 就做了类似的事情，而在 metrics 的最新版本中，其已经使用 Jdk1.8 的 LongAdder 替换掉了自己的轮子。</li></ol><p>2.并发容器框架 JCTool 中也提供了类似实现，文档描述如下。</p><blockquote><p>An auto-resizing table of longs, supporting low-contention CAS operations.Updates are done with CAS’s to no particular table element.The intent is to support highly scalable counters, r/w locks, and other structures where the updates are associative, loss-free (no-brainer), and otherwise happen at such a high volume that the cache contention for CAS’ing a single word is unacceptable.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计数可以说是计算机硬件最常见的功能，CPU 可以通过 CAS（Compare and swap）算法保证并发下数据的准确性，包括 IA32、Space 在内的 CPU 架构中采用的都是CAS指令，其语义为“&lt;strong&gt;我认为V的值应该为A，如果是，那么将V的值更新为B，
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="计数器" scheme="http://yoursite.com/tags/%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Lambda 表达式重构 OO 设计模式</title>
    <link href="http://yoursite.com/2019/06/02/2019-06-12-%E4%BD%BF%E7%94%A8%20Lambda%20%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%87%8D%E6%9E%84%20OO%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/06/02/2019-06-12-使用 Lambda 表达式重构 OO 设计模式/</id>
    <published>2019-06-02T04:33:14.000Z</published>
    <updated>2019-10-30T08:36:41.043Z</updated>
    
    <content type="html"><![CDATA[<p>新的语言特性往往借鉴了已有的设计模式，比如 Java5 中引入了 for-each 循环，由于它的稳定和简洁，已经替代了很多显式使用迭代器的情形。Java 7 中推出的菱形操作符（&lt;&gt;）让程序员在创建实例时无需显式使用泛型。<br>很多设计模式与面向对象结合起来非常臃肿，Lambda 表达式通过<strong>消除封装在类中的僵化代码</strong>为这些设计模式面临的问题提供了解决方案。</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>使用工厂模式，无需向客户暴露实例化的逻辑就能完成对象的创建。向工厂提交“订单”，工厂通过多态返回给“产品”。如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFactory</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title">createProduct</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">            <span class="keyword">switch</span>(name)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"loan"</span>: <span class="keyword">return</span> <span class="keyword">new</span> Loan();</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"stock"</span>: <span class="keyword">return</span> <span class="keyword">new</span> Stock();</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"bond"</span>: <span class="keyword">return</span> <span class="keyword">new</span> Bond();</span><br><span class="line">                <span class="keyword">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No such product "</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>我们可以像引用构造方法一样引用函数，由此，可通过 Map，将产品名映射到对应的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">private</span> Map&lt;String, Supplier&lt;Product&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        map.put(<span class="string">"loan"</span>, Loan::<span class="keyword">new</span>);</span><br><span class="line">        map.put(<span class="string">"stock"</span>, Stock::<span class="keyword">new</span>);</span><br><span class="line">        map.put(<span class="string">"bond"</span>, Bond::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>之后，利用 Map 来实例化不同的产品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title">createProductLambda</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">            Supplier&lt;Product&gt; p = map.get(name);</span><br><span class="line">            <span class="keyword">if</span>(p != <span class="keyword">null</span>) <span class="keyword">return</span> p.get();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No such product "</span> + name);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="模版方法"><a href="#模版方法" class="headerlink" title="模版方法"></a>模版方法</h1><p>当我们已有一个算法框架，但需要对其进行部分改动以使用时，可以使用模版方法。<br>举个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineBanking</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processCustomer</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        Customer c = Database.getCustomerWithId(id);</span><br><span class="line">        makeCustomerHappy(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeCustomerHappy</span><span class="params">(Customer c)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>processCustomer 搭建了在线银行算法的框架，不同的银行继承 OnlineBanking 并提供不同实现。<br>如何使用 Lambda 表达式重构呢？向 processCustomer 方法引入了第二个参数，它是一个 Consumer<Customer> 类型的参数，与前文定义的 makeCustomerHappy 的特征保持一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processCustomer</span><span class="params">(<span class="keyword">int</span> id, Consumer&lt;Customer&gt; makeCustomerHappy)</span></span>&#123;</span><br><span class="line">        Customer c = Database.getCustomerWithId(id);</span><br><span class="line">        makeCustomerHappy.accept(c);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>之后，只要向新建的 OnlineBanking 类传递 Lambda 表达式即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> OnlineBankingLambda().processCustomer(<span class="number">1337</span>, (Customer c) -&gt; System.out.println(<span class="string">"Hello!"</span>));</span><br></pre></td></tr></table></figure><h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>策略模式包含三部分：</p><ul><li><p>一个代表算法的接口</p></li><li><p>若干个算法的不同的具体实现</p></li><li><p>若干个使用策略对象的用户<br>注意到具体实现类实现了函数接口，我们可以使用 Lambda表达式来代替策略模式的第二部分，从而达到简化的目的。<br>如下所示</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Part1 函数接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ValidationStrategy</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//Part2 接口的实现</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IsAllLowerCase</span> <span class="keyword">implements</span> <span class="title">ValidationStrategy</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> s.matches(<span class="string">"[a-z]+"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IsNumeric</span> <span class="keyword">implements</span> <span class="title">ValidationStrategy</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> s.matches(<span class="string">"\\d+"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//Part3 接口的调用</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Validator</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ValidationStrategy strategy;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Validator</span><span class="params">(ValidationStrategy v)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.strategy = v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> strategy.execute(s); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line">Validator v1 = <span class="keyword">new</span> Validator(<span class="keyword">new</span> IsNumeric());</span><br><span class="line">        System.out.println(v1.validate(<span class="string">"aaaa"</span>));</span><br><span class="line">        Validator v2 = <span class="keyword">new</span> Validator(<span class="keyword">new</span> IsAllLowerCase ());</span><br><span class="line">        System.out.println(v2.validate(<span class="string">"bbbb"</span>));</span><br></pre></td></tr></table></figure><p>经过重构后，如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Part3 调用</span></span><br><span class="line">Validator v3 = <span class="keyword">new</span> Validator((String s) -&gt; s.matches(<span class="string">"\\d+"</span>));</span><br><span class="line">        System.out.println(v3.validate(<span class="string">"aaaa"</span>));</span><br><span class="line">        Validator v4 = <span class="keyword">new</span> Validator((String s) -&gt; s.matches(<span class="string">"[a-z]+"</span>));</span><br><span class="line">        System.out.println(v4.validate(<span class="string">"bbbb"</span>));</span><br></pre></td></tr></table></figure><h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><p>责任链模式是一种创建处理对象序列（比如操作序列）的通用方案。一个处理对象可能需要在完成一些工作之后，将结果传递给另一个对象，这个对象接着做一些工作，再转交给下一个处理对象，以此类推。</p><p>传统的方式需要在类中设置 successor 并手工设置，然后从第一个 Handler 开始调用，如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义代表处理对象的抽象类 ProcessingObject</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessingObject</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> ProcessingObject&lt;T&gt; successor;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(ProcessingObject&lt;T&gt; successor)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.successor = successor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">handle</span><span class="params">(T input)</span> </span>&#123;</span><br><span class="line">            T r = handleWork(input);</span><br><span class="line">            <span class="keyword">if</span> (successor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> successor.handle(r);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> T <span class="title">handleWork</span><span class="params">(T input)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//具体类1</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderTextProcessing</span></span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">ProcessingObject</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">handleWork</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"From Raoul, Mario and Alan: "</span> + text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//具体类2</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellCheckerProcessing</span></span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">ProcessingObject</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">handleWork</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> text.replaceAll(<span class="string">"labda"</span>, <span class="string">"lambda"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//手工设置并调用</span></span><br><span class="line">ProcessingObject&lt;String&gt; p1 = <span class="keyword">new</span> HeaderTextProcessing();</span><br><span class="line">        ProcessingObject&lt;String&gt; p2 = <span class="keyword">new</span> SpellCheckerProcessing();</span><br><span class="line">        p1.setSuccessor(p2);</span><br></pre></td></tr></table></figure><p>现在可以将处理对象作为函数的一个实例，如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UnaryOperator&lt;String&gt; headerProcessing =</span><br><span class="line">               (String text) -&gt; <span class="string">"From Raoul, Mario and Alan: "</span> + text;</span><br><span class="line">       UnaryOperator&lt;String&gt; spellCheckerProcessing =</span><br><span class="line">               (String text) -&gt; text.replaceAll(<span class="string">"labda"</span>, <span class="string">"lambda"</span>);</span><br><span class="line">       Function&lt;String, String&gt; pipeline = headerProcessing.andThen(spellCheckerProcessing);</span><br><span class="line">       String result2 = pipeline.apply(<span class="string">"Aren't labdas really sexy?!!"</span>);</span><br><span class="line">       System.out.println(result2);</span><br></pre></td></tr></table></figure><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>某些事件发生时（比如状态转变），如果一个对象（通常我们称之为主题）需要自动地通知其他多个对象（称为观察者），就会采用该方案。在 GUI 设计中中很常用（类似 I/O 中的事件通知，当然，也可以使用轮询也就是 <code>While(true){...}</code>来实现，这在 I/O 中对应同步阻塞），比如，按下按钮，触发某事件。在这个过程中，Subject 对应按钮，他告知观察者“我被按下啦”，然后观察者通知所有的具体观察者，让他们去处理具体的业务逻辑。<br>从而，观察者模式可以分为三部分，Subject、Observer和concreteObserver。其中，Subject的子类实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Feed</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.observers.add(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(String tweet)</span> </span>&#123;</span><br><span class="line">            observers.forEach(o -&gt; o.inform(tweet));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">Feed f = <span class="keyword">new</span> Feed();</span><br><span class="line">        f.registerObserver(<span class="keyword">new</span> NYTimes());</span><br><span class="line">        f.registerObserver(<span class="keyword">new</span> Guardian());</span><br><span class="line">        f.registerObserver(<span class="keyword">new</span> LeMonde());</span><br><span class="line">        f.notifyObservers(<span class="string">"The queen said her favourite book is Java 8 in Action!"</span>);</span><br></pre></td></tr></table></figure><p>这里我们用 foreach 和 Lambda 表达式简化了操作。实际上，我们无需显式地实例化三个观察者对象，直接传递 Lambda 表达式表示需要执行的行为即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Feed feedLambda = <span class="keyword">new</span> Feed();</span><br><span class="line"></span><br><span class="line">        feedLambda.registerObserver((String tweet) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(tweet != <span class="keyword">null</span> &amp;&amp; tweet.contains(<span class="string">"money"</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">"Breaking news in NY! "</span> + tweet); &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        feedLambda.registerObserver((String tweet) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(tweet != <span class="keyword">null</span> &amp;&amp; tweet.contains(<span class="string">"queen"</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">"Yet another news in London... "</span> + tweet); &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        feedLambda.notifyObservers(<span class="string">"Money money money, give me money!"</span>);</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从上文中我们可以看出，当要执行的动作都很简单时，我们可以通过 Lambda 表达式方便地消除僵化代码，但当逻辑很复杂时，类依然是更有用的方式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新的语言特性往往借鉴了已有的设计模式，比如 Java5 中引入了 for-each 循环，由于它的稳定和简洁，已经替代了很多显式使用迭代器的情形。Java 7 中推出的菱形操作符（&amp;lt;&amp;gt;）让程序员在创建实例时无需显式使用泛型。&lt;br&gt;很多设计模式与面向对象结合起来
      
    
    </summary>
    
    
    
      <category term="重构" scheme="http://yoursite.com/tags/%E9%87%8D%E6%9E%84/"/>
    
      <category term="Lambda" scheme="http://yoursite.com/tags/Lambda/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Reactor 模型及其在 Netty 中的应用</title>
    <link href="http://yoursite.com/2019/05/31/2019-08-01-Netty%20%E7%9A%84%20Readtor%20%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/05/31/2019-08-01-Netty 的 Readtor 模型及应用/</id>
    <published>2019-05-31T03:02:14.000Z</published>
    <updated>2019-10-30T08:33:12.069Z</updated>
    
    <content type="html"><![CDATA[<p>EventLoop 是 Netty 基于 Reactor 模型的思想进行实现，在读 EventLoop 的源码之前，有必要了解这个东西。<br>wiki: </p><blockquote><p>The reactor design pattern is an event handling pattern for handling service requests delivered concurrently to a service handler by one or more inputs. The service handler then demultiplexes the incoming requests and dispatches them synchronously to the associated request handlers.</p></blockquote><p>也不复杂，其核心思想就是<strong>将关注的 I/O 事件注册到多路复用器上，一旦有 I/O 事件触发，将事件分发到事件处理器中，执行就绪 I/O 事件对应的处理函数中。</strong>模型中有三个重要的组件：</p><ol><li><p>多路复用器：由操作系统提供接口，Linux 提供的 I/O 复用接口有select、poll、epoll 。</p></li><li><p>事件分离器：将多路复用器返回的就绪事件分发到事件处理器中。</p></li><li><p>事件处理器：处理就绪事件处理函数。</p></li></ol><h1 id="Reactor-的三种实现"><a href="#Reactor-的三种实现" class="headerlink" title="Reactor 的三种实现"></a>Reactor 的三种实现</h1><ol><li><p>单 Reactor 单线程模型</p></li><li><p>单 Reactor 多线程模型</p></li><li><p>多 Reactor 多线程模型</p></li></ol><p>下边我们来分析</p><h2 id="单-Reactor-单线程模型"><a href="#单-Reactor-单线程模型" class="headerlink" title="单 Reactor 单线程模型"></a>单 Reactor 单线程模型</h2><p><img src="/img/235321555549FA0C8EC19CC77D47169A.jpg" alt=""><br>示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 等待事件到来，分发事件处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reactor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Reactor</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      SelectionKey sk = serverSocket.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">      <span class="comment">// attach Acceptor 处理新连接</span></span><br><span class="line">      sk.attach(<span class="keyword">new</span> Acceptor());</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">​  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">              selector.select();</span><br><span class="line">              Set selected = selector.selectedKeys();</span><br><span class="line">              Iterator it = selected.iterator();</span><br><span class="line">              <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                  it.remove();</span><br><span class="line">                  <span class="comment">//分发事件处理</span></span><br><span class="line">                  dispatch((SelectionKey) (it.next()));</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">          <span class="comment">//do something</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(SelectionKey k)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 若是连接事件获取是acceptor</span></span><br><span class="line">      <span class="comment">// 若是IO读写事件获取是handler</span></span><br><span class="line">      Runnable runnable = (Runnable) (k.attachment());</span><br><span class="line">      <span class="keyword">if</span> (runnable != <span class="keyword">null</span>) &#123;</span><br><span class="line">          runnable.run();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是最基础的单 Reactor 单线程模型。</p><p>Reactor 线程，负责多路分离套接字。</p><p>有新连接到来触发 OP_ACCEPT 事件之后， 交由 Acceptor 进行处理。<br>有 IO 读写事件之后，交给 Handler 处理。<br>Acceptor 主要任务是构造 Handler 。</p><p>在获取到 Client 相关的 SocketChannel 之后，绑定到相应的 Handler 上。对应的 SocketChannel 有读写事件之后，基于 Reactor 分发，Handler 就可以处理了。</p><p>注意，所有的 IO 事件都绑定到 Selector 上，由 Reactor 统一分发。<br>该模型适用于处理器链中业务处理组件能快速完成的场景。不过，这种单线程模型不能充分利用多核资源，所以实际使用的不多。</p><h2 id="单-Reactor-多线程模型"><a href="#单-Reactor-多线程模型" class="headerlink" title="单 Reactor 多线程模型"></a>单 Reactor 多线程模型</h2><p><img src="/img/D0784A26CAE5C4015A0D51697C9753C5.jpg" alt="插图"><br>相对于第一种单线程的模式来说，在处理业务逻辑，也就是获取到 IO 的读写事件之后，交由线程池来处理，这样可以减小主 Reactor 的性能开销，从而更专注的做事件分发工作了，从而提升整个应用的吞吐。</p><p>MultiThreadHandler 示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 多线程处理读写业务逻辑</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiThreadHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> READING = <span class="number">0</span>, WRITING = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> state;</span><br><span class="line">  <span class="keyword">final</span> SocketChannel socket;</span><br><span class="line">  <span class="keyword">final</span> SelectionKey sk;</span><br><span class="line">​</span><br><span class="line">  <span class="comment">//多线程处理业务逻辑</span></span><br><span class="line">  ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MultiThreadHandler</span><span class="params">(SocketChannel socket, Selector sl)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.state = READING;</span><br><span class="line">      <span class="keyword">this</span>.socket = socket;</span><br><span class="line">      sk = socket.register(selector, SelectionKey.OP_READ);</span><br><span class="line">      sk.attach(<span class="keyword">this</span>);</span><br><span class="line">      socket.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (state == READING) &#123;</span><br><span class="line">          read();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == WRITING) &#123;</span><br><span class="line">          write();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//任务异步处理</span></span><br><span class="line">      executorService.submit(() -&gt; process());</span><br><span class="line">​</span><br><span class="line">      <span class="comment">//下一步处理写事件</span></span><br><span class="line">      sk.interestOps(SelectionKey.OP_WRITE);</span><br><span class="line">      <span class="keyword">this</span>.state = WRITING;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//任务异步处理</span></span><br><span class="line">      executorService.submit(() -&gt; process());</span><br><span class="line">​</span><br><span class="line">      <span class="comment">//下一步处理读事件</span></span><br><span class="line">      sk.interestOps(SelectionKey.OP_READ);</span><br><span class="line">      <span class="keyword">this</span>.state = READING;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * task 业务处理</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//do IO ,task,queue something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 #read() 和 #write() 方法中，提交 executorService 线程池，进行处理。</p><h2 id="多-Reactor-多线程模型"><a href="#多-Reactor-多线程模型" class="headerlink" title="多 Reactor 多线程模型"></a>多 Reactor 多线程模型</h2><p><img src="/img/8D476F61A64657CFD90DAC82C7D23D17.jpg" alt="插图"><br>第三种模型比起第二种模型，是将 Reactor 分成两部分：</p><ol><li><p>mainReactor 负责监听 ServerSocketChannel ，用来处理客户端新连接的建立，并将建立的客户端的 SocketChannel 指定注册给 subReactor 。</p></li><li><p>subReactor 维护自己的 Selector ，基于 mainReactor 建立的客户端的 SocketChannel 多路分离 IO 读写事件，读写网络数据。对于业务处理的功能，另外扔给 worker 线程池来完成。<br>MultiWorkThreadAcceptor 示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 多work 连接事件Acceptor,处理连接事件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiWorkThreadAcceptor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">​</span><br><span class="line">  <span class="comment">// cpu线程数相同多work线程</span></span><br><span class="line">  <span class="keyword">int</span> workCount = Runtime.getRuntime().availableProcessors();</span><br><span class="line">  SubReactor[] workThreadHandlers = <span class="keyword">new</span> SubReactor[workCount];</span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">int</span> nextHandler = <span class="number">0</span>;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MultiWorkThreadAcceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      nextHandler = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; workThreadHandlers.length; i++) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              workThreadHandlers[i] = <span class="keyword">new</span> SubReactor();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          SocketChannel c = serverSocket.accept();</span><br><span class="line">          <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;<span class="comment">// 注册读写</span></span><br><span class="line">              <span class="keyword">synchronized</span> (c) &#123;</span><br><span class="line">                  <span class="comment">// 顺序获取SubReactor，然后注册channel </span></span><br><span class="line">                  SubReactor work = workThreadHandlers[nextHandler];</span><br><span class="line">                  work.registerChannel(c);</span><br><span class="line">                  nextHandler++;</span><br><span class="line">                  <span class="keyword">if</span> (nextHandler &gt;= workThreadHandlers.length) &#123;</span><br><span class="line">                      nextHandler = <span class="number">0</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>SubReactor 示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 多work线程处理读写业务逻辑</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubReactor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Selector mySelector;</span><br><span class="line">​</span><br><span class="line">  <span class="comment">//多线程处理业务逻辑</span></span><br><span class="line">  <span class="keyword">int</span> workCount =Runtime.getRuntime().availableProcessors();</span><br><span class="line">  ExecutorService executorService = Executors.newFixedThreadPool(workCount);</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SubReactor</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 每个SubReactor 一个selector </span></span><br><span class="line">      <span class="keyword">this</span>.mySelector = SelectorProvider.provider().openSelector();</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 注册chanel</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> sc</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      sc.register(mySelector, SelectionKey.OP_READ | SelectionKey.OP_CONNECT);</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//每个SubReactor 自己做事件分派处理读写事件</span></span><br><span class="line">              selector.select();</span><br><span class="line">              Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">              Iterator&lt;SelectionKey&gt; iterator = keys.iterator();</span><br><span class="line">              <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                  SelectionKey key = iterator.next();</span><br><span class="line">                  iterator.remove();</span><br><span class="line">                  <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                      read();</span><br><span class="line">                  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">                      write();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">​</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">​</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//任务异步处理</span></span><br><span class="line">      executorService.submit(() -&gt; process());</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//任务异步处理</span></span><br><span class="line">      executorService.submit(() -&gt; process());</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * task 业务处理</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//do IO ,task,queue something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中，我们可以看到：</p><p>mainReactor 主要用来处理网络 IO 连接建立操作，通常，mainReactor 只需要一个，因为它一个线程就可以处理。<br>subReactor 主要和建立起来的客户端的 SocketChannel 做数据交互和事件业务处理操作。通常，subReactor 的个数和 CPU 个数相等，每个 subReactor 独占一个线程来处理。<br>此种模式中，每个模块的工作更加专一，耦合度更低，性能和稳定性也大大的提升，支持的可并发客户端数量可达到上百万级别。<br>关于此种模式的应用，目前有很多优秀的框架已经在应用，比如 Mina 和 Netty 等等。上述中去掉线程池的第三种形式的变种，也是 Netty NIO 的默认模式。</p><h1 id="Netty-中的应用"><a href="#Netty-中的应用" class="headerlink" title="Netty 中的应用"></a>Netty 中的应用</h1><h2 id="NIO-客户端"><a href="#NIO-客户端" class="headerlink" title="NIO 客户端"></a>NIO 客户端</h2><p>Netty NIO 客户端的示例代码中，和 EventLoop 相关的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 EventLoopGroup 对象</span></span><br><span class="line">EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"><span class="comment">// 创建 Bootstrap 对象</span></span><br><span class="line">Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line"><span class="comment">// 设置使用的 EventLoopGroup</span></span><br><span class="line">b.group(group);</span><br></pre></td></tr></table></figure><ul><li>对于 Netty NIO 客户端来说，仅创建一个 EventLoopGroup 。</li></ul><ul><li>一个 EventLoop 可以对应一个 Reactor 。因为 EventLoopGroup 是 EventLoop 的分组，所以对等理解，EventLoopGroup 是一种 Reactor 的分组。</li><li>一个 Bootstrap 的启动，只能发起对一个远程的地址。所以只会使用一个 NIO Selector ，也就是说仅使用一个 Reactor 。即使，我们在声明使用一个 EventLoopGroup ，该 EventLoopGroup 也只会分配一个 EventLoop 对 IO 事件进行处理。</li><li>因为 Reactor 模型主要使用服务端的开发中，如果套用在 Netty NIO 客户端中，到底使用了哪一种模式呢？</li><li>如果只有一个业务线程使用 Netty NIO 客户端，那么可以认为是【单 Reactor 单线程模型】。<ul><li>如果有多个业务线程使用 Netty NIO 客户端，那么可以认为是【单 Reactor 多线程模型】。<br>那么 Netty NIO 客户端是否能够使用【多 Reactor 多线程模型】呢？😈 创建多个 Netty NIO 客户端，连接同一个服务端。那么多个 Netty 客户端就可以认为符合多 Reactor 多线程模型了。<br>一般情况下，我们不会这么干。</li></ul></li></ul><p>当然，实际也有这样的示例。例如 Dubbo 或 Motan 这两个 RPC 框架，支持通过配置，同一个 Consumer 对同一个 Provider 实例同时建立多个客户端连接。</p><h2 id="NIO-服务端"><a href="#NIO-服务端" class="headerlink" title="NIO 服务端"></a>NIO 服务端</h2><p> Netty NIO 服务端的示例代码中，和 EventLoop 相关的代码：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 创建两个 EventLoopGroup 对象</span></span><br><span class="line">EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>); <span class="comment">// 创建 boss 线程组 用于服务端接受客户端的连接</span></span><br><span class="line">EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">// 创建 worker 线程组 用于进行 SocketChannel 的数据读写</span></span><br><span class="line"><span class="comment">// 创建 ServerBootstrap 对象</span></span><br><span class="line">ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"><span class="comment">// 设置使用的 EventLoopGroup</span></span><br><span class="line">b.group(bossGroup, workerGroup);</span><br></pre></td></tr></table></figure><br>对于 Netty NIO 服务端来说，创建两个 EventLoopGroup 。</p><ol><li>bossGroup 对应 Reactor 模式的 mainReactor ，用于服务端接受客户端的连接。比较特殊的是，传入了方法参数 nThreads = 1 ，表示只使用一个 EventLoop ，即只使用一个 Reactor 。这个也符合我们上面提到的，“通常，mainReactor 只需要一个，因为它一个线程就可以处理”。</li></ol><ol start="2"><li>workerGroup 对应 Reactor 模式的 subReactor ，用于进行 SocketChannel 的数据读写。对于 EventLoopGroup ，如果未传递方法参数 nThreads ，表示使用 CPU 个数 Reactor 。这个也符合我们上面提到的，“通常，subReactor 的个数和 CPU 个数相等，每个 subReactor 独占一个线程来处理”。</li></ol><p>因为使用两个 EventLoopGroup ，所以符合【多 Reactor 多线程模型】的多 Reactor 的要求。实际在使用时，workerGroup 在读完数据时，具体的业务逻辑处理，我们会提交到专门的业务逻辑线程池，例如在 Dubbo 或 Motan 这两个 RPC 框架中。这样一来，就完全符合【多 Reactor 多线程模型】。<br>那么可能有胖友可能和我有一样的疑问，bossGroup 如果配置多个线程，是否可以使用多个 mainReactor 呢？我们来分析一波，一个 Netty NIO 服务端同一时间，只能 bind 一个端口，那么只能使用一个 Selector 处理客户端连接事件。又因为，Selector 操作是非线程安全的，所以无法在多个 EventLoop ( 多个线程 )中，同时操作。所以这样就导致，即使 bossGroup 配置多个线程，实际能够使用的也就是一个线程。<br>那么如果一定一定一定要多个 mainReactor 呢？创建多个 Netty NIO 服务端，并绑定多个端口。</p><p>参考资料</p><ol><li><a href="https://my.oschina.net/u/1859679/blog/1844109" target="_blank" rel="noopener">NIO系列——之Reactor模型</a></li><li><a href="https://tech.youzan.com/yi-bu-wang-luo-mo-xing/" target="_blank" rel="noopener">异步网络模型</a> Ps：高端内容，推荐</li><li><a href="https://en.wikipedia.org/wiki/Reactor_pattern" target="_blank" rel="noopener">Reactor_pattern-wiki</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;EventLoop 是 Netty 基于 Reactor 模型的思想进行实现，在读 EventLoop 的源码之前，有必要了解这个东西。&lt;br&gt;wiki: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The reactor design pattern is an event
      
    
    </summary>
    
    
    
      <category term="Netty" scheme="http://yoursite.com/tags/Netty/"/>
    
      <category term="Reactor" scheme="http://yoursite.com/tags/Reactor/"/>
    
      <category term="多路复用" scheme="http://yoursite.com/tags/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java 实现最简单的RPC框架</title>
    <link href="http://yoursite.com/2019/05/29/2019-05-23-JDK%E5%AE%9E%E7%8E%B0%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84RPC%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/05/29/2019-05-23-JDK实现最简单的RPC框架/</id>
    <published>2019-05-29T04:00:00.000Z</published>
    <updated>2019-10-30T08:32:07.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>RPC(Remote Procedure Call)是一个通信协议，允许像调用本地服务一样调用远程服务。<br>根据中间件课程和我的理解，RPC主要由三到四个 Part 组成</p><ol><li>序列化</li><li>通信协议</li><li>代理</li><li>在某些介绍中，还增加了“过程（服务）定位”这一方面，也就是在确定通信方式后，IP、Port及方法名确定的具体过程。原理图如下</li></ol><p><img src="/img/15585879760934.jpg" alt="插图"><br>总的来说，就是Client找到目标（Part4）和Server在建立连接（Part2）后，前者向后者发送参数，底层传输是二进制的，因此需要序列化协议（Part1）。服务端拿到参数后需要反序列化后找到对应方法进行调用（代理过程）（Part3），得到结果后返回给服务器。</p><p>RPC协议有很多，如CORBA，Thrift、Java RMI、Hessian甚至REST API。我就用CORBA 写过一个分布式文件下载系统（课程小项目，写起来很Dirty，我选择它的进化版本 Thrift，哈哈）</p><h1 id="为何要-RPC-？"><a href="#为何要-RPC-？" class="headerlink" title="为何要 RPC ？"></a>为何要 RPC ？</h1><p>但是在上中间件课程的时候我就在想：RPC出现的意义是什么？只要有网络进行类似 C/S 的问题/结果传输就好了呀！<br>最终通过询问老师和思考，得出问题答案：</p><ol><li>简化通信流程</li><li>远程调用时，要能够像本地调用一样方便，让调用者感知不到远程调用的逻辑<br>举个例子，如果直接按照 C/S 模式，需要冗长的编解码协议报文，而且这个过程对于用户不是透明的，需要你自己去做好报文。但通过 RPC，你可以方便简单地调用远程方法，在分布式应用中，因为需要横向扩展，这点就更为重要。</li></ol><p>纠结RPC的组成部分并无意义，因为无论是C/S模式还是RPC，其核心：信息传输，具体工作：编解码和报文交互并没有任何区别。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>所以，下文我将按照之前我的理解写一个最简单的RPC框架。其序列化采用Java自带的序列化方法，通信协议采用基于 TCP 的 Socket 通信，而代理则采用 Java 自带的 JDK 动态代理。</p><p>不同于 Dubbo、ICE 等工业级的RPC框架，我的简单的 RPC 框架分为三部分，</p><ol><li>服务提供者，运行在服务器端，提供服务接口定义与服务实现类。</li><li>服务中心，运行在服务器端，负责将本地服务发布成远程服务，管理远程服务，提供给服务消费者使用。</li><li>服务消费者，运行在客户端，通过远程代理对象调用远程服务。</li></ol><p>定义一个简单的服务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHi</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现这个服务接口，也即服务提供者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hi, "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务中心（服务注册耦合到这里实现）实现TCP监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket();</span><br><span class="line">        server.bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line">        System.out.println(<span class="string">"start server"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 1.监听客户端的TCP连接，接到TCP连接后将其封装成task，由线程池执行</span></span><br><span class="line">                executor.execute(<span class="keyword">new</span> ServiceTask(server.accept()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            server.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>服务中心反射调用服务实现者获取结果，然后序列化返回给客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 2.将客户端发送的码流反序列化成对象，反射调用服务实现者，获取执行结果</span></span><br><span class="line">                input = <span class="keyword">new</span> ObjectInputStream(clent.getInputStream());</span><br><span class="line">                String serviceName = input.readUTF();</span><br><span class="line">                String methodName = input.readUTF();</span><br><span class="line">                Class&lt;?&gt;[] parameterTypes = (Class&lt;?&gt;[]) input.readObject();</span><br><span class="line">                Object[] arguments = (Object[]) input.readObject();</span><br><span class="line">                Class serviceClass = serviceRegistry.get(serviceName);</span><br><span class="line">                <span class="keyword">if</span> (serviceClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(serviceName + <span class="string">" not found"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Method method = serviceClass.getMethod(methodName, parameterTypes);</span><br><span class="line">                Object result = method.invoke(serviceClass.newInstance(), arguments);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 3.将执行结果反序列化，通过socket发送给客户端</span></span><br><span class="line">                output = <span class="keyword">new</span> ObjectOutputStream(clent.getOutputStream());</span><br><span class="line">                output.writeObject(result);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>客户端通过JDK动态代理调用远程方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getRemoteProxyObj</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; serviceInterface, <span class="keyword">final</span> InetSocketAddress addr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.将本地的接口调用转换成JDK的动态代理，在动态代理中实现接口的远程调用</span></span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(serviceInterface.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[]&#123;serviceInterface&#125;,</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">                        ObjectOutputStream output = <span class="keyword">null</span>;</span><br><span class="line">                        ObjectInputStream input = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 2.创建Socket客户端，根据指定地址连接远程服务提供者</span></span><br><span class="line">                            socket = <span class="keyword">new</span> Socket();</span><br><span class="line">                            socket.connect(addr);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 3.将远程服务调用所需的接口类、方法名、参数列表等编码后发送给服务提供者</span></span><br><span class="line">                            output = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">                            output.writeUTF(serviceInterface.getName());</span><br><span class="line">                            output.writeUTF(method.getName());</span><br><span class="line">                            output.writeObject(method.getParameterTypes());</span><br><span class="line">                            output.writeObject(args);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 4.同步阻塞等待服务器返回应答，获取应答后返回</span></span><br><span class="line">                            input = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">                            <span class="keyword">return</span> input.readObject();</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                socket.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (output != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                output.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (input != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                input.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><p>测试类，写好远程调用的信息后通过 Socket 发送给服务端，然后同步阻塞等待服务器 Response</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.创建Socket客户端，根据指定地址连接远程服务提供者</span></span><br><span class="line">                           socket = <span class="keyword">new</span> Socket();</span><br><span class="line">                           socket.connect(addr);</span><br><span class="line"></span><br><span class="line">                           <span class="comment">// 3.将远程服务调用所需的接口类、方法名、参数列表等编码后发送给服务提供者</span></span><br><span class="line">                           output = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">                           output.writeUTF(serviceInterface.getName());</span><br><span class="line">                           output.writeUTF(method.getName());</span><br><span class="line">                           output.writeObject(method.getParameterTypes());</span><br><span class="line">                           output.writeObject(args);</span><br><span class="line"></span><br><span class="line">                           <span class="comment">// 4.同步阻塞等待服务器返回应答，获取应答后返回</span></span><br><span class="line">                           input = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">                           <span class="keyword">return</span> input.readObject();</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Ubique0305/RPC/tree/master/Easy" target="_blank" rel="noopener">完整代码参考Github</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://www.cs.rutgers.edu/~pxk/417/notes/03-rpc.html" target="_blank" rel="noopener">Remote Procedure Calls By Paul Krzyzanowski<br>October 2 2017</a></li><li><a href="https://cloud.tencent.com/developer/article/1057784" target="_blank" rel="noopener">进阶实现（加了 netty 做通信和 spring 做依赖管理）</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;RPC(Remote Procedure Call)是一个通信协议，允许像调用本地服务一样调用远程服务。&lt;br&gt;根据中间件课程和我的理解，R
      
    
    </summary>
    
    
    
      <category term="实践" scheme="http://yoursite.com/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="RPC" scheme="http://yoursite.com/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>代码整洁之道-实践</title>
    <link href="http://yoursite.com/2019/05/18/2019-05-26-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93-%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2019/05/18/2019-05-26-代码整洁之道-实践/</id>
    <published>2019-05-18T04:00:00.000Z</published>
    <updated>2019-10-29T23:42:50.275Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/code-clean-practice.jpg" alt="插图"></p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p> 通过阅读一个 Args 程序，了解整洁代码应该是什么样的（极好的可读性），然后通过与重构之前的肮脏代码对比，了解要改进的地方。最后通过作者的先复杂化导致出现代码变脏，随后建立规程优化代码的历程，了解代码整洁的最佳实践。</p><h1 id="系统使用样例"><a href="#系统使用样例" class="headerlink" title="系统使用样例"></a>系统使用样例</h1><p> 帮助你理解 Args 程序的功能：通过 Args()构造参数创建实体，解析之后可以使用Get* 用参数名称获取参数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Args arg = <span class="keyword">new</span> Args(<span class="string">"l,p#,d*"</span>, args);</span><br><span class="line">        <span class="keyword">boolean</span> logging = arg.getBoolean(<span class="string">'l'</span>);</span><br><span class="line">        <span class="keyword">int</span> port = arg.getInt(<span class="string">'p'</span>);</span><br><span class="line">        String directory = arg.getString(<span class="string">'d'</span>);</span><br><span class="line">        executeApplication(logging, port, directory);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ArgsException e) &#123;</span><br><span class="line">        System.out.printf(<span class="string">"Argument error: %s\n"</span>, e.errorMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Clean-Code"><a href="#Clean-Code" class="headerlink" title="Clean Code"></a>Clean Code</h1><p>上边是一个命令行参数解析程序，我们用这个例子来演示逐步改进，它非常易于使用，只用简单地用输入参数和格式化字符串构造Args类，再向Args对象查询参数值即可。下边是其最终实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.objectmentor.utilities.args.ArgsException.ErrorCode.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Args</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Character, ArgumentMarshaler&gt; marshalers;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Character&gt; argsFound;</span><br><span class="line">    <span class="keyword">private</span> ListIterator&lt;String&gt; currentArgument;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Args</span><span class="params">(String schema, String[] args)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        marshalers = <span class="keyword">new</span> HashMap&lt;Character, ArgumentMarshaler&gt;();</span><br><span class="line">        argsFound = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line"></span><br><span class="line">        parseSchema(schema);</span><br><span class="line">        parseArgumentStrings(Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseSchema</span><span class="params">(String schema)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String element : schema.split(<span class="string">","</span>))</span><br><span class="line">            <span class="keyword">if</span> (element.length() &gt; <span class="number">0</span>)</span><br><span class="line">                parseSchemaElement(element.trim());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseSchemaElement</span><span class="params">(String element)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> elementId = element.charAt(<span class="number">0</span>);</span><br><span class="line">        String elementTail = element.substring(<span class="number">1</span>);</span><br><span class="line">        validateSchemaElementId(elementId);</span><br><span class="line">        <span class="keyword">if</span> (elementTail.length() == <span class="number">0</span>)</span><br><span class="line">            marshalers.put(elementId, <span class="keyword">new</span> BooleanArgumentMarshaler());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (elementTail.equals(<span class="string">"*"</span>))</span><br><span class="line">            marshalers.put(elementId, <span class="keyword">new</span> StringArgumentMarshaler());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (elementTail.equals(<span class="string">"#"</span>))</span><br><span class="line">            marshalers.put(elementId, <span class="keyword">new</span> IntegerArgumentMarshaler());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (elementTail.equals(<span class="string">"##"</span>))</span><br><span class="line">            marshalers.put(elementId, <span class="keyword">new</span> DoubleArgumentMarshaler());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (elementTail.equals(<span class="string">"[*]"</span>))</span><br><span class="line">            marshalers.put(elementId, <span class="keyword">new</span> StringArrayArgumentMarshaler());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgsException(INVALID_ARGUMENT_FORMAT, elementId, elementTail);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateSchemaElementId</span><span class="params">(<span class="keyword">char</span> elementId)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Character.isLetter(elementId))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgsException(INVALID_ARGUMENT_NAME, elementId, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseArgumentStrings</span><span class="params">(List&lt;String&gt; argsList)</span> <span class="keyword">throws</span> ArgsException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (currentArgument = argsList.listIterator(); currentArgument.hasNext();)</span><br><span class="line">        &#123;</span><br><span class="line">            String argString = currentArgument.next();</span><br><span class="line">            <span class="keyword">if</span> (argString.startsWith(<span class="string">"-"</span>)) &#123;</span><br><span class="line">                parseArgumentCharacters(argString.substring(<span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                currentArgument.previous();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseArgumentCharacters</span><span class="params">(String argChars)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argChars.length(); i++)</span><br><span class="line">            parseArgumentCharacter(argChars.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseArgumentCharacter</span><span class="params">(<span class="keyword">char</span> argChar)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        ArgumentMarshaler m = marshalers.get(argChar);</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgsException(UNEXPECTED_ARGUMENT, argChar, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            argsFound.add(argChar);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                m.set(currentArgument);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ArgsException e) &#123;</span><br><span class="line">                e.setErrorArgumentId(argChar);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">has</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> argsFound.contains(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextArgument</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentArgument.nextIndex();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BooleanArgumentMarshaler.getValue(marshalers.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringArgumentMarshaler.getValue(marshalers.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IntegerArgumentMarshaler.getValue(marshalers.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DoubleArgumentMarshaler.getValue(marshalers.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getStringArray(<span class="keyword">char</span> arg) &#123;</span><br><span class="line">        <span class="keyword">return</span> StringArrayArgumentMarshaler.getValue(marshalers.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArgumentMarshaler-接口"><a href="#ArgumentMarshaler-接口" class="headerlink" title="ArgumentMarshaler 接口"></a>ArgumentMarshaler 接口</h2><p>很明显 ArgumentMarshaler 接口在 Map 中充当 Value，他的接口实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArgumentMarshaler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(Iterator&lt;String&gt; currentArgument)</span> <span class="keyword">throws</span> ArgsException</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//BooleanArgumentMarshaler.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BooleanArgumentMarshaler</span> <span class="keyword">implements</span> <span class="title">ArgumentMarshaler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> booleanValue = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(Iterator&lt;String&gt; currentArgument)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        booleanValue = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getValue</span><span class="params">(ArgumentMarshaler am)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (am != <span class="keyword">null</span> &amp;&amp; am <span class="keyword">instanceof</span> BooleanArgumentMarshaler)</span><br><span class="line">            <span class="keyword">return</span> ((BooleanArgumentMarshaler) am).booleanValue;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//StringArgumentMarshaler.java</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.objectmentor.utilities.args.ArgsException.ErrorCode.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringArgumentMarshaler</span> <span class="keyword">implements</span> <span class="title">ArgumentMarshaler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String stringValue = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(Iterator&lt;String&gt; currentArgument)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stringValue = currentArgument.next();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgsException(MISSING_STRING);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(ArgumentMarshaler am)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (am != <span class="keyword">null</span> &amp;&amp; am <span class="keyword">instanceof</span> StringArgumentMarshaler)</span><br><span class="line">            <span class="keyword">return</span> ((StringArgumentMarshaler) am).stringValue;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArgsException"><a href="#ArgsException" class="headerlink" title="ArgsException"></a>ArgsException</h2><p>除此之外，还有ArgsException的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.objectmentor.utilities.args.ArgsException.ErrorCode.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> errorArgumentId = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">private</span> String errorParameter = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> ErrorCode errorCode = OK;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArgsException</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArgsException</span><span class="params">(String message)</span> </span>&#123;<span class="keyword">super</span>(message);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArgsException</span><span class="params">(ErrorCode errorCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArgsException</span><span class="params">(ErrorCode errorCode, String errorParameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">        <span class="keyword">this</span>.errorParameter = errorParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArgsException</span><span class="params">(ErrorCode errorCode,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">char</span> errorArgumentId, String errorParameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">        <span class="keyword">this</span>.errorParameter = errorParameter;</span><br><span class="line">        <span class="keyword">this</span>.errorArgumentId = errorArgumentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getErrorArgumentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorArgumentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorArgumentId</span><span class="params">(<span class="keyword">char</span> errorArgumentId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorArgumentId = errorArgumentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorParameter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorParameter</span><span class="params">(String errorParameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorParameter = errorParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorCode <span class="title">getErrorCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorCode</span><span class="params">(ErrorCode errorCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">errorMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (errorCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> OK:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"TILT: Should not get here."</span>;</span><br><span class="line">            <span class="keyword">case</span> UNEXPECTED_ARGUMENT:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Argument -%c unexpected."</span>, errorArgumentId);</span><br><span class="line">            <span class="keyword">case</span> MISSING_STRING:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Could not find string parameter for -%c."</span>,</span><br><span class="line">                                errorArgumentId);</span><br><span class="line">            <span class="keyword">case</span> INVALID_INTEGER:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Argument -%c expects an integer but was '%s'."</span>,</span><br><span class="line">                                errorArgumentId, errorParameter);</span><br><span class="line">            <span class="keyword">case</span> MISSING_INTEGER:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Could not find integer parameter for -%c."</span>,</span><br><span class="line">                                errorArgumentId);</span><br><span class="line">            <span class="keyword">case</span> INVALID_DOUBLE:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Argument -%c expects a double but was '%s'."</span>,</span><br><span class="line">                                errorArgumentId, errorParameter);</span><br><span class="line">            <span class="keyword">case</span> MISSING_DOUBLE:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Could not find double parameter for -%c."</span>,</span><br><span class="line">                                errorArgumentId);</span><br><span class="line">            <span class="keyword">case</span> INVALID_ARGUMENT_NAME:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"'%c' is not a valid argument name."</span>,</span><br><span class="line">                                errorArgumentId);</span><br><span class="line">            <span class="keyword">case</span> INVALID_ARGUMENT_FORMAT:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"'%s' is not a valid argument format."</span>,</span><br><span class="line">                                errorParameter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> ErrorCode &#123;</span><br><span class="line">        OK, INVALID_ARGUMENT_FORMAT, UNEXPECTED_ARGUMENT, INVALID_ARGUMENT_NAME,</span><br><span class="line">        MISSING_STRING,</span><br><span class="line">        MISSING_INTEGER, INVALID_INTEGER,</span><br><span class="line">        MISSING_DOUBLE, INVALID_DOUBLE&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="脏代码"><a href="#脏代码" class="headerlink" title="脏代码"></a>脏代码</h1><p>可以看出，代码足够整洁————你可以从第一行看到最后一行，在没有注释的情况下基本理解其含义。但在一开始，代码很肮脏，如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Args</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String schema;</span><br><span class="line">    <span class="keyword">private</span> String[] args;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Character&gt; unexpectedArguments = <span class="keyword">new</span> TreeSet&lt;Character&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Character, Boolean&gt; booleanArgs =</span><br><span class="line">    <span class="keyword">new</span> HashMap&lt;Character, Boolean&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Character, String&gt; stringArgs = <span class="keyword">new</span> HashMap&lt;Character, String&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Character, Integer&gt; intArgs = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Character&gt; argsFound = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentArgument;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> errorArgumentId = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">private</span> String errorParameter = <span class="string">"TILT"</span>;</span><br><span class="line">    <span class="keyword">private</span> ErrorCode errorCode = ErrorCode.OK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> ErrorCode &#123;</span><br><span class="line">        OK, MISSING_STRING, MISSING_INTEGER, INVALID_INTEGER, UNEXPECTED_ARGUMENT&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Args</span><span class="params">(String schema, String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.schema = schema;</span><br><span class="line">        <span class="keyword">this</span>.args = args;</span><br><span class="line">        valid = parse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">parse</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (schema.length() == <span class="number">0</span> &amp;&amp; args.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        parseSchema();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            parseArguments();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArgsException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> valid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">parseSchema</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String element : schema.split(<span class="string">","</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String trimmedElement = element.trim();</span><br><span class="line">                parseSchemaElement(trimmedElement);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseSchemaElement</span><span class="params">(String element)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> elementId = element.charAt(<span class="number">0</span>);</span><br><span class="line">        String elementTail = element.substring(<span class="number">1</span>);</span><br><span class="line">        validateSchemaElementId(elementId);</span><br><span class="line">        <span class="keyword">if</span> (isBooleanSchemaElement(elementTail))</span><br><span class="line">            parseBooleanSchemaElement(elementId);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isStringSchemaElement(elementTail))</span><br><span class="line">            parseStringSchemaElement(elementId);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isIntegerSchemaElement(elementTail)) &#123;</span><br><span class="line">            parseIntegerSchemaElement(elementId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParseException(</span><br><span class="line">                    String.format(<span class="string">"Argument: %c has invalid format: %s."</span>,</span><br><span class="line">                    elementId, elementTail), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateSchemaElementId</span><span class="params">(<span class="keyword">char</span> elementId)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Character.isLetter(elementId)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParseException(</span><br><span class="line">                    <span class="string">"Bad character:"</span> + elementId + <span class="string">"in Args format: "</span> + schema, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseBooleanSchemaElement</span><span class="params">(<span class="keyword">char</span> elementId)</span> </span>&#123;</span><br><span class="line">        booleanArgs.put(elementId, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseIntegerSchemaElement</span><span class="params">(<span class="keyword">char</span> elementId)</span> </span>&#123;</span><br><span class="line">        intArgs.put(elementId, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseStringSchemaElement</span><span class="params">(<span class="keyword">char</span> elementId)</span> </span>&#123;</span><br><span class="line">        stringArgs.put(elementId, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isStringSchemaElement</span><span class="params">(String elementTail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elementTail.equals(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBooleanSchemaElement</span><span class="params">(String elementTail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elementTail.length() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isIntegerSchemaElement</span><span class="params">(String elementTail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elementTail.equals(<span class="string">"#"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">parseArguments</span><span class="params">()</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (currentArgument = <span class="number">0</span>; currentArgument &lt; args.length; currentArgument++)</span><br><span class="line">        &#123;</span><br><span class="line">            String arg = args[currentArgument];</span><br><span class="line">            parseArgument(arg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseArgument</span><span class="params">(String arg)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg.startsWith(<span class="string">"-"</span>))</span><br><span class="line">            parseElements(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseElements</span><span class="params">(String arg)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arg.length(); i++)</span><br><span class="line">            parseElement(arg.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseElement</span><span class="params">(<span class="keyword">char</span> argChar)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (setArgument(argChar))</span><br><span class="line">            argsFound.add(argChar);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            unexpectedArguments.add(argChar);</span><br><span class="line">        errorCode = ErrorCode.UNEXPECTED_ARGUMENT;</span><br><span class="line">        valid = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">setArgument</span><span class="params">(<span class="keyword">char</span> argChar)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isBooleanArg(argChar))</span><br><span class="line">            setBooleanArg(argChar, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isStringArg(argChar))</span><br><span class="line">            setStringArg(argChar);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isIntArg(argChar))</span><br><span class="line">            setIntArg(argChar);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isIntArg</span><span class="params">(<span class="keyword">char</span> argChar)</span> </span>&#123;<span class="keyword">return</span> intArgs.containsKey(argChar);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setIntArg</span><span class="params">(<span class="keyword">char</span> argChar)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        currentArgument++;</span><br><span class="line">        String parameter = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            parameter = args[currentArgument];</span><br><span class="line">            intArgs.put(argChar, <span class="keyword">new</span> Integer(parameter));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            valid = <span class="keyword">false</span>;</span><br><span class="line">            errorArgumentId = argChar;</span><br><span class="line">            errorCode = ErrorCode.MISSING_INTEGER;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgsException();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            valid = <span class="keyword">false</span>;</span><br><span class="line">            errorArgumentId = argChar;</span><br><span class="line">            errorParameter = parameter;</span><br><span class="line">            errorCode = ErrorCode.INVALID_INTEGER;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgsException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setStringArg</span><span class="params">(<span class="keyword">char</span> argChar)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        currentArgument++;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stringArgs.put(argChar, args[currentArgument]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            valid = <span class="keyword">false</span>;</span><br><span class="line">            errorArgumentId = argChar;</span><br><span class="line">            errorCode = ErrorCode.MISSING_STRING;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgsException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isStringArg</span><span class="params">(<span class="keyword">char</span> argChar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringArgs.containsKey(argChar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setBooleanArg</span><span class="params">(<span class="keyword">char</span> argChar, <span class="keyword">boolean</span> value)</span> </span>&#123;</span><br><span class="line">        booleanArgs.put(argChar, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBooleanArg</span><span class="params">(<span class="keyword">char</span> argChar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booleanArgs.containsKey(argChar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cardinality</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> argsFound.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">usage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (schema.length() &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"-["</span> + schema + <span class="string">"]"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">errorMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (errorCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> OK:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"TILT: Should not get here."</span>);</span><br><span class="line">            <span class="keyword">case</span> UNEXPECTED_ARGUMENT:</span><br><span class="line">                <span class="keyword">return</span> unexpectedArgumentMessage();</span><br><span class="line">            <span class="keyword">case</span> MISSING_STRING:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Could not find string parameter for -%c."</span>,</span><br><span class="line">                                errorArgumentId);</span><br><span class="line">            <span class="keyword">case</span> INVALID_INTEGER:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Argument -%c expects an integer but was '%s'."</span>,</span><br><span class="line">                                errorArgumentId, errorParameter);</span><br><span class="line">            <span class="keyword">case</span> MISSING_INTEGER:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Could not find integer parameter for -%c."</span>,</span><br><span class="line">                                errorArgumentId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">unexpectedArgumentMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuffer message = <span class="keyword">new</span> StringBuffer(<span class="string">"Argument(s) -"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : unexpectedArguments) &#123;</span><br><span class="line">            message.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        message.append(<span class="string">" unexpected."</span>);</span><br><span class="line">        <span class="keyword">return</span> message.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">falseIfNull</span><span class="params">(Boolean b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b != <span class="keyword">null</span> &amp;&amp; b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">zeroIfNull</span><span class="params">(Integer i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i == <span class="keyword">null</span> ? <span class="number">0</span> : i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">blankIfNull</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s == <span class="keyword">null</span> ? <span class="string">""</span> : s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blankIfNull(stringArgs.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> zeroIfNull(intArgs.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> falseIfNull(booleanArgs.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">has</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> argsFound.contains(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> valid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 显然，这段代码需要打磨————TILT之类名称奇怪的字符串、HashSet 和 TreeSets，还有奇怪的 try-catch-finally 块。产生这些东西的原因是作者在一开始的只支持 Boolean 类型的代码上强行添加了 String 和 Integer 类。</p><h1 id="如何破坏"><a href="#如何破坏" class="headerlink" title="如何破坏"></a>如何破坏</h1><p> 通过对比作者的意图、初始目标和最后一段代码，也就是烂的实现，我们可以发现，毁坏程序最好的方法就是<strong>以改动之名大动其结构，有些程序甚至永远不能从这种所谓“改 进”中恢复过来。</strong></p><h1 id="如何改进"><a href="#如何改进" class="headerlink" title="如何改进"></a>如何改进</h1><p> 作者改进烂代码的方法是 TDD，这样来保证系统始终能够运行，不会作出破坏系统的修改，每次修改都保证系统像之前一样工作。</p><p> 具体来说，<strong>用JUnit管理单元测试、用 Fitnesse 完成验收测试</strong>，以 wiki 形式写程。从而，随时能够运行这些测试就说名系统以我们期望的方式工作。</p><p> 个人在改进、重构代码时，也可以采用类似的方法。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>《代码整洁之道》 作者：[美] Robert C·Martin 译者: 韩磊 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/code-clean-practice.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt; 通过阅读一个 Args 
      
    
    </summary>
    
    
    
      <category term="Summary" scheme="http://yoursite.com/tags/Summary/"/>
    
      <category term="Clean Code" scheme="http://yoursite.com/tags/Clean-Code/"/>
    
      <category term="实践" scheme="http://yoursite.com/tags/%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>Netty 的内存泄漏检测</title>
    <link href="http://yoursite.com/2019/05/18/2019-07-22-Netty%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%A3%80%E6%B5%8B/"/>
    <id>http://yoursite.com/2019/05/18/2019-07-22-Netty的内存泄漏检测/</id>
    <published>2019-05-18T04:00:00.000Z</published>
    <updated>2019-10-30T03:02:46.404Z</updated>
    
    <content type="html"><![CDATA[<p>自从 Netty 4 开始，对象的生命周期由它们的引用计数( reference counts )管理，而不是由垃圾收集器( garbage collector )管理了，ByteBuf 也不例外，作为对 Java 原生 NIO ByteBuffer 的优秀封装和IO中使用最频繁的数据结构，是最值得注意的。</p><h1 id="ReferenceCounted"><a href="#ReferenceCounted" class="headerlink" title="ReferenceCounted"></a>ReferenceCounted</h1><p>在 Netty 中，通过 io.netty.util.ReferenceCounted 接口，定义了引用计数相关的一系列操作。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReferenceCounted</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得引用计数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Returns the reference count of this object.  If &#123;<span class="doctag">@code</span> 0&#125;, it means this object has been deallocated.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">refCnt</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加引用计数 1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Increases the reference count by &#123;<span class="doctag">@code</span> 1&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ReferenceCounted <span class="title">retain</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加引用计数 n</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Increases the reference count by the specified &#123;<span class="doctag">@code</span> increment&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ReferenceCounted <span class="title">retain</span><span class="params">(<span class="keyword">int</span> increment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等价于调用 `#touch(null)` 方法，即 hint 方法参数传递为 null 。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Records the current access location of this object for debugging purposes.</span></span><br><span class="line"><span class="comment">     * If this object is determined to be leaked, the information recorded by this operation will be provided to you</span></span><br><span class="line"><span class="comment">     * via &#123;<span class="doctag">@link</span> ResourceLeakDetector&#125;.  This method is a shortcut to &#123;<span class="doctag">@link</span> #touch(Object) touch(null)&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ReferenceCounted <span class="title">touch</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出于调试目的,用一个额外的任意的(arbitrary)信息记录这个对象的当前访问地址. 如果这个对象被检测到泄露了, 这个操作记录的信息将通过ResourceLeakDetector 提供.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Records the current access location of this object with an additional arbitrary information for debugging</span></span><br><span class="line"><span class="comment">     * purposes.  If this object is determined to be leaked, the information recorded by this operation will be</span></span><br><span class="line"><span class="comment">     * provided to you via &#123;<span class="doctag">@link</span> ResourceLeakDetector&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ReferenceCounted <span class="title">touch</span><span class="params">(Object hint)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减少引用计数 1 。</span></span><br><span class="line"><span class="comment">     * 当引用计数为 0 时，释放</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Decreases the reference count by &#123;<span class="doctag">@code</span> 1&#125; and deallocates this object if the reference count reaches at</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> 0&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if and only if the reference count became &#123;<span class="doctag">@code</span> 0&#125; and this object has been deallocated</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">release</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减少引用计数 n 。</span></span><br><span class="line"><span class="comment">     *  当引用计数为 0 时，释放</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Decreases the reference count by the specified &#123;<span class="doctag">@code</span> decrement&#125; and deallocates this object if the reference</span></span><br><span class="line"><span class="comment">     * count reaches at &#123;<span class="doctag">@code</span> 0&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if and only if the reference count became &#123;<span class="doctag">@code</span> 0&#125; and this object has been deallocated</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> decrement)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>refCnt()</code>、<code>retain(...)</code>、<code>release(...)</code> 三种方法比较好理解，对引用指数的获取与增减。<br><code>touch(...)</code> 方法主动记录一个 hint 给 ResourceLeakDetector ，方便我们在发现内存泄露有更多的信息进行排查。</p><p><code>ReferenceCounted</code> 的直接子类 / 子接口有两个 ：</p><ul><li><code>io.netty.buffer.ByteBuf</code> 。所以，所有 ByteBuf 实现类，都支持引用计数的操作。</li><li><code>io.netty.util.AbstractReferenceCounted</code> ，ReferenceCounted 的抽象实现类。它的子类实现类，主要是除了 ByteBuf 之外，需要引用计数的操作的类。例如：AbstractHttpData、DefaultFileRegion 等等。</li></ul><h1 id="ByteBuf"><a href="#ByteBuf" class="headerlink" title="ByteBuf"></a>ByteBuf</h1><p>ByteBuf 虽然继承了 ReferenceCounted 接口，但是并未实现相应的方法。而是实现了如下接口</p><ul><li><p><code>AbstractReferenceCountedByteBuf</code> ，实现引用计数的获取与增减的操作。</p></li><li><p><code>WrappedByteBuf</code> ，实现对 ByteBuf 的装饰器实现类。</p></li><li><p><code>WrappedCompositeByteBuf</code> ，实现对 CompositeByteBuf 的装饰器实现类。</p></li><li><p><code>SimpleLeakAwareByteBuf</code>、<code>SimpleLeakAwareCompositeByteBuf</code> ，实现了 SIMPLE 级别的内存泄露检测。</p></li><li><p><code>AdvancedLeakAwareByteBuf</code>、<code>AdvancedLeakAwareCompositeByteBuf</code> ，实现了 ADVANCED 和 PARANOID 级别的内存泄露检测。</p></li><li><p><code>UnreleasableByteBuf</code> ，用于阻止他人对装饰的 ByteBuf 的销毁，避免被错误销毁掉。</p></li></ul><h2 id="创建-LeakAware-ByteBuf-对象"><a href="#创建-LeakAware-ByteBuf-对象" class="headerlink" title="创建 LeakAware ByteBuf 对象"></a>创建 LeakAware ByteBuf 对象</h2><p>ByteBufAllocator 可用于创建 ByteBuf 对象。创建的过程中，它会调用 <code>toLeakAwareBuffer(...)</code> 方法，将 ByteBuf 装饰成 LeakAware ( 可检测内存泄露 )的 ByteBuf 对象，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractByteBufAllocator.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> ByteBuf <span class="title">toLeakAwareBuffer</span><span class="params">(ByteBuf buf)</span> </span>&#123;</span><br><span class="line">    ResourceLeakTracker&lt;ByteBuf&gt; leak;</span><br><span class="line">    <span class="keyword">switch</span> (ResourceLeakDetector.getLevel()) &#123;</span><br><span class="line">        <span class="keyword">case</span> SIMPLE:</span><br><span class="line">            leak = AbstractByteBuf.leakDetector.track(buf);</span><br><span class="line">            <span class="keyword">if</span> (leak != <span class="keyword">null</span>) &#123;</span><br><span class="line">                buf = <span class="keyword">new</span> SimpleLeakAwareByteBuf(buf, leak);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ADVANCED:</span><br><span class="line">        <span class="keyword">case</span> PARANOID:</span><br><span class="line">            leak = AbstractByteBuf.leakDetector.track(buf);</span><br><span class="line">            <span class="keyword">if</span> (leak != <span class="keyword">null</span>) &#123;</span><br><span class="line">                buf = <span class="keyword">new</span> AdvancedLeakAwareByteBuf(buf, leak);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> CompositeByteBuf <span class="title">toLeakAwareBuffer</span><span class="params">(CompositeByteBuf buf)</span> </span>&#123;</span><br><span class="line">    ResourceLeakTracker&lt;ByteBuf&gt; leak;</span><br><span class="line">    <span class="keyword">switch</span> (ResourceLeakDetector.getLevel()) &#123;</span><br><span class="line">        <span class="keyword">case</span> SIMPLE:</span><br><span class="line">            leak = AbstractByteBuf.leakDetector.track(buf);</span><br><span class="line">            <span class="keyword">if</span> (leak != <span class="keyword">null</span>) &#123;</span><br><span class="line">                buf = <span class="keyword">new</span> SimpleLeakAwareCompositeByteBuf(buf, leak);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ADVANCED:</span><br><span class="line">        <span class="keyword">case</span> PARANOID:</span><br><span class="line">            leak = AbstractByteBuf.leakDetector.track(buf);</span><br><span class="line">            <span class="keyword">if</span> (leak != <span class="keyword">null</span>) &#123;</span><br><span class="line">                buf = <span class="keyword">new</span> AdvancedLeakAwareCompositeByteBuf(buf, leak);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>有两个 <code>toLeakAwareBuffer(...)</code> 方法，分别对应带 “Composite” 的 组合 ByteBuf 类，和不带 Composite 普通 ByteBuf 类。因为这个不同，所以前者创建的是 <code>SimpleLeakAwareCompositeByteBuf</code> / <code>AdvancedLeakAwareCompositeByteBuf</code> 对象，后者创建的是 <code>SimpleLeakAwareByteBuf</code> / <code>AdvancedLeakAwareByteBuf</code> 对象。</li><li>当然，从总的逻辑来看，是一致的：<ul><li>SIMPLE 级别，创建 SimpleLeakAwareByteBuf 或 SimpleLeakAwareCompositeByteBuf 对象。</li><li>ADVANCED 和 PARANOID 级别，创建 AdvancedLeakAwareByteBuf 或者 AdvancedLeakAwareCompositeByteBuf 对象。</li></ul></li><li>是否需要创建 LeakAware ByteBuf 对象，有一个前提，调用 <code>ResourceLeakDetector.track(ByteBuf)</code> 方法，返回了 ResourceLeakTracker 对象。<ul><li>虽然说， ADVANCED 和 PARANOID 级别，都使用了 AdvancedLeakAwareByteBuf 或 <code>AdvancedLeakAwareCompositeByteBuf</code> 对象，但是它们的差异是：<ul><li>PARANOID 级别，一定返回 ResourceLeakTracker 对象；</li><li>ADVANCED 级别，随机概率( 默认为 1% 左右 )返回 ResourceLeakTracker 对象。</li></ul></li></ul></li></ol><h2 id="AbstractReferenceCountedByteBuf"><a href="#AbstractReferenceCountedByteBuf" class="headerlink" title="AbstractReferenceCountedByteBuf"></a>AbstractReferenceCountedByteBuf</h2><p><code>io.netty.buffer.AbstractReferenceCountedByteBuf</code> ，实现引用计数的获取与增减的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #refCnt&#125; 的更新器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicIntegerFieldUpdater&lt;AbstractReferenceCountedByteBuf&gt; refCntUpdater = AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, <span class="string">"refCnt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引用计数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> refCnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">AbstractReferenceCountedByteBuf</span><span class="params">(<span class="keyword">int</span> maxCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置最大容量</span></span><br><span class="line">    <span class="keyword">super</span>(maxCapacity);</span><br><span class="line">    <span class="comment">// 初始 refCnt 为 1</span></span><br><span class="line">    refCntUpdater.set(<span class="keyword">this</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计数器基于 <code>AtomicIntegerFieldUpdater</code> ，为什么不直接用 <code>AtomicInteger</code> ？因为 ByteBuf 对象很多，如果都把 int 包一层 AtomicInteger 花销较大，而AtomicIntegerFieldUpdater 只需要一个全局的静态变量。</p><h2 id="SimpleLeakAwareByteBuf"><a href="#SimpleLeakAwareByteBuf" class="headerlink" title="SimpleLeakAwareByteBuf"></a>SimpleLeakAwareByteBuf</h2><p><code>io.netty.buffer.SimpleLeakAwareByteBuf</code> ，继承 WrappedByteBuf 类，Simple 级别的 LeakAware ByteBuf 实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关联的 ByteBuf 对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This object's is associated with the &#123;<span class="doctag">@link</span> ResourceLeakTracker&#125;. When &#123;<span class="doctag">@link</span> ResourceLeakTracker#close(Object)&#125;</span></span><br><span class="line"><span class="comment"> * is called this object will be used as the argument. It is also assumed that this object is used when</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ResourceLeakDetector#track(Object)&#125; is called to create &#123;<span class="doctag">@link</span> #leak&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ByteBuf trackedByteBuf;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ResourceLeakTracker 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> ResourceLeakTracker&lt;ByteBuf&gt; leak;</span><br><span class="line"></span><br><span class="line">SimpleLeakAwareByteBuf(ByteBuf wrapped, ByteBuf trackedByteBuf, ResourceLeakTracker&lt;ByteBuf&gt; leak) &#123; <span class="comment">// &lt;2&gt;</span></span><br><span class="line">    <span class="keyword">super</span>(wrapped);</span><br><span class="line">    <span class="keyword">this</span>.trackedByteBuf = ObjectUtil.checkNotNull(trackedByteBuf, <span class="string">"trackedByteBuf"</span>);</span><br><span class="line">    <span class="keyword">this</span>.leak = ObjectUtil.checkNotNull(leak, <span class="string">"leak"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SimpleLeakAwareByteBuf(ByteBuf wrapped, ResourceLeakTracker&lt;ByteBuf&gt; leak) &#123; <span class="comment">// &lt;1&gt;</span></span><br><span class="line">    <span class="keyword">this</span>(wrapped, wrapped, leak);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>leak 属性，ResourceLeakTracker 对象。<br>trackedByteBuf 属性，真正关联 leak 的 ByteBuf 对象。<br>对于构造方法 &lt;1&gt; ，wrapped 和 trackedByteBuf 相同。<br>对于构造方法 &lt;2&gt; ，wrapped 和 trackedByteBuf 一般不同。</p><h1 id="ResourceLeakDetector-内存泄露检测器"><a href="#ResourceLeakDetector-内存泄露检测器" class="headerlink" title="ResourceLeakDetector 内存泄露检测器"></a>ResourceLeakDetector 内存泄露检测器</h1><p>ResourceLeakDetector 为了检测内存是否泄漏，使用了 WeakReference( 弱引用 )和 ReferenceQueue( 引用队列 )，过程如下：</p><ol><li>根据检测级别和采样率的设置，在需要时为需要检测的 ByteBuf 创建WeakReference 引用。</li><li>当 JVM 回收掉 ByteBuf 对象时，JVM 会将 WeakReference 放入ReferenceQueue 队列中。</li><li>通过对 ReferenceQueue 中 WeakReference 的检查，判断在 GC 前是否有释放ByteBuf 的资源，就可以知道是否有资源释放。</li></ol><p>该类中枚举了4个内存泄漏等级，默认级别为 DEFAULT_LEVEL = Level.SIMPLE 。<br>四个等级如下</p><ol><li>禁用（DISABLED） - 完全禁止泄露检测，省点消耗。</li></ol><ol start="2"><li>简单（SIMPLE） - 默认等级，告诉我们取样的1%的ByteBuf是否发生了泄露，但总共一次只打印一次，看不到就没有了。</li><li>高级（ADVANCED） - 告诉我们取样的1%的ByteBuf发生泄露的地方。每种类型的泄漏（创建的地方与访问路径一致）只打印一次。对性能有影响。</li><li>偏执（PARANOID） - 跟高级选项类似，但此选项检测所有ByteBuf，而不仅仅是取样的那1%。对性能有绝大的影响。</li></ol><h1 id="DefaultResourceLeak"><a href="#DefaultResourceLeak" class="headerlink" title="DefaultResourceLeak"></a>DefaultResourceLeak</h1><p>DefaultResourceLeak ，继承 java.lang.ref.WeakReference 类，实现 ResourceLeakTracker 接口，默认 ResourceLeakTracker 实现类。同时，它是 ResourceLeakDetector 内部静态类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceLeakDetector</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultResourceLeak</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">Object</span>&gt; <span class="keyword">implements</span> <span class="title">ResourceLeakTracker</span>&lt;<span class="title">T</span>&gt;, <span class="title">ResourceLeak</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用队列-Reference-Queue"><a href="#引用队列-Reference-Queue" class="headerlink" title="引用队列(Reference Queue)"></a>引用队列(Reference Queue)</h2><p>一旦弱引用对象开始返回null，该弱引用指向的对象就被标记成了垃圾。而这个弱引用对象（非其指向的对象）就没有什么用了。通常这时候需要进行一些清理工作。比如WeakHashMap会在这时候移除没用的条目来避免保存无限制增长的没有意义的弱引用。<br>引用队列可以很容易地实现跟踪不需要的引用。当你在构造WeakReference时传入一个ReferenceQueue对象，当该引用指向的对象被标记为垃圾的时候，这个引用对象会自动地加入到引用队列里面。接下来，你就可以在固定的周期，处理传入的引用队列，比如做一些清理工作来处理这些没有用的引用对象。</p><p>也就是说，referent 被标记为垃圾的时候，它对应的 WeakReference 对象会被添加到 refQueue 队列中。在此处，即将 DefaultResourceLeak 添加到 referent 队列中。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://blog.csdn.net/prestigeding/article/details/54233327" target="_blank" rel="noopener">Netty学习之旅—-源码分析Netty内存泄漏检测</a></li><li><a href="http://calvin1978.blogcn.com/articles/netty-leak.html" target="_blank" rel="noopener">Netty之有效规避内存泄漏</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自从 Netty 4 开始，对象的生命周期由它们的引用计数( reference counts )管理，而不是由垃圾收集器( garbage collector )管理了，ByteBuf 也不例外，作为对 Java 原生 NIO ByteBuffer 的优秀封装和IO中使用
      
    
    </summary>
    
    
    
      <category term="Netty" scheme="http://yoursite.com/tags/Netty/"/>
    
      <category term="内存泄漏" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Golang 内存模型初探</title>
    <link href="http://yoursite.com/2019/05/13/2019-06-21-Golang%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2019/05/13/2019-06-21-Golang内存模型初探/</id>
    <published>2019-05-13T01:13:14.000Z</published>
    <updated>2019-10-30T02:49:11.798Z</updated>
    
    <content type="html"><![CDATA[<p>内存模型:MM 定义了语言在计算机内存 RAM 中的工作方式，包括共享变量的可见性、共享变量的同步。</p><h1 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h1><ol><li><p>mspan</p></li><li><p>mcache</p></li></ol><h1 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h1><p>Happens Before 定义两个操作间的偏序关系，具有传递性。用于保证一个线程的内存写操作对紧跟着执行的（中间不能穿插别的项目）另一个线程可见，确切的说是执行之前就可见。<br>如果没有得到 HB 保证，会出现很大问题。Java中也是如此。</p><h2 id="Go-中可见行和顺序性的保证方法"><a href="#Go-中可见行和顺序性的保证方法" class="headerlink" title="Go 中可见行和顺序性的保证方法"></a>Go 中可见行和顺序性的保证方法</h2><p>Golang 语言的内存模型规定了一个 goroutine 可以看到另外一个 goroutine 修改同一个变量的值的条件，这类似 java 内存模型中内存可见性问题（ Java 内存可见性问题可以参考拙作：Java 并发编程之美一书）。</p><p>当多个 goroutine 并发同时存取同一个数据时候必须把并发的存取的操作顺序化，在go中可以实现操作顺序化的工具有高级的通道（channel）通信和同步原语比如sync包中的Mutex(互斥锁)、RWMutex(读写锁) 或者和 sync/atomic 中的原子操作。</p><h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><p>单线程下按代码先后顺序有 Happens Before 关系，编译器和CPU也会做优化，但不会影响其先后顺序。<br>一个读操作r1总是对最近的一个对写操作w1的内容可见，即使不是同一个变量的读写。</p><h3 id="Init函数"><a href="#Init函数" class="headerlink" title="Init函数"></a>Init函数</h3><ol><li><p>包P1中导入P2，P2中 init 函数 与 P1 形成Happens Before 关系；</p></li><li><p>main 函数 Happens After 所有的 init 函数</p></li></ol><h3 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h3><ol><li>Goroutine 创建 Happens Before 所有的 Goroutine 操作<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Print(a)</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a = <span class="string">"hello, world"</span></span><br><span class="line">    <span class="keyword">go</span> f()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    hello()</span><br><span class="line">    wg.Wait()</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Goroutine 的销毁 Happens After 所有此 Goroutine 操作<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; a = <span class="string">"hello"</span> &#125;()</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><ol><li><p>对一个元素的 send 操作 Happens Before 对应的 receive 完成操作</p></li><li><p>对 channel 的 close 操作 Happens Before receive   端的收到关闭通知操作</p></li><li><p>对于 Unbuffered Channel，对一个元素的 receive 操作 Happens Before 对应的 send 完成操作</p></li><li><p>对于 Buffered Channel，假设 Channel 的 buffer 大小为 C，那么对第 k 个元素的 receive 操作，Happens Before 第 k+C 个 send 完成操作。可以看出上一条 Unbuffered Channel 规则就是这条规则 C=0 时的特例</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a = <span class="string">"hello, world"</span> <span class="comment">//1</span></span><br><span class="line">    c &lt;- <span class="number">0</span>             <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> f()   <span class="comment">//3</span></span><br><span class="line">    &lt;-c      <span class="comment">//4</span></span><br><span class="line">    fmt.Print(a) <span class="comment">//5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类比 JMM，有很多是相似的，比如单线程下的顺序性，但 Golang 比 Java 要简单得多啦。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://ifeve.com/golang-mem/" target="_blank" rel="noopener">GoLang内存模型</a></li><li><a href="https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/" target="_blank" rel="noopener">Allocation efficiency in high-performance Go services</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;内存模型:MM 定义了语言在计算机内存 RAM 中的工作方式，包括共享变量的可见性、共享变量的同步。&lt;/p&gt;
&lt;h1 id=&quot;内存分配&quot;&gt;&lt;a href=&quot;#内存分配&quot; class=&quot;headerlink&quot; title=&quot;内存分配&quot;&gt;&lt;/a&gt;内存分配&lt;/h1&gt;&lt;ol&gt;
&lt;l
      
    
    </summary>
    
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
      <category term="内存模型" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>代码整洁之道</title>
    <link href="http://yoursite.com/2019/05/02/2019-05-26-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%81%8C%E4%B8%9A%E4%BF%AE%E5%85%BB/"/>
    <id>http://yoursite.com/2019/05/02/2019-05-26-代码整洁之道-程序员的职业修养/</id>
    <published>2019-05-02T04:00:00.000Z</published>
    <updated>2019-10-30T02:46:33.658Z</updated>
    
    <content type="html"><![CDATA[<p>读过《代码整洁之道》后列了如下提纲，时常翻阅可能会写出更整洁的代码。相比 Alibaba 和唯品会的 Java 开发手册，这本书从更宏观的角度以及代码之外的事情（沟通、需求、设计、管理）提出了一些可实操的有用的方法。从这点来看，书名叫做《程序员的自我修养》也不错，哈哈。</p><blockquote><p>享受职业素养。</p></blockquote><h1 id="专业主义"><a href="#专业主义" class="headerlink" title="专业主义"></a>专业主义</h1><h2 id="不行损害之事"><a href="#不行损害之事" class="headerlink" title="不行损害之事"></a>不行损害之事</h2><ul><li><p>让 QA 找不出任何问题</p></li><li><p>确信代码能正常运行（通过主动反复测试）</p></li><li><p>自动化 QA</p></li><li><p>不要破坏结构，以牺牲结构为代价发布新功能，得不偿失，将来必定后悔。</p></li></ul><p>##了解所在领域</p><ul><li><p>NS图表</p></li><li><p>Mealy &amp; Moore 状态机的差别</p></li><li><p>变换分析的含义</p></li><li><p>快速排序手写</p></li><li><p>临时传递数据</p></li><li><p>耦合性（Conascence）</p></li></ul><h2 id="每个开发人员必须精通的事项"><a href="#每个开发人员必须精通的事项" class="headerlink" title="每个开发人员必须精通的事项"></a>每个开发人员必须精通的事项</h2><ul><li><p>设计模式 （GOF，24）</p></li><li><p>设计原则（SOLID）</p></li><li><p>编程方法</p><ul><li>XP</li><li>Scrum</li><li>精益</li><li>看板</li><li>瀑布</li><li>结构化分析、设计</li></ul></li><li><p>实践</p><ul><li>测试驱动开发</li><li>面向对象设计</li><li>结构化编程</li><li>持续集成</li><li>结对编程</li></ul></li><li><p>工件</p><ul><li>UML 图</li><li>DFD 图</li><li>结构图</li><li>Petri 网络图</li><li>状态迁移图标</li><li>流程图</li><li>决策表</li><li>甘特图<h2 id="职业道德"><a href="#职业道德" class="headerlink" title="职业道德"></a>职业道德</h2></li></ul></li><li><p>坚持学习</p></li><li><p>练习</p></li><li><p>合作</p></li><li><p>辅导</p></li><li><p>了解业务领域</p></li><li><p>与客户（需求）保持一致</p></li><li><p>谦逊</p></li></ul><h1 id="说“不”"><a href="#说“不”" class="headerlink" title="说“不”"></a>说“不”</h1><ul><li>当你面对类似猩猩卖场提出的在黑色星期五之前做出一个 iPhone 应用的需求时，你应该尊重事实和自己，敢于说“不”。</li></ul><h1 id="说“是”"><a href="#说“是”" class="headerlink" title="说“是”"></a>说“是”</h1><h2 id="承诺用语"><a href="#承诺用语" class="headerlink" title="承诺用语"></a>承诺用语</h2><p>做出承诺包含三个步骤</p><ul><li><p><strong>口头上说</strong>自己将会去做</p></li><li><p><strong>心里认真对待</strong>做出的承诺</p></li><li><p>真正<strong>付诸行动</strong></p></li></ul><h2 id="逃避用语"><a href="#逃避用语" class="headerlink" title="逃避用语"></a>逃避用语</h2><ul><li>需要/应该<ul><li>我们需要把这事做完</li><li>但愿我有时间做这事</li></ul></li><li>希望/但愿<ul><li>希望我明天能完成任务</li><li>但愿电脑能快点</li></ul></li><li>让我们（而不是让我）<ul><li>让我们回头见</li><li>让我们把这事做完<br>总之，说“是”就是：你对自己将会做某事做了清晰的事实陈述，而且还说明了完成期限。</li></ul></li></ul><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><h2 id="代码要求"><a href="#代码要求" class="headerlink" title="代码要求"></a>代码要求</h2><ul><li><p>代码能正常工作</p></li><li><p>代码能满足需求</p></li><li><p>代码能和现有系统结合得天衣无缝</p></li><li><p>其他程序员能读懂你的代码</p></li></ul><h2 id="个人状态"><a href="#个人状态" class="headerlink" title="个人状态"></a>个人状态</h2><ul><li><p>凌晨三点写的可能是糟糕的代码</p></li><li><p>焦虑时也是如此</p></li><li><p>流态区可能会效率高，但也会导致<strong>忽略与全局整合</strong></p></li><li><p>音乐并不能提高效率</p></li><li><p>被打断的预防是结对编程或者 TDD</p></li><li><p>阻塞时找点别的事情干</p></li><li><p>“创造性输出”依赖于“创造性输入”，比如音乐、小说、电影等</p></li><li><p>调试也是编码的一部分</p></li></ul><h2 id="保持节奏"><a href="#保持节奏" class="headerlink" title="保持节奏"></a>保持节奏</h2><p>软件开发是一场马拉松🏃🏻‍♂️而不是短跑。</p><ul><li><p>知道何时应该离开一会，疲倦、预防颈椎病、心血管疾病（……)</p></li><li><p>开车回家路上，脑袋可以解决一些问题</p></li><li><p>洗澡同上</p></li><li><p>进度延迟时坚决坚持你的估算</p></li><li><p>加班长期来说并无好处</p></li></ul><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><ul><li><p>帮助他人可以收获更多</p></li><li><p>接受他人帮助</p></li><li><p>辅导缺乏经验的程序员是老鸟的职责</p></li></ul><h1 id="测试驱动开发"><a href="#测试驱动开发" class="headerlink" title="测试驱动开发"></a>测试驱动开发</h1><p>最早是 XP 极限编程运动的一部分，后被其他所有敏捷方法采纳。不仅是一种缩短编码周期的简单技巧。</p><h2 id="三项法则是"><a href="#三项法则是" class="headerlink" title="三项法则是"></a>三项法则是</h2><ol><li><p>编写好失败单元测试之前，不写任何产品代码</p></li><li><p>只要有一个单元测试失败，就不再写测试代码；无法通过编译也是一种失败</p></li><li><p>产品代码恰好能够让当前的失败单元测试通过即可，不必多写</p></li></ol><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li><p>确定性 修改之后运行测试，确保没有错误因修改产生</p></li><li><p>减少 Bug</p></li><li><p>让人敢于修改代码</p></li><li><p>单元测试成为示例和文档</p></li><li><p>遵循三项法则有助于做出松耦合的设计，因为测试不允许耦合</p></li><li><p>专业人士的选择</p></li></ul><h2 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h2><ul><li>某些情况下确实不适用，并非银弹，就像 DDD。</li></ul><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ul><li>用自己的时间练习————保证不落伍是自己的责任</li></ul><p>-专业人士需要练习，做到最好，拓宽视野。</p><h1 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h1><ul><li><p>不要过早精细化————你不知道哪儿应该精细化</p></li><li><p>但确定需求应该尽早</p></li><li><p>业务分析员测试“正确路径”，QA测试“错误路径”</p></li><li><p>验收测试是业务方写给业务方的，单元测试是程序员写给自己的（也可以拿来做文档的一部分）</p></li></ul><h1 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h1><ul><li><p>QA 的任务就是和业务人员一起创建自动化验收测试。</p></li><li><p>自动化测试金字塔，自顶向下依次是</p><ul><li><p>人工探索式测试：需要人工介入，既不是自动化测试，也非脚本测试，目的是探索系统预期之外的能力</p></li><li><p>系统测试：对整个集成完毕的系统的自动化测试，不会直接测试业务规则，而是测试系统是否已经正确组装完毕、各部件之间是否能正常交互。</p></li><li><p>集成测试：组装配件成组合，判断其是否正常通信，是编排型测试，只看是否协调，不管业务规则</p></li><li><p>组件测试：对组建的业务规则的验收测试</p></li><li><p>单元测试：供程序员自己使用</p></li></ul></li></ul><h1 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h1><p>8小时很短暂，只有480分钟，28800秒。</p><ul><li><p>会议需要成本，时间成本和金钱成本</p></li><li><p>会议并不总要参加，也可以离席</p></li><li><p>敏捷开发会议需要回答三个问题，每个问题不超过 20s</p><ul><li>我昨天干了什么</li><li>我今天打算干什么</li><li>我遇到了什么问题</li></ul></li><li><p>注意力</p><ul><li>足够的睡眠</li><li>不集中注意力时，注意力可以恢复</li><li>肌肉注意力不同于心智注意力，且前者可以改善后者</li><li>平衡输入与输出</li></ul></li><li><p>要避免的行为</p><ul><li>优先级错乱</li><li>死胡同（走不下去，应该折返）</li><li>泥潭（可以完成但效率严重降低，应及时抽身）</li></ul></li></ul><h1 id="预估"><a href="#预估" class="headerlink" title="预估"></a>预估</h1><p>不同的人对预估看法不同。业务方觉得预估就是承诺，开发方认为认为预估只是个猜测。</p><ul><li><p>避免暗示性承诺，分清楚预估与承诺</p></li><li><p>计划评审技术（PERT）</p><ul><li>乐观预估 O</li><li>标称预估 N</li><li>悲观预估 P</li><li>期望时间 u = (O+4N+P)/6</li><li>标准差 o = (P-O)/6</li><li></li></ul></li><li><p>生成共识的 Delphi 法</p><ul><li>亮手指</li><li>规划扑克</li><li>关联预估</li><li>三元预估</li></ul></li><li><p>大数定律防止预估出错</p></li></ul><h1 id="压力"><a href="#压力" class="headerlink" title="压力"></a>压力</h1><ul><li><p>避免压力</p><ul><li>合理的承诺</li><li>保持整洁</li><li>危机中的纪律</li></ul></li><li><p>应对压力</p><ul><li>不要惊慌失措</li><li>沟通</li><li>依靠纪律原则</li><li>寻求帮助</li></ul></li></ul><h1 id="协作"><a href="#协作" class="headerlink" title="协作"></a>协作</h1><blockquote><p>我们并非是因为喜欢和其他人在一起工作而选择做程序员的</p></blockquote><ul><li><p>与用户讨论，理解业务</p></li><li><p>与程序员密切合作</p><ul><li>共享代码</li><li>结对编程</li></ul></li></ul><h1 id="项目与团队"><a href="#项目与团队" class="headerlink" title="项目与团队"></a>项目与团队</h1><blockquote><p>项目比团队更难构建</p></blockquote><ul><li><p>让一个程序员同时投身两个项目并不明智</p></li><li><p>有凝聚力的团队可以有3-20人，最好是12人。</p></li></ul><h1 id="辅导、学徒期与技艺"><a href="#辅导、学徒期与技艺" class="headerlink" title="辅导、学徒期与技艺"></a>辅导、学徒期与技艺</h1><blockquote><p>医学专业已经建立了一套严密的辅导体系。</p></blockquote><ul><li>上升过程<ul><li>学徒期/实习生</li><li>熟练工</li><li>大师<br>学校能够传授的是理论，无法传授作为一个程序员所需掌握的原则、实践和技能。这些东西只有经由师徒个体间多年的细心监督和辅导才能获得。每个程序员都会经历上述时期，因此应该建立一种包含学徒期、实习期和长期指引的机制。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;读过《代码整洁之道》后列了如下提纲，时常翻阅可能会写出更整洁的代码。相比 Alibaba 和唯品会的 Java 开发手册，这本书从更宏观的角度以及代码之外的事情（沟通、需求、设计、管理）提出了一些可实操的有用的方法。从这点来看，书名叫做《程序员的自我修养》也不错，哈哈。&lt;/
      
    
    </summary>
    
    
    
      <category term="Summary" scheme="http://yoursite.com/tags/Summary/"/>
    
      <category term="Clean Code" scheme="http://yoursite.com/tags/Clean-Code/"/>
    
  </entry>
  
</feed>
