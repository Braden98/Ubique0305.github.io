<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ubik&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-29T13:36:36.484Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Adam Ubik</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rust 的错误处理</title>
    <link href="http://yoursite.com/2019/08/01/2019-08-02-Rust%20%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2019/08/01/2019-08-02-Rust 的错误处理/</id>
    <published>2019-08-01T03:11:00.000Z</published>
    <updated>2019-10-29T13:36:36.484Z</updated>
    
    <content type="html"><![CDATA[<p>在 Rust 中，错误处理主要包括显式的 panic 和 Option。</p><p>一个使用 panic 的例子</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">give_princess</span></span>(gift: &amp;<span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="comment">// 公主讨厌蛇，所以如果公主表示厌恶的话我们要停止！</span></span><br><span class="line">    <span class="keyword">if</span> gift == <span class="string">"snake"</span> &#123; <span class="built_in">panic!</span>(<span class="string">"AAAaaaaa!!!!"</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"I love &#123;&#125;s!!!!!"</span>, gift);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当错误有可能发生，且应当由调用者处理时，使用 Result 而不是 unwrap 然后 使用 expect，除非是在测试或者 prototype develop.</li></ul><p>std 中的 Option<T> enum 类型用于可能有“不存在”的情况，其内容包括</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Some(T)//找到一个属于 T 类型的元素</span><br><span class="line">None//相当于null</span><br></pre></td></tr></table></figure><p>之后用 <code>match</code> 进行显式的处理或者 <code>unwarp</code> 隐式处理。后者要么返回 some 内部元素，要么直接 panic。</p><p>一个用 match 处理的例子</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">give</span></span>(gift: <span class="built_in">Option</span>&lt;&amp;<span class="built_in">str</span>&gt;)&#123;</span><br><span class="line">    <span class="keyword">match</span> gift&#123;</span><br><span class="line">        <span class="literal">Some</span>(<span class="string">"snake"</span>) =&gt; <span class="built_in">println!</span>(<span class="string">"fuck"</span> ),</span><br><span class="line">        <span class="literal">Some</span>(inner) =&gt; <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,inner ),</span><br><span class="line">        <span class="literal">None</span> =&gt;<span class="built_in">println!</span>(<span class="string">"???"</span> ),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意这里要用 Some 包装，直接传字符串会报错</span></span><br><span class="line"><span class="comment">//————你看 give 的 para 就知道了</span></span><br><span class="line"><span class="keyword">let</span> food = <span class="literal">Some</span>(<span class="string">"food"</span>);</span><br><span class="line"><span class="keyword">let</span> snake = <span class="literal">Some</span>(<span class="string">"snake"</span>);</span><br><span class="line"><span class="keyword">let</span> void = <span class="literal">None</span>;</span><br><span class="line">give(food);</span><br><span class="line">give(<span class="literal">None</span>);</span><br><span class="line">give(snake);</span><br><span class="line">give(void);</span><br></pre></td></tr></table></figure><p>从上边可以看出来，当 match 很多事，使用较为繁琐，此时可以使用组合算子（combinator），以 模块化的风格来管理控制流。主要就是用 closure 方便地对主要情况而非特殊情况（None）进行处理，例子如下</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">process</span></span>(food: <span class="built_in">Option</span>&lt;Food&gt;) -&gt; <span class="built_in">Option</span>&lt;Cooked&gt; &#123;</span><br><span class="line">    food.map(|f| Peeled(f))</span><br><span class="line">        .map(|Peeled(f)| Chopped(f))</span><br><span class="line">        .map(|Chopped(f)| Cooked(f))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>map() 以链式调用的方式来简化 match 语句。然而，如果以返回类型是 Option<T> 的函数作为 map() 的参数，会导致出现嵌套形式 Option&lt;Option<T>&gt;。这样多层串联 调用就会变得混乱。所以有必要引入 and_then()，在某些语言中它叫做 flatmap。例子如下</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要做一份好菜，我们需要原材料和食谱。</span></span><br><span class="line"><span class="comment">// 我们可以借助一系列 `match` 来表达这个逻辑：</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">cookable_v1</span></span>(food: Food) -&gt; <span class="built_in">Option</span>&lt;Food&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> have_ingredients(food) &#123;</span><br><span class="line">        <span class="literal">None</span>       =&gt; <span class="literal">None</span>,</span><br><span class="line">        <span class="literal">Some</span>(food) =&gt; <span class="keyword">match</span> have_recipe(food) &#123;</span><br><span class="line">            <span class="literal">None</span>       =&gt; <span class="literal">None</span>,</span><br><span class="line">            <span class="literal">Some</span>(food) =&gt; <span class="literal">Some</span>(food),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以使用 `and_then()` 把上面的逻辑改写得更紧凑：</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">cookable_v2</span></span>(food: Food) -&gt; <span class="built_in">Option</span>&lt;Food&gt; &#123;</span><br><span class="line">    have_ingredients(food).and_then(have_recipe)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Result 是 Option 类型的更丰富的版本，描述的是可能 的错误而不是可能的不存在。<br>Result 有很多类似 Option 的方法。例如 unwrap()，它要么举出元素 T，要么就 panic.我们希望把 错误返回给调用者，这样它可以决定回应错误的正确方式。<br>例子如下</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiply</span></span>(first_number_str: &amp;<span class="built_in">str</span>, second_number_str: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="comment">// 我们试着用 `unwrap()` 把数字放出来。它会咬我们一口吗？</span></span><br><span class="line">    <span class="keyword">let</span> first_number = first_number_str.parse::&lt;<span class="built_in">i32</span>&gt;().unwrap();</span><br><span class="line">    <span class="keyword">let</span> second_number = second_number_str.parse::&lt;<span class="built_in">i32</span>&gt;().unwrap();</span><br><span class="line">    first_number * second_number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从unwrap改为模式匹配</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiply</span></span>(first_number_str: &amp;<span class="built_in">str</span>, second_number_str: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">i32</span>, ParseIntError&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> first_number_str.parse::&lt;<span class="built_in">i32</span>&gt;() &#123;</span><br><span class="line">        <span class="literal">Ok</span>(first_number)  =&gt; &#123;</span><br><span class="line">            <span class="keyword">match</span> second_number_str.parse::&lt;<span class="built_in">i32</span>&gt;() &#123;</span><br><span class="line">                <span class="literal">Ok</span>(second_number)  =&gt; &#123;</span><br><span class="line">                    <span class="literal">Ok</span>(first_number * second_number)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="literal">Err</span>(e) =&gt; <span class="literal">Err</span>(e),</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">Err</span>(e) =&gt; <span class="literal">Err</span>(e),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 组合算子</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiply</span></span>(first_number_str: &amp;<span class="built_in">str</span>, second_number_str: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">i32</span>, ParseIntError&gt; &#123;</span><br><span class="line">    first_number_str.parse::&lt;<span class="built_in">i32</span>&gt;().and_then(|first_number| &#123;</span><br><span class="line">        second_number_str.parse::&lt;<span class="built_in">i32</span>&gt;().map(|second_number| first_number * second_number)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 match 和 提前返回 early return 代替组合算子</span></span><br><span class="line"><span class="comment">// 注意 return ，终于用到了哈哈哈</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiply</span></span>(first_number_str: &amp;<span class="built_in">str</span>, second_number_str: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">i32</span>, ParseIntError&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> first_number = <span class="keyword">match</span> first_number_str.parse::&lt;<span class="built_in">i32</span>&gt;() &#123;</span><br><span class="line">        <span class="literal">Ok</span>(first_number)  =&gt; first_number,</span><br><span class="line">        <span class="literal">Err</span>(e) =&gt; <span class="keyword">return</span> <span class="literal">Err</span>(e),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> second_number = <span class="keyword">match</span> second_number_str.parse::&lt;<span class="built_in">i32</span>&gt;() &#123;</span><br><span class="line">        <span class="literal">Ok</span>(second_number)  =&gt; second_number,</span><br><span class="line">        <span class="literal">Err</span>(e) =&gt; <span class="keyword">return</span> <span class="literal">Err</span>(e),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="literal">Ok</span>(first_number * second_number)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// unwrap 且避免产生 panic，? 几乎1 就等于一个会返回 Err 而不是 panic 的 unwrap</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiply</span></span>(first_number_str: &amp;<span class="built_in">str</span>, second_number_str: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">i32</span>, ParseIntError&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> first_number = first_number_str.parse::&lt;<span class="built_in">i32</span>&gt;()?;</span><br><span class="line">    <span class="keyword">let</span> second_number = second_number_str.parse::&lt;<span class="built_in">i32</span>&gt;()?;</span><br><span class="line"></span><br><span class="line">    <span class="literal">Ok</span>(first_number * second_number)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在出现 ？以前，是使用 try! 宏的，栗子如下</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiply</span></span>(first_number_str: &amp;<span class="built_in">str</span>, second_number_str: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">i32</span>, ParseIntError&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> first_number = <span class="built_in">try!</span>(first_number_str.parse::&lt;<span class="built_in">i32</span>&gt;());</span><br><span class="line">    <span class="keyword">let</span> second_number = <span class="built_in">try!</span>(second_number_str.parse::&lt;<span class="built_in">i32</span>&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="literal">Ok</span>(first_number * second_number)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">Ps:为了减少代码量，可以使用 </span><br><span class="line">```rust</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">AliasedResult</span></span>&lt;T&gt; = <span class="built_in">Result</span>&lt;T, ParseIntError&gt;;</span><br></pre></td></tr></table></figure><p>这样，函数名可以改为</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiply</span></span>(first_number_str: &amp;<span class="built_in">str</span>, second_number_str: &amp;<span class="built_in">str</span>) -&gt; AliasedResult&lt;<span class="built_in">i32</span>&gt;</span><br></pre></td></tr></table></figure><p>参考资料</p><ol><li><a href="https://doc.rust-lang.org/rust-by-example/" target="_blank" rel="noopener">Rust by Example</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Rust 中，错误处理主要包括显式的 panic 和 Option。&lt;/p&gt;
&lt;p&gt;一个使用 panic 的例子&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Rust" scheme="http://yoursite.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务的原理与实现</title>
    <link href="http://yoursite.com/2019/07/13/2019-08-22-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/07/13/2019-08-22-分布式事务的学习笔记/</id>
    <published>2019-07-13T14:33:14.000Z</published>
    <updated>2019-10-30T08:39:53.767Z</updated>
    
    <content type="html"><![CDATA[<p>看《从 Paxos 到 Zookeeper》看的很爽，于是在 唯一了解的 CAP 和选举问题之外，系统地整理了分布式事务的相关问题。</p><h1 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h1><p>分布式事务就是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。本质上来说，分布式事务就是为了保证不同数据库的数据一致性。</p><p>换句话说，分布式事务 = n 个本地事务。通过事务管理器，达到 n 个本地事务要么全部成功，要么全部失败。</p><h1 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h1><p>一句话：单机装不下了(……)至于是数据量太大还是为了性能或者计算能力，下边慢慢说。<br>举世闻名（……）的微服务就是把一个项目整体拆分成由不同事务组成的模块，显然不同的模块分布在不同的逻辑块上。<br>举个例子，一个公司之内，用户的资产可能分为好多个部分，比如余额，积分，优惠券等等。在公司内部有可能积分功能由一个微服务团队维护，优惠券又是另外的团队维护。<br>这样的话就无法保证积分扣减了之后，优惠券能否扣减成功。<br>另一个原因是数据库要做分库分表。当然从实际角度考虑，在千万量级之前，做数据库的分库分表并不是什么好主意。<br>但即使不这样，NoSQL 自带的分布式特性使得常用来做缓存的 Redis 也需要使用者了解一定的分布式知识（这句话很绕，但词法和语法分析都没问题，哈哈）</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>数据库的 ACID 满足了数据库本地事务的基础，但是它无法满足分布式事务，这个时候衍生了 CAP 和 BASE 两个经典理论。</p><h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><p>CAP 理论</p><p>CAP 定理，又被叫作布鲁尔定理。对于设计分布式系统来说(不仅仅是分布式事务)的架构师来说，CAP 就是你的入门理论。</p><ul><li><p>C (一致性)：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）</p></li><li><p>A (可用性)：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）</p></li><li><p>P (分区容错性)：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在 C 和 A 之间做出选择。</p></li></ul><p>高可用、数据一致性是很多系统设计的目标，但是分区又是不可避免的事情。我们来看一看分别拥有 CA、CP 和 AP 的情况。</p><ul><li>CA without P：如果不要求 P（不允许分区），则 C（强一致性）和A（可用性）是可以保证的。但其实分区不是你想不想的问题，而是始终会存在，因此 CA 的系统更多的是允许分区后各子系统依然保持 CA 。<ul><li>单机的Oracle或MySQL之类的传统RDBMS数据库没有分区容错，是CA系统，可以达到强一致性和可用性。</li></ul></li></ul><ul><li><p>CP without A：如果不要求 A（可用），相当于每个请求都需要在 Server 之间强一致，而 P（分区）会导致同步时间无限延长，如此 CP 也是可以保证的。很多传统的数据库分布式事务都属于这种模式。</p><ul><li><p>半同步复制在master写binlog成功之后不立即提交，而是等待其中一个slave同步成功，只要有一个slave同步成功，立即提交。这种方式比异步复制性能稍差（需要等待至少一个slave同步成功才提交），但是在一定程度上保证了数据一致性（依然不是CP系统：如果同步slave2失败，master和slave1在commit之后挂了，slave2对外提供服务，从slave2中无法查询到刚才提交的数据）。</p><p><img src="/img/8904178FA8EA0F47AFE1CB749F7E4AD5.jpg" alt="插图"></p></li></ul></li><li><p>AP wihtout C：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的NoSQL都属于此类。</p><ul><li><p>Mysql 的异步复制在master写binlog成功之后立即提交，不等待slave的同步结果。这种方式有很高的性能，但是牺牲了数据一致性。如果slave同步不成功就会造成master和slave数据不一致。异步复制虽然性能高（A），但是数据有可能不一致（C），所以异步复制是AP系统。</p><p><img src="/img/5728A35581B66B735DDC81C3670D02AD.jpg" alt="插图"></p></li></ul></li></ul><h3 id="总结如下"><a href="#总结如下" class="headerlink" title="总结如下"></a>总结如下</h3><ul><li>MySQL 主从异步复制是 AP 系统。</li><li>MySQL 主从半同步复制是 CP 系统。</li><li>Zookeeper 是 CP 系统。</li><li>Redis 主从同步是 AP 系统。</li><li>Eureka 主从同步是 AP 系统。</li></ul><h2 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h2><p>BASE 是 Basically Available(基本可用)、Soft state(软状态)和 Eventually consistent (最终一致性) 三个短语的缩写。是对 CAP 中AP 的一个扩展</p><p>BA 基本可用：分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。<br>S 软状态：允许系统中存在中间状态，这个状态不影响系统可用性，这里指的是 CAP 中的不一致。<br>E 最终一致：最终一致是指经过一段时间后，所有节点数据都将会达到一致。<br>BASE 解决了 CAP 中理论没有网络延迟，在 BASE 中用软状态和最终一致，保证了延迟后的一致性。</p><p>BASE 和 ACID 是相反的，它完全不同于 ACID 的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。</p><p>对于大部分的分布式应用而言，只要数据在规定的时间内达到最终一致性即可。我们可以把符合传统的 ACID 叫做刚性事务，把满足 BASE 理论的最终一致性事务叫做柔性事务。<br>具体到分布式事务的实现上，业界主要采用了 XA 协议的强一致规范以及柔性事务的最终一致规范。</p><h1 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h1><ol><li><p>XA 方案</p></li><li><p>TCC 方案</p></li><li><p>本地消息表</p></li><li><p>可靠消息最终一致性方案</p></li><li><p>最大努力通知方案</p></li><li><p>SAGA</p></li></ol><h2 id="XA"><a href="#XA" class="headerlink" title="XA"></a>XA</h2><p>XA 是 X/Open CAE Specification (Distributed Transaction Processing)模型，它定义的 TM（Transaction Manager）与 RM（Resource Manager）之间进行通信的接口。</p><p>Java中 的 javax.transaction.xa.XAResource 定义了 XA 接口，它依赖数据库厂商对 jdbc-driver 的具体实现。</p><p>mysql-connector-java-5.1.30 的实现可参 com.mysql.jdbc.jdbc2.optional.MysqlXAConnection 类。<br>在 XA 规范中，数据库充当 RM 角色，应用需要充当 TM 的角色，即生成全局的 txId ，调用 XAResource 接口，把多个本地事务协调为全局统一的分布式事务。</p><p>目前 XA 有两种实现：</p><ol><li><p>基于一阶段提交( 1PC ) 的弱 XA 。</p></li><li><p>基于二阶段提交( 2PC ) 的强 XA 。</p></li></ol><h3 id="弱XA"><a href="#弱XA" class="headerlink" title="弱XA"></a>弱XA</h3><p>弱 XA 通过去掉 XA 的 Prepare 阶段，以达到减少资源锁定范围而提升并发性能的效果。典型的实现为在一个业务线程中，遍历所有的数据库连接，依次做 commit 或者 rollback。同本地事务相比，性能损耗低，但在事务提交的执行过程中，若出现网络故障、数据库宕机等预期之外的异常，将会造成数据不一致，且无法进行回滚。<br>目前 MyCAT、Sharding-Sphere 默认支持。</p><h3 id="强XA"><a href="#强XA" class="headerlink" title="强XA"></a>强XA</h3><p>二阶段提交是 XA 的标准实现。它将分布式事务的提交拆分为 2 个阶段：prepare 和 commit/rollback 。<br>    - 第一阶段：事务管理器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交。<br>    - 第二阶段：事务协调器要求每个数据库提交数据，或者回滚数据。<br>开启 XA 全局事务后，所有子事务会按照本地默认的隔离级别锁定资源，并记录 undo 和 redo 日志。然后由 TM 发起 prepare 投票，询问所有的子事务是否可以进行提交：<br>    - 当所有子事务反馈的结果为 “yes” 时，TM 再发起 commit 。<br>    - 若其中任何一个子事务反馈的结果为“no”，TM 则发起 rollback 。<br>    -如果在 prepare 阶段的反馈结果为 “yes” ，而 commit 的过程中出现宕机等异常时，则在节点服务重启后，可根据 XA recover 再次进行 commit 补偿，以保证数据的一致性。</p><p>尽量保证了数据的强一致，实现成本较低，在各大主流数据库都有自己实现，对于 MySQL 是从 5.5 开始支持。但会有很多问题</p><ol><li>单点问题：事务管理器在整个流程中扮演的角色很关键，如果其宕机，比如在第一阶段已经完成，在第二阶段正准备提交的时候事务管理器宕机，资源管理器就会一直阻塞，导致数据库无法使用。</li><li>同步阻塞：在准备就绪之后，资源管理器中的资源一直处于阻塞，直到提交完成，释放资源</li><li>数据不一致：两阶段提交协议虽然为分布式数据强一致性所设计，但仍然存在数据不一致性的可能，比如在第二阶段中，假设协调者发出了事务commit 的通知，但是因为网络问题该通知仅被一部分参与者所收到并执行了 commit 操作，其余的参与者则因为没有收到通知一直处于阻塞状态，这时候就产生了数据的不一致性。<br>可以采用现成的 Sharding Sphere来解决， 支持基于 XA 的强一致性事务解决方案，可以通过 SPI 注入不同的第三方组件作为事务管理器实现 XA 协议，如 Atomikos 和 Narayana 。<br>这个方案很少用————数据库一般不能跨服务操作————自己的服务有自己的数据库。一个反例是马云爸爸的88会员，真的🐂🍺。</li></ol><h2 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h2><p>TCC 模型是把锁的粒度完全交给业务处理，它需要每个子事务业务都实现Try-Confirm / Cancel 接口，其本质也是 2PC ，只是 TCC 在应用层控制。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ol><li>Try:<ul><li>尝试执行业务</li><li>完成所有业务检查（一致性）</li><li>预留必须业务资源（准隔离性）</li></ul></li><li>Confirm:<ul><li>确认执行业务；</li><li>真正执行业务，不作任何业务检查</li><li>只使用Try阶段预留的业务资源</li><li>Confirm 操作满足幂等性</li></ul></li><li>Cancel:<ul><li>取消执行业务</li><li>释放Try阶段预留的业务资源</li><li>Cancel操作满足幂等性<br>这三个阶段，都会按本地事务的方式执行。不同于 XA的prepare ，TCC 无需将 XA 的投票期间的所有资源挂起，因此极大的提高了吞吐量。</li></ul></li></ol><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>A –&gt; B 汇款100元。那么汇款服务和收款服务分别需要实现，Try-Confirm-Cancel 接口，并在业务初始化阶段将其注入到 TCC 事务管理器中。<br>汇款服务</p><ol><li>Try：<ul><li>检查A账户有效性，即查看A账户的状态是否为“转帐中”或者“冻结”</li><li>检查A账户余额是否充足</li><li>从A账户中扣减 100 元，并将状态置为“转账中”</li><li>预留扣减资源，将从 A 往 B 账户转账 100 元这个事件存入消息或者日志中</li></ul></li><li>Confirm：<ul><li>不做任何操作</li></ul></li><li>Cancel：<ul><li>A 账户增加 100 元</li><li>从日志或者消息中，释放扣减资源<br>收钱服务</li></ul></li><li>Try：<ul><li>检查 B 账户账户是否有效；</li></ul></li><li>Confirm：<ul><li>读取日志或者消息，B 账户增加 100 元</li><li>从日志或者消息中，释放扣减资源；</li></ul></li><li>Cancel：<ul><li>不做任何操作<br>由此可以看出，TCC 模型对业务的侵入强，改造的难度大。尽量不用，因为代码，尤其是回滚很麻烦。<br>但是，在需要前置资源锁定的场景，不得不使用 XA 或 TCC 的方式。再例如说，下单场景，在订单创建之前，需要扣除如下几个资源：</li></ul></li></ol><ul><li>优惠劵</li><li>钱包余额</li><li>积分</li></ul><p>那么，不得不进行前置多资源锁定，无非是使用 XA 的强锁，还是 TCC 的弱锁。在 oceans 的 tag 0.0.1 中，在未使用 TCC 的情况下，模拟 TCC 的效果的苦闷。</p><h2 id="本地消息表"><a href="#本地消息表" class="headerlink" title="本地消息表"></a>本地消息表</h2><p><img src="/img/02EDF3EDC128207E5786CC98F8722538.jpg" alt="插图"></p><ol><li><p>A 系统在自己本地一个事务里操作同时，插入一条数据到消息表；</p></li><li><p>接着 A 系统将这个消息发送到 MQ 中去；</p></li><li><p>B 系统接收到消息之后，在一个事务里，往自己本地消息表里插入一条数据，同时执行其他的业务操作，如果这个消息已经被处理过了，那么此时这个事务会回滚，这样保证不会重复处理消息；</p></li><li><p>B 系统执行成功之后，就会更新自己本地消息表的状态以及 A 系统消息表的状态；</p></li><li><p>如果 B 系统处理失败了，那么就不会更新消息表状态，那么此时 A 系统会定时扫描自己的消息表，如果有未处理的消息，会再次发送到 MQ 中去，让 B 再次处理；</p></li><li><p>这个方案保证了最终一致性，哪怕 B 事务失败了，但是 A 会不断重发消息，直到 B 那边成功为止。</p></li></ol><h2 id="可靠消息最终一致性方案"><a href="#可靠消息最终一致性方案" class="headerlink" title="可靠消息最终一致性方案"></a>可靠消息最终一致性方案</h2><p>不要用本地的消息表了，直接基于 MQ 来实现事务，具体如下<br><img src="/img/3507F4657A6C7DA9A2346EB210888D9E.jpg" alt="插图"></p><ol><li>A 系统先发送一个 prepared 消息到 mq，如果这个 prepared 消息发送失败那么就直接取消操作别执行了；</li><li>如果这个消息发送成功过了，那么接着执行本地事务，如果成功就告诉 mq 发送确认消息，如果失败就告诉 mq 回滚消息；</li><li>如果发送了确认消息，那么此时 B 系统会接收到确认消息，然后执行本地的事务；</li><li>mq 会自动定时轮询所有 prepared 消息回调你的接口，问你，这个消息是不是本地事务处理失败了，所有没发送确认的消息，是继续重试还是回滚？一般来说这里你就可以查下数据库看之前本地事务是否执行，如果回滚了，那么这里也回滚吧。这个就是避免可能本地事务执行成功了，而确认消息却发送失败了。</li><li>这个方案里，要是系统 B 的事务失败了咋办？重试咯，自动不断重试直到成功，如果实在是不行，要么就是针对重要的资金类业务进行回滚，比如 B 系统本地回滚后，想办法通知系统 A 也回滚；或者是发送报警由人工来手工回滚和补偿。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>TCC 和 MQ 都是以服务为范围进行分布式事务的处理，而 XA、BED、SAGA 则是以数据库为范围进行分布式处理。<br>对于数据库中间件来说，更趋向于选择后者，对于业务而言侵入小，改造的成本低。<br>Ps: 两个 2PC 事务的开源框架，<a href="https://github.com/Dromara/Raincat" target="_blank" rel="noopener">Raincat</a>&amp;<a href="https://github.com/codingapi/tx-lcn" target="_blank" rel="noopener">LCN</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://my.oschina.net/lhztt/blog/915533" target="_blank" rel="noopener">分布式系统理论（一）：CAP定理</a></li><li><a href="https://queue.acm.org/detail.cfm?id=1394128" target="_blank" rel="noopener">Base: An Acid Alternative</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看《从 Paxos 到 Zookeeper》看的很爽，于是在 唯一了解的 CAP 和选举问题之外，系统地整理了分布式事务的相关问题。&lt;/p&gt;
&lt;h1 id=&quot;个人理解&quot;&gt;&lt;a href=&quot;#个人理解&quot; class=&quot;headerlink&quot; title=&quot;个人理解&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>了解并发编程中的RCU</title>
    <link href="http://yoursite.com/2019/06/15/2019-05-30-RCU/"/>
    <id>http://yoursite.com/2019/06/15/2019-05-30-RCU/</id>
    <published>2019-06-15T13:33:14.000Z</published>
    <updated>2019-06-15T14:17:35.200Z</updated>
    
    <content type="html"><![CDATA[<p>为了保护共享数据,需要一些同步机制,如自旋锁(spinlock)，读写锁(rwlock),CPU的速度与访问内存的速度差距越来越大，而这种锁使用了原子操作指令，它需要原子地访问内存，也就说获得锁的开销与访存速度相关，另外在大部分非x86架构上获取锁使用了内存栅(Memory Barrier)，这会导致处理器流水线停滞或刷新，因此它的开销相对于CPU速度而言就越来越大。<br><a href="https://www.ibm.com/developerworks/cn/linux/l-rcu/index.html" target="_blank" rel="noopener">RCU</a><br>RCU(Read-Copy Update),读，拷贝更新,是一种基于延后处理的同步机制，在 2002 年 10 月 引入 Linux 内核。它允许读操作与更新操作并发执行而不是像常规的互斥锁一样让线程串行执行，从而提高了程序的可扩展性，相较于读写锁，有更好的性能。在非抢占式的内核里，RCU 读端的函数完全是 0 开销。</p><p>RCU 由三种机制构成</p><ol><li><p>用于插入的订阅机制</p></li><li><p>等待已有 RCU 结束的方法</p></li><li><p>使读端不受并发插入、删除的干扰的机制，也即维护多个版本的准则。</p></li></ol><p><a href="https://cloud.tencent.com/developer/article/1006226" target="_blank" rel="noopener">MESI是一种内存缓存一致性协议</a>， 存在“modified”，“exclusive”，“shared”和“invalid”四种状态，协议可以在一个指定的缓存行中应用这四种状态。因此，协议在每一个缓存行中维护一个两位的状态标记，这个标记附着在缓存行的物理地址和数据后面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了保护共享数据,需要一些同步机制,如自旋锁(spinlock)，读写锁(rwlock),CPU的速度与访问内存的速度差距越来越大，而这种锁使用了原子操作指令，它需要原子地访问内存，也就说获得锁的开销与访存速度相关，另外在大部分非x86架构上获取锁使用了内存栅(Memory
      
    
    </summary>
    
    
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="RCU" scheme="http://yoursite.com/tags/RCU/"/>
    
  </entry>
  
  <entry>
    <title>用 Optional 取代 null 的思考</title>
    <link href="http://yoursite.com/2019/06/13/2019-05-28-%E7%94%A8%20Optional%20%E5%8F%96%E4%BB%A3%20null/"/>
    <id>http://yoursite.com/2019/06/13/2019-05-28-用 Optional 取代 null/</id>
    <published>2019-06-13T14:33:14.000Z</published>
    <updated>2019-10-30T08:38:15.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h1><p>空指针异常 <code>NullPointerExpection</code> 是在 Java 开发过程中常见的异常，当我们访问数组中超过其长度-1的 Index 时，或者对 null 进行<code>.</code>运算时都会引发这个异常。一般来说，可以通过防御式检查<code>if(Object != null</code>来减少之。但很明显，这种方式牺牲了可读性，而且因为逐层潜嵌套，降低了可扩展性。而为了避免逐层嵌套使用多个返回值，那么可维护性就降低了。<br>实际上，空指针及对它的预防都有很多问题。</p><ul><li><p>它代表的是在静态类型语言中以一种错误的方式对缺失变量值的建模，本身没有任何意义。</p></li><li><p>它会使代码膨胀</p></li><li><p>Java一直试图避免让程序员意识到指针的存在，唯一的例外是：null指针</p></li><li><p>null并不属于任何类型， 这意味着它可以被赋值给任意引用类型的变量。这会导致问题，原因是当这个变量被传递到系统中的另一个部分后，你将无法获知这个null变量最初的赋值到底是什么类型。</p></li></ul><p>在 Java8 中提供了 Option 类来解决这个问题。————当你知道类中某个属性可能为 null 时，采用  <code>Optional&lt;class&gt;</code> 来代替 <code>class</code>.这样，从静态代码的角度，我们至少可以知道哪些值可为 null，哪些不可，方便我们排查错误。</p><p>官方文档描述如下</p><blockquote><p>A container object which may or may not contain a non-null value. If a value is present, isPresent() will return true and get() will return the value.</p></blockquote><p>那么，Optional 和 null 到底有什么区别呢？实际上，变量存在时， Optional类只是对类简单封装。变量不存在时， 缺失的值会被建模成一个“空”的Optional对象，由方法 <code>Optional.empty()</code> 返回。<code>Optional.empty()</code> 方法是一个静态工厂方法，它返回 Optional 类的特定单一实例。你可能还有疑问，null 引用和 <code>Optional.empty()</code> 有什么本?的区别吗？从语义上， 你可以把它们当作一回事儿， 但是实际中它们之间的差别非常大 ： 如果你尝试解引用一个 null ， 一 定 会 触发 NullPointerException ，不过使用 <code>Optional.empty()</code> 就完全没事，它是 Optional 类的一个有效对象，多种场景都能调用，非常有用。</p><h2 id="创建-Optional-对象"><a href="#创建-Optional-对象" class="headerlink" title="创建 Optional 对象"></a>创建 Optional 对象</h2><ol><li><p>声明一个空的 Optional<br><code>Optional&lt;Car&gt; optCar = Optional.empty();</code></p></li><li><p>依据一个非空值创建 Optional<br><code>Optional&lt;Car&gt; optCar = Optional.of(car);</code></p></li><li><p>创建可接受null的Optional</p><p> <code>Optional&lt;Car&gt; optCar = Optional.ofNullable(car);</code></p></li></ol><h2 id="使用-map-从-Optional-对象中提取和转换值"><a href="#使用-map-从-Optional-对象中提取和转换值" class="headerlink" title="使用 map 从 Optional 对象中提取和转换值"></a>使用 map 从 Optional 对象中提取和转换值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; name =</span><br><span class="line">optInsurance.map(Insurance::getName;</span><br></pre></td></tr></table></figure><h2 id="使用-flatMap-链接-Optional-对象"><a href="#使用-flatMap-链接-Optional-对象" class="headerlink" title="使用 flatMap 链接 Optional 对象"></a>使用 flatMap 链接 Optional 对象</h2><p>链式调用 map() 根本无法通过编译，原因是 Optional 发生了嵌套，可以使用 flatMap 完成.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person.flatMap(Person::getCar)  </span><br><span class="line">.flatMap(Car::getInsurance)  </span><br><span class="line">.map(Insurance::getName) </span><br><span class="line">.orElse(<span class="string">"Unknown"</span>);</span><br></pre></td></tr></table></figure><h2 id="无法序列化的-Optional"><a href="#无法序列化的-Optional" class="headerlink" title="无法序列化的 Optional"></a>无法序列化的 Optional</h2><p>Java??的架构师 Brian Goetz曾 经非常明确地说过，Optional的设计初衷仅仅是要支持能返回Optional对象的语法，所以它也并未实现Serializable接口，如果你一定要实现序列化的模型，可以这样做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> Car car;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;Car&gt; <span class="title">getCarAsOptional</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(car);  </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;空指针异常&quot;&gt;&lt;a href=&quot;#空指针异常&quot; class=&quot;headerlink&quot; title=&quot;空指针异常&quot;&gt;&lt;/a&gt;空指针异常&lt;/h1&gt;&lt;p&gt;空指针异常 &lt;code&gt;NullPointerExpection&lt;/code&gt; 是在 Java 开发过程中常见的异常
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="异常" scheme="http://yoursite.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
      <category term="重构" scheme="http://yoursite.com/tags/%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>对象存储的优势及实习问题记录</title>
    <link href="http://yoursite.com/2019/06/13/2019-07-04-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E5%8F%8AGET%20Bucket%20(List%20Objects)%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/06/13/2019-07-04-对象存储技术学习及GET Bucket (List Objects)性能问题/</id>
    <published>2019-06-13T14:33:14.000Z</published>
    <updated>2019-10-29T23:41:01.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h1><p>“对象存储”来源于英文“Object Storage”或“Object-based Storage”</p><h3 id="特性与目标"><a href="#特性与目标" class="headerlink" title="特性与目标"></a>特性与目标</h3><p>多租户<br>不假设数据特征，包括类型，大小等<br>存储空间可无限扩展，且性能该随容量水平扩展而线性提升，不然数据量越大，请求越多，性能却不提升，系统的存取性能只会越来越慢<br>数据安全<br>服务高可靠</p><h3 id="索引设计"><a href="#索引设计" class="headerlink" title="索引设计"></a>索引设计</h3><p>顶级命名空间service+bucket即可</p><h3 id="元信息"><a href="#元信息" class="headerlink" title="元信息"></a>元信息</h3><p>属于哪个存储空间<br>类型<br>大小<br>校验值<br>最后修改时间</p><h4 id="特殊元信息"><a href="#特殊元信息" class="headerlink" title="特殊元信息"></a>特殊元信息</h4><p>演唱者是谁<br>作词者是谁<br>作曲者是谁<br>属于哪张唱片<br>属于什么风格</p><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>传统存储中，块存储暴露Block 文件系统或者网络文件系统如NFS暴露POSIX接口</p><h2 id="DAS-Direct-Attached-Storage"><a href="#DAS-Direct-Attached-Storage" class="headerlink" title="DAS  Direct-Attached Storage"></a>DAS  Direct-Attached Storage</h2><p>直连式存储。直接连接到某台计算机且其他计算机无法获取，如PC的硬盘驱动器。因为服务器无需通过网络来读写数据，所以DAS能为终端用户提供比网络存储更高的性能。如微软公司推荐使用DAS安装Exchange。<br>缺点是依赖服务器主机操作系统进行数据的IO读写和存储维护管理，数据备份和恢复要求占用服务器主机资源（包括CPU、系统IO等）。直连式存储的数据量越大，备份和恢复的时间就越长，对服务器硬件的依赖性和影响就越大。 </p><h2 id="NAS-Network-Attached-Storage"><a href="#NAS-Network-Attached-Storage" class="headerlink" title="NAS  Network-Attached Storage"></a>NAS  Network-Attached Storage</h2><p>网络附属存储/网络接入存储<br>简单说就是连接在网络上，具备资料存储功能的装置，也因此称为网络存储器。将存储设备与服务器彻底分离，底层磁盘通过文件系统类型（分区，格式化后）通过网络的方式（发送ip包）共享给前端应用</p><h2 id="SAN-Storage-Area-Network"><a href="#SAN-Storage-Area-Network" class="headerlink" title="SAN Storage Area Network"></a>SAN Storage Area Network</h2><p>存储区域网络<br> 通过光纤设备将存储设别和服务器连接一起，数据和服务器分离，底层磁盘以块的模式共享给前端的应用服务器。<br> SAN是一个采用网状通道（简称FC）技术，通过FC交换机连接存储阵列和服务器主机，建立专用于数据存储的区域网络。<br> <img src="/img/5E33AC1A918F56A6FFCF48F433A594BF.jpg" alt="插图"></p><h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><ul><li><p>服务可用性更高<br>通过支持对象数据的高可靠性和业务节点的高可靠性网络、节点的多冗余设计，系统设计可用性达到99.99%。</p></li><li><p>数据可靠性更高<br>通过提供对象数据多份冗余和保证多份对象的数据一致性自动修复技术来提供对象数据的高可靠性。OBS系统设计的数据持久性高达99.999999999%（11个9），意为对象存储服务里1000亿个用户文件，每月最多只有1个文件发生数据丢失的可能性。</p></li><li><p>用户数据更安全<br>用户数据传输到OBS时支持SSL加密，同时，OBS通过AK/SK对访问用户的身份进行鉴权，且结合了ACL、桶策略等多种方式对桶和对象进行访问控制，确保数据传输与访问的安全。此外，用户所上传的对象数据在对象存储服务中分片随机存储在不同硬盘上，所以即便磁盘数据被盗走，也无法将其还原成对象数据。</p></li><li><p>容量无限扩展<br>OBS所有业务、存储节点采用分布式集群方式工作，各功能节点、集群都可以独立扩容，整个扩容过程对用户完全透明。用户只需尽情享用云存储带来的无限空间，不必预测未来的存储需求并可以按需要向上和向下扩展，从而大幅提高业务灵活性。</p></li><li><p>维护成本更低<br>由于数据存储在OBS中，企业无需招聘专门的存储设备维护人员，设备的维护交由OBS处理即可。</p></li></ul><h1 id="实习问题记录"><a href="#实习问题记录" class="headerlink" title="实习问题记录"></a>实习问题记录</h1><h2 id="为什么GET-Bucket-List-Objects-在Object多时会慢？"><a href="#为什么GET-Bucket-List-Objects-在Object多时会慢？" class="headerlink" title="为什么GET Bucket (List Objects)在Object多时会慢？"></a>为什么GET Bucket (List Objects)在Object多时会慢？</h2><p>原问题“get bucket那个接口的实现比较麻烦，在object的量很大的情况下，这个接口的性能会很差。你可以想想这个问题”<br>根据API文档所说</p><ol><li>数据量大，多次循环调用该 API才可获得给定 Prefix 条件的所有对象列表。不像其他API只需要一次Http通信；网络通信次数多，</li><li>需要模拟文件系统的目录结构，对delimiter划分的相同前缀的多个对象遍历和合并。底层实现需要较深的函数调用栈或者内存空间。</li><li>Object数量多时更改更频繁，缓存容易失效</li></ol><p>不知道元信息的存储系统是否支持事务，如果不支持，并发情况下我觉得会加共享锁（读锁），锁竞争也会带来性能开销。可以用redis、zookeeper做分布式协调组件的情况下，可以多个请求竞争一个锁，只有一个请求到达并被处理，然后更新缓存供其他请求使用，从而提高吞吐量</p><p>就是关于 GET Bucket (List Objects)在Object多时性能很差的问题，有没有这几个原因</p><ol><li>网络IO次数多。根据文档所说，利用marker参数多次迭代调用该 API才可获得给定 Prefix 条件的所有对象列表。</li><li>计算资源消耗大。文档说支持用delimiter模拟文件系统的目录结构，对delimiter划分的相同前缀的多个对象遍历和合并。这需要较深的函数调用栈或者内存空间以及计算量。</li><li>保持实时性和一致性带来的开销。如文档所说，缓存容易失效，这会导致更多磁盘IO和数据处理。且读取过程中要加共享锁防止元数据被修改导致的一致性问题。</li></ol><p>看文档我觉得服务器应该是一次完成所有数据的处理，但要分段返回是因为数据可能太大吗？</p><p>关于处理方法<br>文档说因为性能问题不要依赖这个接口的并发调用，而是用户自己缓存数据，这是不是说对数据的准确性要求不太高。那这样后端在并发情况下通过选举其中一个请求到达服务器，从mysql或别的拿到结果放入缓存，其他请求都走缓存，就可以一定程度解决吞吐量的问题。同样，通过elasticsearch或者其他放弃事务机制的搜索方式元数据提高响应速度</p><h2 id="Q：“假设现在数据量在单机承受能力之内，用mysql来存储元信息，怎么处理list请求”"><a href="#Q：“假设现在数据量在单机承受能力之内，用mysql来存储元信息，怎么处理list请求”" class="headerlink" title="Q：“假设现在数据量在单机承受能力之内，用mysql来存储元信息，怎么处理list请求”"></a>Q：“假设现在数据量在单机承受能力之内，用mysql来存储元信息，怎么处理list请求”</h2><p>比如按照Zone划分表，表中有所属bucket信息，类型，大小，校验值，最后修改时间，特殊元信息等字段，可以在编程语言层面记录已经处理过的bucket，实现下次根据marker参数继续处理。事务机制（隔离性）可以方便地保证一致性问题，同时可以对marker或其他字段走索引加快IO速度。<br>mysql8之后已不自带缓存，如文档所说如果要加缓存可以用redis。同时在编程语言层面利用元信息的最后修改时间字段实现缓存自动更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对象存储&quot;&gt;&lt;a href=&quot;#对象存储&quot; class=&quot;headerlink&quot; title=&quot;对象存储&quot;&gt;&lt;/a&gt;对象存储&lt;/h1&gt;&lt;p&gt;“对象存储”来源于英文“Object Storage”或“Object-based Storage”&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="对象存储" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>Golang 学习笔记</title>
    <link href="http://yoursite.com/2019/06/02/2019-06-13-Go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/06/02/2019-06-13-Go学习笔记/</id>
    <published>2019-06-02T04:55:14.000Z</published>
    <updated>2019-09-01T02:30:31.539Z</updated>
    
    <content type="html"><![CDATA[<p>Mutex 做匿名字段 相关方法必须 pointer-receiver ，or 因复制导致锁机制失效。<br>（匿名字段，也称嵌入字段，Mutex、接口组合常用，注意方法覆盖问题）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d data</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">d.test(<span class="string">"read"</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">d.test(<span class="string">"write"</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> &#123;</span><br><span class="line">sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *data)</span> <span class="title">test</span> <span class="params">(s <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">d.Lock()</span><br><span class="line"><span class="keyword">defer</span> d.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++&#123;</span><br><span class="line">fmt.Println(s,i)</span><br><span class="line">time.Sleep(<span class="number">3</span>*time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mutex 锁不支持递归，即使在同一gr下也会死锁。</p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ol><li>反射可以将“接口类型变量”转换为“反射类型对象”。</li></ol><ol start="2"><li>反射可以将“反射类型对象”转换为“接口类型变量”。</li><li>如果要修改“反射类型对象”，其值必须是“可写的”。<br>自我描述（self-representation）和监测（examination）。反射机制就是在运行时动态的调用对象的方法和属性，gRPC通过反射实现。</li></ol><p>每个interface变量都有一个对应pair，pair中记录了实际变量的值和类型（value，type）反射就是用来检测存储在接口变量内部(值value；类型concrete type) pair对的一种机制。</p><h2 id="为什么慢？"><a href="#为什么慢？" class="headerlink" title="为什么慢？"></a>为什么慢？</h2><p>Golang reflect慢主要有两个原因</p><p>涉及到内存分配以及后续的GC；</p><p>reflect实现里面有大量的枚举，也就是for循环，比如类型之类的。</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>OO中，接口定义对象的行为；Go中，接口是一组方法签名，当一个类型为接口中所有方法提供定义时，称为实现该接口，与OOP类似，但耦合低，可以通过向上类型转换使编码更一致（函数参数声明为接口，函数定义调用接口方法，具体做什么依赖于运行时传入的实现接口的具体类（当然，Go中是接收该类的方法）。duck typing。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>实现会有运行期开销，最常见于提供包外访问或者预留扩展空间。接口也是一种结构类型，只是编译器加了限制，体现在</p><ol><li>不能由字段</li><li>不能定义自己的方法</li><li>不能实现方法</li><li>可嵌入其他接口<h2 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h2>由上可知，所有类型都实现了空接口（0个方法），都可以向上转型为空接口类型<h2 id="接口的内部表现"><a href="#接口的内部表现" class="headerlink" title="接口的内部表现"></a>接口的内部表现</h2>（K，V）表示，K是接口的基础类型，V是具体类型的值<h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2>类型断言用于提取接口的基础值，语法：i.(T)，如果不接收ok会报错<h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findType</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;  </span><br><span class="line">    <span class="keyword">switch</span> i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">        fmt.Printf(<span class="string">"String: %s\n"</span>, i.(<span class="keyword">string</span>))</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">        fmt.Printf(<span class="string">"Int: %d\n"</span>, i.(<span class="keyword">int</span>))</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">"Unknown type\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>也可以与接口比较，在case语句里边写点调用接口的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Describer <span class="keyword">interface</span> &#123;  </span><br><span class="line">    Describe()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> St <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s St)</span> <span class="title">Describe</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    fmt.Println(<span class="string">"被调用le!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findType</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;  </span><br><span class="line">    <span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> Describer:</span><br><span class="line">        v.Describe()</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">        fmt.Println(<span class="string">"String 变量"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">"unknown type\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    findType(<span class="string">"Naveen"</span>)</span><br><span class="line">    st := St(<span class="string">"我的字符串"</span>)</span><br><span class="line">    findType(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是接口覆盖了type定义的基本类型string</p><h1 id="匿名结构体、匿名类"><a href="#匿名结构体、匿名类" class="headerlink" title="匿名结构体、匿名类"></a>匿名结构体、匿名类</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">strt := <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">name: <span class="string">"Naveen R"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mutex 做匿名字段 相关方法必须 pointer-receiver ，or 因复制导致锁机制失效。&lt;br&gt;（匿名字段，也称嵌入字段，Mutex、接口组合常用，注意方法覆盖问题）&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Lambda 表达式重构 OO 设计模式</title>
    <link href="http://yoursite.com/2019/06/02/2019-06-12-%E4%BD%BF%E7%94%A8%20Lambda%20%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%87%8D%E6%9E%84%20OO%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/06/02/2019-06-12-使用 Lambda 表达式重构 OO 设计模式/</id>
    <published>2019-06-02T04:33:14.000Z</published>
    <updated>2019-10-30T08:36:41.043Z</updated>
    
    <content type="html"><![CDATA[<p>新的语言特性往往借鉴了已有的设计模式，比如 Java5 中引入了 for-each 循环，由于它的稳定和简洁，已经替代了很多显式使用迭代器的情形。Java 7 中推出的菱形操作符（&lt;&gt;）让程序员在创建实例时无需显式使用泛型。<br>很多设计模式与面向对象结合起来非常臃肿，Lambda 表达式通过<strong>消除封装在类中的僵化代码</strong>为这些设计模式面临的问题提供了解决方案。</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>使用工厂模式，无需向客户暴露实例化的逻辑就能完成对象的创建。向工厂提交“订单”，工厂通过多态返回给“产品”。如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFactory</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title">createProduct</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">            <span class="keyword">switch</span>(name)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"loan"</span>: <span class="keyword">return</span> <span class="keyword">new</span> Loan();</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"stock"</span>: <span class="keyword">return</span> <span class="keyword">new</span> Stock();</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"bond"</span>: <span class="keyword">return</span> <span class="keyword">new</span> Bond();</span><br><span class="line">                <span class="keyword">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No such product "</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>我们可以像引用构造方法一样引用函数，由此，可通过 Map，将产品名映射到对应的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">private</span> Map&lt;String, Supplier&lt;Product&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        map.put(<span class="string">"loan"</span>, Loan::<span class="keyword">new</span>);</span><br><span class="line">        map.put(<span class="string">"stock"</span>, Stock::<span class="keyword">new</span>);</span><br><span class="line">        map.put(<span class="string">"bond"</span>, Bond::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>之后，利用 Map 来实例化不同的产品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title">createProductLambda</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">            Supplier&lt;Product&gt; p = map.get(name);</span><br><span class="line">            <span class="keyword">if</span>(p != <span class="keyword">null</span>) <span class="keyword">return</span> p.get();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No such product "</span> + name);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="模版方法"><a href="#模版方法" class="headerlink" title="模版方法"></a>模版方法</h1><p>当我们已有一个算法框架，但需要对其进行部分改动以使用时，可以使用模版方法。<br>举个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineBanking</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processCustomer</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        Customer c = Database.getCustomerWithId(id);</span><br><span class="line">        makeCustomerHappy(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeCustomerHappy</span><span class="params">(Customer c)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>processCustomer 搭建了在线银行算法的框架，不同的银行继承 OnlineBanking 并提供不同实现。<br>如何使用 Lambda 表达式重构呢？向 processCustomer 方法引入了第二个参数，它是一个 Consumer<Customer> 类型的参数，与前文定义的 makeCustomerHappy 的特征保持一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processCustomer</span><span class="params">(<span class="keyword">int</span> id, Consumer&lt;Customer&gt; makeCustomerHappy)</span></span>&#123;</span><br><span class="line">        Customer c = Database.getCustomerWithId(id);</span><br><span class="line">        makeCustomerHappy.accept(c);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>之后，只要向新建的 OnlineBanking 类传递 Lambda 表达式即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> OnlineBankingLambda().processCustomer(<span class="number">1337</span>, (Customer c) -&gt; System.out.println(<span class="string">"Hello!"</span>));</span><br></pre></td></tr></table></figure><h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>策略模式包含三部分：</p><ul><li><p>一个代表算法的接口</p></li><li><p>若干个算法的不同的具体实现</p></li><li><p>若干个使用策略对象的用户<br>注意到具体实现类实现了函数接口，我们可以使用 Lambda表达式来代替策略模式的第二部分，从而达到简化的目的。<br>如下所示</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Part1 函数接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ValidationStrategy</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//Part2 接口的实现</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IsAllLowerCase</span> <span class="keyword">implements</span> <span class="title">ValidationStrategy</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> s.matches(<span class="string">"[a-z]+"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IsNumeric</span> <span class="keyword">implements</span> <span class="title">ValidationStrategy</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> s.matches(<span class="string">"\\d+"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//Part3 接口的调用</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Validator</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ValidationStrategy strategy;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Validator</span><span class="params">(ValidationStrategy v)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.strategy = v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> strategy.execute(s); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line">Validator v1 = <span class="keyword">new</span> Validator(<span class="keyword">new</span> IsNumeric());</span><br><span class="line">        System.out.println(v1.validate(<span class="string">"aaaa"</span>));</span><br><span class="line">        Validator v2 = <span class="keyword">new</span> Validator(<span class="keyword">new</span> IsAllLowerCase ());</span><br><span class="line">        System.out.println(v2.validate(<span class="string">"bbbb"</span>));</span><br></pre></td></tr></table></figure><p>经过重构后，如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Part3 调用</span></span><br><span class="line">Validator v3 = <span class="keyword">new</span> Validator((String s) -&gt; s.matches(<span class="string">"\\d+"</span>));</span><br><span class="line">        System.out.println(v3.validate(<span class="string">"aaaa"</span>));</span><br><span class="line">        Validator v4 = <span class="keyword">new</span> Validator((String s) -&gt; s.matches(<span class="string">"[a-z]+"</span>));</span><br><span class="line">        System.out.println(v4.validate(<span class="string">"bbbb"</span>));</span><br></pre></td></tr></table></figure><h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><p>责任链模式是一种创建处理对象序列（比如操作序列）的通用方案。一个处理对象可能需要在完成一些工作之后，将结果传递给另一个对象，这个对象接着做一些工作，再转交给下一个处理对象，以此类推。</p><p>传统的方式需要在类中设置 successor 并手工设置，然后从第一个 Handler 开始调用，如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义代表处理对象的抽象类 ProcessingObject</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessingObject</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> ProcessingObject&lt;T&gt; successor;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(ProcessingObject&lt;T&gt; successor)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.successor = successor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">handle</span><span class="params">(T input)</span> </span>&#123;</span><br><span class="line">            T r = handleWork(input);</span><br><span class="line">            <span class="keyword">if</span> (successor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> successor.handle(r);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> T <span class="title">handleWork</span><span class="params">(T input)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//具体类1</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderTextProcessing</span></span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">ProcessingObject</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">handleWork</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"From Raoul, Mario and Alan: "</span> + text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//具体类2</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellCheckerProcessing</span></span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">ProcessingObject</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">handleWork</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> text.replaceAll(<span class="string">"labda"</span>, <span class="string">"lambda"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//手工设置并调用</span></span><br><span class="line">ProcessingObject&lt;String&gt; p1 = <span class="keyword">new</span> HeaderTextProcessing();</span><br><span class="line">        ProcessingObject&lt;String&gt; p2 = <span class="keyword">new</span> SpellCheckerProcessing();</span><br><span class="line">        p1.setSuccessor(p2);</span><br></pre></td></tr></table></figure><p>现在可以将处理对象作为函数的一个实例，如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UnaryOperator&lt;String&gt; headerProcessing =</span><br><span class="line">               (String text) -&gt; <span class="string">"From Raoul, Mario and Alan: "</span> + text;</span><br><span class="line">       UnaryOperator&lt;String&gt; spellCheckerProcessing =</span><br><span class="line">               (String text) -&gt; text.replaceAll(<span class="string">"labda"</span>, <span class="string">"lambda"</span>);</span><br><span class="line">       Function&lt;String, String&gt; pipeline = headerProcessing.andThen(spellCheckerProcessing);</span><br><span class="line">       String result2 = pipeline.apply(<span class="string">"Aren't labdas really sexy?!!"</span>);</span><br><span class="line">       System.out.println(result2);</span><br></pre></td></tr></table></figure><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>某些事件发生时（比如状态转变），如果一个对象（通常我们称之为主题）需要自动地通知其他多个对象（称为观察者），就会采用该方案。在 GUI 设计中中很常用（类似 I/O 中的事件通知，当然，也可以使用轮询也就是 <code>While(true){...}</code>来实现，这在 I/O 中对应同步阻塞），比如，按下按钮，触发某事件。在这个过程中，Subject 对应按钮，他告知观察者“我被按下啦”，然后观察者通知所有的具体观察者，让他们去处理具体的业务逻辑。<br>从而，观察者模式可以分为三部分，Subject、Observer和concreteObserver。其中，Subject的子类实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Feed</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.observers.add(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(String tweet)</span> </span>&#123;</span><br><span class="line">            observers.forEach(o -&gt; o.inform(tweet));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">Feed f = <span class="keyword">new</span> Feed();</span><br><span class="line">        f.registerObserver(<span class="keyword">new</span> NYTimes());</span><br><span class="line">        f.registerObserver(<span class="keyword">new</span> Guardian());</span><br><span class="line">        f.registerObserver(<span class="keyword">new</span> LeMonde());</span><br><span class="line">        f.notifyObservers(<span class="string">"The queen said her favourite book is Java 8 in Action!"</span>);</span><br></pre></td></tr></table></figure><p>这里我们用 foreach 和 Lambda 表达式简化了操作。实际上，我们无需显式地实例化三个观察者对象，直接传递 Lambda 表达式表示需要执行的行为即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Feed feedLambda = <span class="keyword">new</span> Feed();</span><br><span class="line"></span><br><span class="line">        feedLambda.registerObserver((String tweet) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(tweet != <span class="keyword">null</span> &amp;&amp; tweet.contains(<span class="string">"money"</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">"Breaking news in NY! "</span> + tweet); &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        feedLambda.registerObserver((String tweet) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(tweet != <span class="keyword">null</span> &amp;&amp; tweet.contains(<span class="string">"queen"</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">"Yet another news in London... "</span> + tweet); &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        feedLambda.notifyObservers(<span class="string">"Money money money, give me money!"</span>);</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从上文中我们可以看出，当要执行的动作都很简单时，我们可以通过 Lambda 表达式方便地消除僵化代码，但当逻辑很复杂时，类依然是更有用的方式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新的语言特性往往借鉴了已有的设计模式，比如 Java5 中引入了 for-each 循环，由于它的稳定和简洁，已经替代了很多显式使用迭代器的情形。Java 7 中推出的菱形操作符（&amp;lt;&amp;gt;）让程序员在创建实例时无需显式使用泛型。&lt;br&gt;很多设计模式与面向对象结合起来
      
    
    </summary>
    
    
    
      <category term="重构" scheme="http://yoursite.com/tags/%E9%87%8D%E6%9E%84/"/>
    
      <category term="Lambda" scheme="http://yoursite.com/tags/Lambda/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发计数器探秘</title>
    <link href="http://yoursite.com/2019/06/02/2019-05-29-%E5%B9%B6%E5%8F%91%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    <id>http://yoursite.com/2019/06/02/2019-05-29-并发计数器/</id>
    <published>2019-06-02T04:33:14.000Z</published>
    <updated>2019-09-01T02:35:00.926Z</updated>
    
    <content type="html"><![CDATA[<p>计数可以说是计算机硬件最常见的功能，CPU 可以通过 CAS（Compare and swap）算法保证并发下数据的准确性，包括 IA32、Space 在内的 CPU 架构中采用的都是CAS指令，其语义为“<strong>我认为V的值应该为A，如果是，那么将V的值更新为B，否则不修改并告诉V的值实际为多少</strong>”，本质上是由现代CPU在硬件级实现的原子指令，允许进行无阻塞，多线程的数据操作同时兼顾了安全性以及效率，是一种<strong>乐观锁</strong>技术。</p><p>具体来说就是，CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。常用于在多线程编程中实现不被打断的数据交换操作，从而避免多线程同时改写某一数据时由于执行顺序不确定性以及中断的不可预知性产生的数据不一致问题。</p><p>对照到 Java 中，java.util.concurrent.atomic 中的Atomic* 通过 Unsafe 类调用 JVM 提供的 CAS 操作使用了这项技术，这些类又在 java.util.concurrent 包中的其他类中广泛使用。JDK1.7 源码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;  </span><br><span class="line">            <span class="keyword">long</span> current = get();  </span><br><span class="line">            <span class="keyword">long</span> next = current + <span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">if</span> (compareAndSet(current, next))  </span><br><span class="line">                <span class="keyword">return</span> current;  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapLong(<span class="keyword">this</span>, valueOffset, expect, update);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，<code>get()</code>方法获取当前的 long 值，然后自增，随后自旋判断新值与当前值，如果成功就返回，否则返回1. 注意到调用的是 unsafe 方法中的 <code>compareAndSwapLong()</code>,这对应x86 CPU 上的 <code>LOCK CMPXCHG</code> ，而在 JDK1.8 中，使用 <code>getAndAddLong()</code> 完成 <code>getAndIncrement</code>，这对应 x86 CPU 上的 <code>LOCK XADD</code> 指令。</p><h1 id="ABA"><a href="#ABA" class="headerlink" title="ABA"></a>ABA</h1><p>从上文可以发现一个问题：如果V的值多次改变，且改变过程中起始数值一样，那么 CAS 操作依然和 V 值没有改变的情况一样，这就是 ABA 问题。<br>具体来说，</p><ul><li><p>线程1 试图改变 value1 的值，从0改为1</p></li><li><p>线程2 抢占 value1，从0改为2，又改为0</p></li><li><p>线程1 得到 vaule，发现没有改过，又改为1</p></li></ul><p>整个过程看起来没什么不对，毕竟殊途同归，但在使用指针操作一些并发数据结构时容易出现问题。<br>为了解决这个方案，可以采用 ABA’ 策略，添加额外的标记来记录修改，AtomicStampedReference 中的 compareAndSet 方法不仅会检查当前引用是否等于预期引用，而且会检查当前标志是否等于预期标志，全部相等才以原子方式将该引用和该标志的值设置为给定的更新值。</p><p>此外，如果 CAS 一直不成功，就会长期占用 CPU 时间，因此，JUC 中有些地方 如 BlockingQueue 的 SynchronousQueue 就限制了 CAS 的次数。<br>CAS 也只能针对一个共享变量操作，有多个共享变量只能用锁，或者把多个变量搞成一个变量。</p><p>因此，在 JDK1.8 中，提供了 java.util.concurrency.atomic.LongAdder 类，根据文档，其性能高于 AtomicLong，一般情况下可直接替代 AtomicLong 使用，只是 LongAdder 没有返回值，当需要返回值的时候，还是要用 AtomicLong 。Netty 中也有封装这两个类。</p><p>那么，LongAdder 是如何获得远高于 AtomicLong 的性能的呢？</p><ol><li><p>利用 Cell 减少并发修改时的冲突<br>在 LongAdder 父类 Striped64 中有 长度为2的 n 次方的volatile Cell[] cells，每个 cell 填充了一个  @Contended 的 Long 字段来避免伪共享问题。<br>假共享( false sharing)是指一种错误的工程实践,在同一块缓存线中存放多个互相独立且被多个CPU访问的变量，当某个CPU改变了其中一个变量的值时,迫使其他CPU的本地高速缓存中对应的相同缓存线无效化。这种工程实践会显著地限制并行系统的可扩展性。</p></li><li><p>使用 ThreadLocalRandom 替代 Random</p></li><li><p>longAccumulate 使用 UNSAFE.compareAndSwapLong 完成自旋，且在初次 cas 方式失败的情况下(说明多个线程同时想更新这个值)，尝试将这个值分隔成多个 Cell，让这些竞争的线程只负责更新自己所属的 Cell从而将竞争压力分散开。</p></li></ol><h1 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h1><ol><li>在 LongAdder 出现之前， Java 性能监控框架 dropwizard/metrics 就做了类似的事情，而在 metrics 的最新版本中，其已经使用 Jdk1.8 的 LongAdder 替换掉了自己的轮子。</li></ol><p>2.并发容器框架 JCTool 中也提供了类似实现，文档描述如下。</p><blockquote><p>An auto-resizing table of longs, supporting low-contention CAS operations.Updates are done with CAS’s to no particular table element.The intent is to support highly scalable counters, r/w locks, and other structures where the updates are associative, loss-free (no-brainer), and otherwise happen at such a high volume that the cache contention for CAS’ing a single word is unacceptable.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计数可以说是计算机硬件最常见的功能，CPU 可以通过 CAS（Compare and swap）算法保证并发下数据的准确性，包括 IA32、Space 在内的 CPU 架构中采用的都是CAS指令，其语义为“&lt;strong&gt;我认为V的值应该为A，如果是，那么将V的值更新为B，
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="计数器" scheme="http://yoursite.com/tags/%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Reactor 模型及其在 Netty 中的应用</title>
    <link href="http://yoursite.com/2019/05/31/2019-08-01-Netty%20%E7%9A%84%20Readtor%20%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/05/31/2019-08-01-Netty 的 Readtor 模型及应用/</id>
    <published>2019-05-31T03:02:14.000Z</published>
    <updated>2019-10-30T08:33:12.069Z</updated>
    
    <content type="html"><![CDATA[<p>EventLoop 是 Netty 基于 Reactor 模型的思想进行实现，在读 EventLoop 的源码之前，有必要了解这个东西。<br>wiki: </p><blockquote><p>The reactor design pattern is an event handling pattern for handling service requests delivered concurrently to a service handler by one or more inputs. The service handler then demultiplexes the incoming requests and dispatches them synchronously to the associated request handlers.</p></blockquote><p>也不复杂，其核心思想就是<strong>将关注的 I/O 事件注册到多路复用器上，一旦有 I/O 事件触发，将事件分发到事件处理器中，执行就绪 I/O 事件对应的处理函数中。</strong>模型中有三个重要的组件：</p><ol><li><p>多路复用器：由操作系统提供接口，Linux 提供的 I/O 复用接口有select、poll、epoll 。</p></li><li><p>事件分离器：将多路复用器返回的就绪事件分发到事件处理器中。</p></li><li><p>事件处理器：处理就绪事件处理函数。</p></li></ol><h1 id="Reactor-的三种实现"><a href="#Reactor-的三种实现" class="headerlink" title="Reactor 的三种实现"></a>Reactor 的三种实现</h1><ol><li><p>单 Reactor 单线程模型</p></li><li><p>单 Reactor 多线程模型</p></li><li><p>多 Reactor 多线程模型</p></li></ol><p>下边我们来分析</p><h2 id="单-Reactor-单线程模型"><a href="#单-Reactor-单线程模型" class="headerlink" title="单 Reactor 单线程模型"></a>单 Reactor 单线程模型</h2><p><img src="/img/235321555549FA0C8EC19CC77D47169A.jpg" alt=""><br>示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 等待事件到来，分发事件处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reactor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Reactor</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      SelectionKey sk = serverSocket.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">      <span class="comment">// attach Acceptor 处理新连接</span></span><br><span class="line">      sk.attach(<span class="keyword">new</span> Acceptor());</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">​  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">              selector.select();</span><br><span class="line">              Set selected = selector.selectedKeys();</span><br><span class="line">              Iterator it = selected.iterator();</span><br><span class="line">              <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                  it.remove();</span><br><span class="line">                  <span class="comment">//分发事件处理</span></span><br><span class="line">                  dispatch((SelectionKey) (it.next()));</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">          <span class="comment">//do something</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(SelectionKey k)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 若是连接事件获取是acceptor</span></span><br><span class="line">      <span class="comment">// 若是IO读写事件获取是handler</span></span><br><span class="line">      Runnable runnable = (Runnable) (k.attachment());</span><br><span class="line">      <span class="keyword">if</span> (runnable != <span class="keyword">null</span>) &#123;</span><br><span class="line">          runnable.run();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是最基础的单 Reactor 单线程模型。</p><p>Reactor 线程，负责多路分离套接字。</p><p>有新连接到来触发 OP_ACCEPT 事件之后， 交由 Acceptor 进行处理。<br>有 IO 读写事件之后，交给 Handler 处理。<br>Acceptor 主要任务是构造 Handler 。</p><p>在获取到 Client 相关的 SocketChannel 之后，绑定到相应的 Handler 上。对应的 SocketChannel 有读写事件之后，基于 Reactor 分发，Handler 就可以处理了。</p><p>注意，所有的 IO 事件都绑定到 Selector 上，由 Reactor 统一分发。<br>该模型适用于处理器链中业务处理组件能快速完成的场景。不过，这种单线程模型不能充分利用多核资源，所以实际使用的不多。</p><h2 id="单-Reactor-多线程模型"><a href="#单-Reactor-多线程模型" class="headerlink" title="单 Reactor 多线程模型"></a>单 Reactor 多线程模型</h2><p><img src="/img/D0784A26CAE5C4015A0D51697C9753C5.jpg" alt="插图"><br>相对于第一种单线程的模式来说，在处理业务逻辑，也就是获取到 IO 的读写事件之后，交由线程池来处理，这样可以减小主 Reactor 的性能开销，从而更专注的做事件分发工作了，从而提升整个应用的吞吐。</p><p>MultiThreadHandler 示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 多线程处理读写业务逻辑</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiThreadHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> READING = <span class="number">0</span>, WRITING = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> state;</span><br><span class="line">  <span class="keyword">final</span> SocketChannel socket;</span><br><span class="line">  <span class="keyword">final</span> SelectionKey sk;</span><br><span class="line">​</span><br><span class="line">  <span class="comment">//多线程处理业务逻辑</span></span><br><span class="line">  ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MultiThreadHandler</span><span class="params">(SocketChannel socket, Selector sl)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.state = READING;</span><br><span class="line">      <span class="keyword">this</span>.socket = socket;</span><br><span class="line">      sk = socket.register(selector, SelectionKey.OP_READ);</span><br><span class="line">      sk.attach(<span class="keyword">this</span>);</span><br><span class="line">      socket.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (state == READING) &#123;</span><br><span class="line">          read();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == WRITING) &#123;</span><br><span class="line">          write();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//任务异步处理</span></span><br><span class="line">      executorService.submit(() -&gt; process());</span><br><span class="line">​</span><br><span class="line">      <span class="comment">//下一步处理写事件</span></span><br><span class="line">      sk.interestOps(SelectionKey.OP_WRITE);</span><br><span class="line">      <span class="keyword">this</span>.state = WRITING;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//任务异步处理</span></span><br><span class="line">      executorService.submit(() -&gt; process());</span><br><span class="line">​</span><br><span class="line">      <span class="comment">//下一步处理读事件</span></span><br><span class="line">      sk.interestOps(SelectionKey.OP_READ);</span><br><span class="line">      <span class="keyword">this</span>.state = READING;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * task 业务处理</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//do IO ,task,queue something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 #read() 和 #write() 方法中，提交 executorService 线程池，进行处理。</p><h2 id="多-Reactor-多线程模型"><a href="#多-Reactor-多线程模型" class="headerlink" title="多 Reactor 多线程模型"></a>多 Reactor 多线程模型</h2><p><img src="/img/8D476F61A64657CFD90DAC82C7D23D17.jpg" alt="插图"><br>第三种模型比起第二种模型，是将 Reactor 分成两部分：</p><ol><li><p>mainReactor 负责监听 ServerSocketChannel ，用来处理客户端新连接的建立，并将建立的客户端的 SocketChannel 指定注册给 subReactor 。</p></li><li><p>subReactor 维护自己的 Selector ，基于 mainReactor 建立的客户端的 SocketChannel 多路分离 IO 读写事件，读写网络数据。对于业务处理的功能，另外扔给 worker 线程池来完成。<br>MultiWorkThreadAcceptor 示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 多work 连接事件Acceptor,处理连接事件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiWorkThreadAcceptor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">​</span><br><span class="line">  <span class="comment">// cpu线程数相同多work线程</span></span><br><span class="line">  <span class="keyword">int</span> workCount = Runtime.getRuntime().availableProcessors();</span><br><span class="line">  SubReactor[] workThreadHandlers = <span class="keyword">new</span> SubReactor[workCount];</span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">int</span> nextHandler = <span class="number">0</span>;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MultiWorkThreadAcceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      nextHandler = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; workThreadHandlers.length; i++) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              workThreadHandlers[i] = <span class="keyword">new</span> SubReactor();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          SocketChannel c = serverSocket.accept();</span><br><span class="line">          <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;<span class="comment">// 注册读写</span></span><br><span class="line">              <span class="keyword">synchronized</span> (c) &#123;</span><br><span class="line">                  <span class="comment">// 顺序获取SubReactor，然后注册channel </span></span><br><span class="line">                  SubReactor work = workThreadHandlers[nextHandler];</span><br><span class="line">                  work.registerChannel(c);</span><br><span class="line">                  nextHandler++;</span><br><span class="line">                  <span class="keyword">if</span> (nextHandler &gt;= workThreadHandlers.length) &#123;</span><br><span class="line">                      nextHandler = <span class="number">0</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>SubReactor 示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 多work线程处理读写业务逻辑</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubReactor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Selector mySelector;</span><br><span class="line">​</span><br><span class="line">  <span class="comment">//多线程处理业务逻辑</span></span><br><span class="line">  <span class="keyword">int</span> workCount =Runtime.getRuntime().availableProcessors();</span><br><span class="line">  ExecutorService executorService = Executors.newFixedThreadPool(workCount);</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SubReactor</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 每个SubReactor 一个selector </span></span><br><span class="line">      <span class="keyword">this</span>.mySelector = SelectorProvider.provider().openSelector();</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 注册chanel</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> sc</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      sc.register(mySelector, SelectionKey.OP_READ | SelectionKey.OP_CONNECT);</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//每个SubReactor 自己做事件分派处理读写事件</span></span><br><span class="line">              selector.select();</span><br><span class="line">              Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">              Iterator&lt;SelectionKey&gt; iterator = keys.iterator();</span><br><span class="line">              <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                  SelectionKey key = iterator.next();</span><br><span class="line">                  iterator.remove();</span><br><span class="line">                  <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                      read();</span><br><span class="line">                  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">                      write();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">​</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">​</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//任务异步处理</span></span><br><span class="line">      executorService.submit(() -&gt; process());</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//任务异步处理</span></span><br><span class="line">      executorService.submit(() -&gt; process());</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * task 业务处理</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//do IO ,task,queue something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中，我们可以看到：</p><p>mainReactor 主要用来处理网络 IO 连接建立操作，通常，mainReactor 只需要一个，因为它一个线程就可以处理。<br>subReactor 主要和建立起来的客户端的 SocketChannel 做数据交互和事件业务处理操作。通常，subReactor 的个数和 CPU 个数相等，每个 subReactor 独占一个线程来处理。<br>此种模式中，每个模块的工作更加专一，耦合度更低，性能和稳定性也大大的提升，支持的可并发客户端数量可达到上百万级别。<br>关于此种模式的应用，目前有很多优秀的框架已经在应用，比如 Mina 和 Netty 等等。上述中去掉线程池的第三种形式的变种，也是 Netty NIO 的默认模式。</p><h1 id="Netty-中的应用"><a href="#Netty-中的应用" class="headerlink" title="Netty 中的应用"></a>Netty 中的应用</h1><h2 id="NIO-客户端"><a href="#NIO-客户端" class="headerlink" title="NIO 客户端"></a>NIO 客户端</h2><p>Netty NIO 客户端的示例代码中，和 EventLoop 相关的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 EventLoopGroup 对象</span></span><br><span class="line">EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"><span class="comment">// 创建 Bootstrap 对象</span></span><br><span class="line">Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line"><span class="comment">// 设置使用的 EventLoopGroup</span></span><br><span class="line">b.group(group);</span><br></pre></td></tr></table></figure><ul><li>对于 Netty NIO 客户端来说，仅创建一个 EventLoopGroup 。</li></ul><ul><li>一个 EventLoop 可以对应一个 Reactor 。因为 EventLoopGroup 是 EventLoop 的分组，所以对等理解，EventLoopGroup 是一种 Reactor 的分组。</li><li>一个 Bootstrap 的启动，只能发起对一个远程的地址。所以只会使用一个 NIO Selector ，也就是说仅使用一个 Reactor 。即使，我们在声明使用一个 EventLoopGroup ，该 EventLoopGroup 也只会分配一个 EventLoop 对 IO 事件进行处理。</li><li>因为 Reactor 模型主要使用服务端的开发中，如果套用在 Netty NIO 客户端中，到底使用了哪一种模式呢？</li><li>如果只有一个业务线程使用 Netty NIO 客户端，那么可以认为是【单 Reactor 单线程模型】。<ul><li>如果有多个业务线程使用 Netty NIO 客户端，那么可以认为是【单 Reactor 多线程模型】。<br>那么 Netty NIO 客户端是否能够使用【多 Reactor 多线程模型】呢？😈 创建多个 Netty NIO 客户端，连接同一个服务端。那么多个 Netty 客户端就可以认为符合多 Reactor 多线程模型了。<br>一般情况下，我们不会这么干。</li></ul></li></ul><p>当然，实际也有这样的示例。例如 Dubbo 或 Motan 这两个 RPC 框架，支持通过配置，同一个 Consumer 对同一个 Provider 实例同时建立多个客户端连接。</p><h2 id="NIO-服务端"><a href="#NIO-服务端" class="headerlink" title="NIO 服务端"></a>NIO 服务端</h2><p> Netty NIO 服务端的示例代码中，和 EventLoop 相关的代码：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 创建两个 EventLoopGroup 对象</span></span><br><span class="line">EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>); <span class="comment">// 创建 boss 线程组 用于服务端接受客户端的连接</span></span><br><span class="line">EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">// 创建 worker 线程组 用于进行 SocketChannel 的数据读写</span></span><br><span class="line"><span class="comment">// 创建 ServerBootstrap 对象</span></span><br><span class="line">ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"><span class="comment">// 设置使用的 EventLoopGroup</span></span><br><span class="line">b.group(bossGroup, workerGroup);</span><br></pre></td></tr></table></figure><br>对于 Netty NIO 服务端来说，创建两个 EventLoopGroup 。</p><ol><li>bossGroup 对应 Reactor 模式的 mainReactor ，用于服务端接受客户端的连接。比较特殊的是，传入了方法参数 nThreads = 1 ，表示只使用一个 EventLoop ，即只使用一个 Reactor 。这个也符合我们上面提到的，“通常，mainReactor 只需要一个，因为它一个线程就可以处理”。</li></ol><ol start="2"><li>workerGroup 对应 Reactor 模式的 subReactor ，用于进行 SocketChannel 的数据读写。对于 EventLoopGroup ，如果未传递方法参数 nThreads ，表示使用 CPU 个数 Reactor 。这个也符合我们上面提到的，“通常，subReactor 的个数和 CPU 个数相等，每个 subReactor 独占一个线程来处理”。</li></ol><p>因为使用两个 EventLoopGroup ，所以符合【多 Reactor 多线程模型】的多 Reactor 的要求。实际在使用时，workerGroup 在读完数据时，具体的业务逻辑处理，我们会提交到专门的业务逻辑线程池，例如在 Dubbo 或 Motan 这两个 RPC 框架中。这样一来，就完全符合【多 Reactor 多线程模型】。<br>那么可能有胖友可能和我有一样的疑问，bossGroup 如果配置多个线程，是否可以使用多个 mainReactor 呢？我们来分析一波，一个 Netty NIO 服务端同一时间，只能 bind 一个端口，那么只能使用一个 Selector 处理客户端连接事件。又因为，Selector 操作是非线程安全的，所以无法在多个 EventLoop ( 多个线程 )中，同时操作。所以这样就导致，即使 bossGroup 配置多个线程，实际能够使用的也就是一个线程。<br>那么如果一定一定一定要多个 mainReactor 呢？创建多个 Netty NIO 服务端，并绑定多个端口。</p><p>参考资料</p><ol><li><a href="https://my.oschina.net/u/1859679/blog/1844109" target="_blank" rel="noopener">NIO系列——之Reactor模型</a></li><li><a href="https://tech.youzan.com/yi-bu-wang-luo-mo-xing/" target="_blank" rel="noopener">异步网络模型</a> Ps：高端内容，推荐</li><li><a href="https://en.wikipedia.org/wiki/Reactor_pattern" target="_blank" rel="noopener">Reactor_pattern-wiki</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;EventLoop 是 Netty 基于 Reactor 模型的思想进行实现，在读 EventLoop 的源码之前，有必要了解这个东西。&lt;br&gt;wiki: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The reactor design pattern is an event
      
    
    </summary>
    
    
    
      <category term="Netty" scheme="http://yoursite.com/tags/Netty/"/>
    
      <category term="Reactor" scheme="http://yoursite.com/tags/Reactor/"/>
    
      <category term="多路复用" scheme="http://yoursite.com/tags/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java 实现最简单的RPC框架</title>
    <link href="http://yoursite.com/2019/05/29/2019-05-23-JDK%E5%AE%9E%E7%8E%B0%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84RPC%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/05/29/2019-05-23-JDK实现最简单的RPC框架/</id>
    <published>2019-05-29T04:00:00.000Z</published>
    <updated>2019-10-30T08:32:07.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>RPC(Remote Procedure Call)是一个通信协议，允许像调用本地服务一样调用远程服务。<br>根据中间件课程和我的理解，RPC主要由三到四个 Part 组成</p><ol><li>序列化</li><li>通信协议</li><li>代理</li><li>在某些介绍中，还增加了“过程（服务）定位”这一方面，也就是在确定通信方式后，IP、Port及方法名确定的具体过程。原理图如下</li></ol><p><img src="/img/15585879760934.jpg" alt="插图"><br>总的来说，就是Client找到目标（Part4）和Server在建立连接（Part2）后，前者向后者发送参数，底层传输是二进制的，因此需要序列化协议（Part1）。服务端拿到参数后需要反序列化后找到对应方法进行调用（代理过程）（Part3），得到结果后返回给服务器。</p><p>RPC协议有很多，如CORBA，Thrift、Java RMI、Hessian甚至REST API。我就用CORBA 写过一个分布式文件下载系统（课程小项目，写起来很Dirty，我选择它的进化版本 Thrift，哈哈）</p><h1 id="为何要-RPC-？"><a href="#为何要-RPC-？" class="headerlink" title="为何要 RPC ？"></a>为何要 RPC ？</h1><p>但是在上中间件课程的时候我就在想：RPC出现的意义是什么？只要有网络进行类似 C/S 的问题/结果传输就好了呀！<br>最终通过询问老师和思考，得出问题答案：</p><ol><li>简化通信流程</li><li>远程调用时，要能够像本地调用一样方便，让调用者感知不到远程调用的逻辑<br>举个例子，如果直接按照 C/S 模式，需要冗长的编解码协议报文，而且这个过程对于用户不是透明的，需要你自己去做好报文。但通过 RPC，你可以方便简单地调用远程方法，在分布式应用中，因为需要横向扩展，这点就更为重要。</li></ol><p>纠结RPC的组成部分并无意义，因为无论是C/S模式还是RPC，其核心：信息传输，具体工作：编解码和报文交互并没有任何区别。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>所以，下文我将按照之前我的理解写一个最简单的RPC框架。其序列化采用Java自带的序列化方法，通信协议采用基于 TCP 的 Socket 通信，而代理则采用 Java 自带的 JDK 动态代理。</p><p>不同于 Dubbo、ICE 等工业级的RPC框架，我的简单的 RPC 框架分为三部分，</p><ol><li>服务提供者，运行在服务器端，提供服务接口定义与服务实现类。</li><li>服务中心，运行在服务器端，负责将本地服务发布成远程服务，管理远程服务，提供给服务消费者使用。</li><li>服务消费者，运行在客户端，通过远程代理对象调用远程服务。</li></ol><p>定义一个简单的服务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHi</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现这个服务接口，也即服务提供者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hi, "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务中心（服务注册耦合到这里实现）实现TCP监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket();</span><br><span class="line">        server.bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line">        System.out.println(<span class="string">"start server"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 1.监听客户端的TCP连接，接到TCP连接后将其封装成task，由线程池执行</span></span><br><span class="line">                executor.execute(<span class="keyword">new</span> ServiceTask(server.accept()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            server.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>服务中心反射调用服务实现者获取结果，然后序列化返回给客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 2.将客户端发送的码流反序列化成对象，反射调用服务实现者，获取执行结果</span></span><br><span class="line">                input = <span class="keyword">new</span> ObjectInputStream(clent.getInputStream());</span><br><span class="line">                String serviceName = input.readUTF();</span><br><span class="line">                String methodName = input.readUTF();</span><br><span class="line">                Class&lt;?&gt;[] parameterTypes = (Class&lt;?&gt;[]) input.readObject();</span><br><span class="line">                Object[] arguments = (Object[]) input.readObject();</span><br><span class="line">                Class serviceClass = serviceRegistry.get(serviceName);</span><br><span class="line">                <span class="keyword">if</span> (serviceClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(serviceName + <span class="string">" not found"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Method method = serviceClass.getMethod(methodName, parameterTypes);</span><br><span class="line">                Object result = method.invoke(serviceClass.newInstance(), arguments);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 3.将执行结果反序列化，通过socket发送给客户端</span></span><br><span class="line">                output = <span class="keyword">new</span> ObjectOutputStream(clent.getOutputStream());</span><br><span class="line">                output.writeObject(result);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>客户端通过JDK动态代理调用远程方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getRemoteProxyObj</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; serviceInterface, <span class="keyword">final</span> InetSocketAddress addr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.将本地的接口调用转换成JDK的动态代理，在动态代理中实现接口的远程调用</span></span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(serviceInterface.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[]&#123;serviceInterface&#125;,</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">                        ObjectOutputStream output = <span class="keyword">null</span>;</span><br><span class="line">                        ObjectInputStream input = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 2.创建Socket客户端，根据指定地址连接远程服务提供者</span></span><br><span class="line">                            socket = <span class="keyword">new</span> Socket();</span><br><span class="line">                            socket.connect(addr);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 3.将远程服务调用所需的接口类、方法名、参数列表等编码后发送给服务提供者</span></span><br><span class="line">                            output = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">                            output.writeUTF(serviceInterface.getName());</span><br><span class="line">                            output.writeUTF(method.getName());</span><br><span class="line">                            output.writeObject(method.getParameterTypes());</span><br><span class="line">                            output.writeObject(args);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 4.同步阻塞等待服务器返回应答，获取应答后返回</span></span><br><span class="line">                            input = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">                            <span class="keyword">return</span> input.readObject();</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                socket.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (output != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                output.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (input != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                input.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><p>测试类，写好远程调用的信息后通过 Socket 发送给服务端，然后同步阻塞等待服务器 Response</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.创建Socket客户端，根据指定地址连接远程服务提供者</span></span><br><span class="line">                           socket = <span class="keyword">new</span> Socket();</span><br><span class="line">                           socket.connect(addr);</span><br><span class="line"></span><br><span class="line">                           <span class="comment">// 3.将远程服务调用所需的接口类、方法名、参数列表等编码后发送给服务提供者</span></span><br><span class="line">                           output = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">                           output.writeUTF(serviceInterface.getName());</span><br><span class="line">                           output.writeUTF(method.getName());</span><br><span class="line">                           output.writeObject(method.getParameterTypes());</span><br><span class="line">                           output.writeObject(args);</span><br><span class="line"></span><br><span class="line">                           <span class="comment">// 4.同步阻塞等待服务器返回应答，获取应答后返回</span></span><br><span class="line">                           input = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">                           <span class="keyword">return</span> input.readObject();</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Ubique0305/RPC/tree/master/Easy" target="_blank" rel="noopener">完整代码参考Github</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://www.cs.rutgers.edu/~pxk/417/notes/03-rpc.html" target="_blank" rel="noopener">Remote Procedure Calls By Paul Krzyzanowski<br>October 2 2017</a></li><li><a href="https://cloud.tencent.com/developer/article/1057784" target="_blank" rel="noopener">进阶实现（加了 netty 做通信和 spring 做依赖管理）</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;RPC(Remote Procedure Call)是一个通信协议，允许像调用本地服务一样调用远程服务。&lt;br&gt;根据中间件课程和我的理解，R
      
    
    </summary>
    
    
    
      <category term="实践" scheme="http://yoursite.com/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="RPC" scheme="http://yoursite.com/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>代码整洁之道-实践</title>
    <link href="http://yoursite.com/2019/05/18/2019-05-26-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93-%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2019/05/18/2019-05-26-代码整洁之道-实践/</id>
    <published>2019-05-18T04:00:00.000Z</published>
    <updated>2019-10-29T23:42:50.275Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/code-clean-practice.jpg" alt="插图"></p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p> 通过阅读一个 Args 程序，了解整洁代码应该是什么样的（极好的可读性），然后通过与重构之前的肮脏代码对比，了解要改进的地方。最后通过作者的先复杂化导致出现代码变脏，随后建立规程优化代码的历程，了解代码整洁的最佳实践。</p><h1 id="系统使用样例"><a href="#系统使用样例" class="headerlink" title="系统使用样例"></a>系统使用样例</h1><p> 帮助你理解 Args 程序的功能：通过 Args()构造参数创建实体，解析之后可以使用Get* 用参数名称获取参数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Args arg = <span class="keyword">new</span> Args(<span class="string">"l,p#,d*"</span>, args);</span><br><span class="line">        <span class="keyword">boolean</span> logging = arg.getBoolean(<span class="string">'l'</span>);</span><br><span class="line">        <span class="keyword">int</span> port = arg.getInt(<span class="string">'p'</span>);</span><br><span class="line">        String directory = arg.getString(<span class="string">'d'</span>);</span><br><span class="line">        executeApplication(logging, port, directory);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ArgsException e) &#123;</span><br><span class="line">        System.out.printf(<span class="string">"Argument error: %s\n"</span>, e.errorMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Clean-Code"><a href="#Clean-Code" class="headerlink" title="Clean Code"></a>Clean Code</h1><p>上边是一个命令行参数解析程序，我们用这个例子来演示逐步改进，它非常易于使用，只用简单地用输入参数和格式化字符串构造Args类，再向Args对象查询参数值即可。下边是其最终实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.objectmentor.utilities.args.ArgsException.ErrorCode.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Args</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Character, ArgumentMarshaler&gt; marshalers;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Character&gt; argsFound;</span><br><span class="line">    <span class="keyword">private</span> ListIterator&lt;String&gt; currentArgument;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Args</span><span class="params">(String schema, String[] args)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        marshalers = <span class="keyword">new</span> HashMap&lt;Character, ArgumentMarshaler&gt;();</span><br><span class="line">        argsFound = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line"></span><br><span class="line">        parseSchema(schema);</span><br><span class="line">        parseArgumentStrings(Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseSchema</span><span class="params">(String schema)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String element : schema.split(<span class="string">","</span>))</span><br><span class="line">            <span class="keyword">if</span> (element.length() &gt; <span class="number">0</span>)</span><br><span class="line">                parseSchemaElement(element.trim());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseSchemaElement</span><span class="params">(String element)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> elementId = element.charAt(<span class="number">0</span>);</span><br><span class="line">        String elementTail = element.substring(<span class="number">1</span>);</span><br><span class="line">        validateSchemaElementId(elementId);</span><br><span class="line">        <span class="keyword">if</span> (elementTail.length() == <span class="number">0</span>)</span><br><span class="line">            marshalers.put(elementId, <span class="keyword">new</span> BooleanArgumentMarshaler());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (elementTail.equals(<span class="string">"*"</span>))</span><br><span class="line">            marshalers.put(elementId, <span class="keyword">new</span> StringArgumentMarshaler());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (elementTail.equals(<span class="string">"#"</span>))</span><br><span class="line">            marshalers.put(elementId, <span class="keyword">new</span> IntegerArgumentMarshaler());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (elementTail.equals(<span class="string">"##"</span>))</span><br><span class="line">            marshalers.put(elementId, <span class="keyword">new</span> DoubleArgumentMarshaler());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (elementTail.equals(<span class="string">"[*]"</span>))</span><br><span class="line">            marshalers.put(elementId, <span class="keyword">new</span> StringArrayArgumentMarshaler());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgsException(INVALID_ARGUMENT_FORMAT, elementId, elementTail);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateSchemaElementId</span><span class="params">(<span class="keyword">char</span> elementId)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Character.isLetter(elementId))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgsException(INVALID_ARGUMENT_NAME, elementId, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseArgumentStrings</span><span class="params">(List&lt;String&gt; argsList)</span> <span class="keyword">throws</span> ArgsException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (currentArgument = argsList.listIterator(); currentArgument.hasNext();)</span><br><span class="line">        &#123;</span><br><span class="line">            String argString = currentArgument.next();</span><br><span class="line">            <span class="keyword">if</span> (argString.startsWith(<span class="string">"-"</span>)) &#123;</span><br><span class="line">                parseArgumentCharacters(argString.substring(<span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                currentArgument.previous();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseArgumentCharacters</span><span class="params">(String argChars)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argChars.length(); i++)</span><br><span class="line">            parseArgumentCharacter(argChars.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseArgumentCharacter</span><span class="params">(<span class="keyword">char</span> argChar)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        ArgumentMarshaler m = marshalers.get(argChar);</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgsException(UNEXPECTED_ARGUMENT, argChar, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            argsFound.add(argChar);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                m.set(currentArgument);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ArgsException e) &#123;</span><br><span class="line">                e.setErrorArgumentId(argChar);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">has</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> argsFound.contains(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextArgument</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentArgument.nextIndex();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BooleanArgumentMarshaler.getValue(marshalers.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringArgumentMarshaler.getValue(marshalers.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IntegerArgumentMarshaler.getValue(marshalers.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DoubleArgumentMarshaler.getValue(marshalers.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getStringArray(<span class="keyword">char</span> arg) &#123;</span><br><span class="line">        <span class="keyword">return</span> StringArrayArgumentMarshaler.getValue(marshalers.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArgumentMarshaler-接口"><a href="#ArgumentMarshaler-接口" class="headerlink" title="ArgumentMarshaler 接口"></a>ArgumentMarshaler 接口</h2><p>很明显 ArgumentMarshaler 接口在 Map 中充当 Value，他的接口实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArgumentMarshaler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(Iterator&lt;String&gt; currentArgument)</span> <span class="keyword">throws</span> ArgsException</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//BooleanArgumentMarshaler.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BooleanArgumentMarshaler</span> <span class="keyword">implements</span> <span class="title">ArgumentMarshaler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> booleanValue = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(Iterator&lt;String&gt; currentArgument)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        booleanValue = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getValue</span><span class="params">(ArgumentMarshaler am)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (am != <span class="keyword">null</span> &amp;&amp; am <span class="keyword">instanceof</span> BooleanArgumentMarshaler)</span><br><span class="line">            <span class="keyword">return</span> ((BooleanArgumentMarshaler) am).booleanValue;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//StringArgumentMarshaler.java</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.objectmentor.utilities.args.ArgsException.ErrorCode.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringArgumentMarshaler</span> <span class="keyword">implements</span> <span class="title">ArgumentMarshaler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String stringValue = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(Iterator&lt;String&gt; currentArgument)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stringValue = currentArgument.next();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgsException(MISSING_STRING);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(ArgumentMarshaler am)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (am != <span class="keyword">null</span> &amp;&amp; am <span class="keyword">instanceof</span> StringArgumentMarshaler)</span><br><span class="line">            <span class="keyword">return</span> ((StringArgumentMarshaler) am).stringValue;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArgsException"><a href="#ArgsException" class="headerlink" title="ArgsException"></a>ArgsException</h2><p>除此之外，还有ArgsException的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.objectmentor.utilities.args.ArgsException.ErrorCode.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> errorArgumentId = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">private</span> String errorParameter = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> ErrorCode errorCode = OK;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArgsException</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArgsException</span><span class="params">(String message)</span> </span>&#123;<span class="keyword">super</span>(message);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArgsException</span><span class="params">(ErrorCode errorCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArgsException</span><span class="params">(ErrorCode errorCode, String errorParameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">        <span class="keyword">this</span>.errorParameter = errorParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArgsException</span><span class="params">(ErrorCode errorCode,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">char</span> errorArgumentId, String errorParameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">        <span class="keyword">this</span>.errorParameter = errorParameter;</span><br><span class="line">        <span class="keyword">this</span>.errorArgumentId = errorArgumentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getErrorArgumentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorArgumentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorArgumentId</span><span class="params">(<span class="keyword">char</span> errorArgumentId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorArgumentId = errorArgumentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorParameter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorParameter</span><span class="params">(String errorParameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorParameter = errorParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorCode <span class="title">getErrorCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorCode</span><span class="params">(ErrorCode errorCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">errorMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (errorCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> OK:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"TILT: Should not get here."</span>;</span><br><span class="line">            <span class="keyword">case</span> UNEXPECTED_ARGUMENT:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Argument -%c unexpected."</span>, errorArgumentId);</span><br><span class="line">            <span class="keyword">case</span> MISSING_STRING:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Could not find string parameter for -%c."</span>,</span><br><span class="line">                                errorArgumentId);</span><br><span class="line">            <span class="keyword">case</span> INVALID_INTEGER:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Argument -%c expects an integer but was '%s'."</span>,</span><br><span class="line">                                errorArgumentId, errorParameter);</span><br><span class="line">            <span class="keyword">case</span> MISSING_INTEGER:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Could not find integer parameter for -%c."</span>,</span><br><span class="line">                                errorArgumentId);</span><br><span class="line">            <span class="keyword">case</span> INVALID_DOUBLE:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Argument -%c expects a double but was '%s'."</span>,</span><br><span class="line">                                errorArgumentId, errorParameter);</span><br><span class="line">            <span class="keyword">case</span> MISSING_DOUBLE:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Could not find double parameter for -%c."</span>,</span><br><span class="line">                                errorArgumentId);</span><br><span class="line">            <span class="keyword">case</span> INVALID_ARGUMENT_NAME:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"'%c' is not a valid argument name."</span>,</span><br><span class="line">                                errorArgumentId);</span><br><span class="line">            <span class="keyword">case</span> INVALID_ARGUMENT_FORMAT:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"'%s' is not a valid argument format."</span>,</span><br><span class="line">                                errorParameter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> ErrorCode &#123;</span><br><span class="line">        OK, INVALID_ARGUMENT_FORMAT, UNEXPECTED_ARGUMENT, INVALID_ARGUMENT_NAME,</span><br><span class="line">        MISSING_STRING,</span><br><span class="line">        MISSING_INTEGER, INVALID_INTEGER,</span><br><span class="line">        MISSING_DOUBLE, INVALID_DOUBLE&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="脏代码"><a href="#脏代码" class="headerlink" title="脏代码"></a>脏代码</h1><p>可以看出，代码足够整洁————你可以从第一行看到最后一行，在没有注释的情况下基本理解其含义。但在一开始，代码很肮脏，如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Args</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String schema;</span><br><span class="line">    <span class="keyword">private</span> String[] args;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Character&gt; unexpectedArguments = <span class="keyword">new</span> TreeSet&lt;Character&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Character, Boolean&gt; booleanArgs =</span><br><span class="line">    <span class="keyword">new</span> HashMap&lt;Character, Boolean&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Character, String&gt; stringArgs = <span class="keyword">new</span> HashMap&lt;Character, String&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Character, Integer&gt; intArgs = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Character&gt; argsFound = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentArgument;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> errorArgumentId = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">private</span> String errorParameter = <span class="string">"TILT"</span>;</span><br><span class="line">    <span class="keyword">private</span> ErrorCode errorCode = ErrorCode.OK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> ErrorCode &#123;</span><br><span class="line">        OK, MISSING_STRING, MISSING_INTEGER, INVALID_INTEGER, UNEXPECTED_ARGUMENT&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Args</span><span class="params">(String schema, String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.schema = schema;</span><br><span class="line">        <span class="keyword">this</span>.args = args;</span><br><span class="line">        valid = parse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">parse</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (schema.length() == <span class="number">0</span> &amp;&amp; args.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        parseSchema();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            parseArguments();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArgsException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> valid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">parseSchema</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String element : schema.split(<span class="string">","</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String trimmedElement = element.trim();</span><br><span class="line">                parseSchemaElement(trimmedElement);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseSchemaElement</span><span class="params">(String element)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> elementId = element.charAt(<span class="number">0</span>);</span><br><span class="line">        String elementTail = element.substring(<span class="number">1</span>);</span><br><span class="line">        validateSchemaElementId(elementId);</span><br><span class="line">        <span class="keyword">if</span> (isBooleanSchemaElement(elementTail))</span><br><span class="line">            parseBooleanSchemaElement(elementId);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isStringSchemaElement(elementTail))</span><br><span class="line">            parseStringSchemaElement(elementId);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isIntegerSchemaElement(elementTail)) &#123;</span><br><span class="line">            parseIntegerSchemaElement(elementId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParseException(</span><br><span class="line">                    String.format(<span class="string">"Argument: %c has invalid format: %s."</span>,</span><br><span class="line">                    elementId, elementTail), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateSchemaElementId</span><span class="params">(<span class="keyword">char</span> elementId)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Character.isLetter(elementId)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParseException(</span><br><span class="line">                    <span class="string">"Bad character:"</span> + elementId + <span class="string">"in Args format: "</span> + schema, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseBooleanSchemaElement</span><span class="params">(<span class="keyword">char</span> elementId)</span> </span>&#123;</span><br><span class="line">        booleanArgs.put(elementId, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseIntegerSchemaElement</span><span class="params">(<span class="keyword">char</span> elementId)</span> </span>&#123;</span><br><span class="line">        intArgs.put(elementId, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseStringSchemaElement</span><span class="params">(<span class="keyword">char</span> elementId)</span> </span>&#123;</span><br><span class="line">        stringArgs.put(elementId, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isStringSchemaElement</span><span class="params">(String elementTail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elementTail.equals(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBooleanSchemaElement</span><span class="params">(String elementTail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elementTail.length() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isIntegerSchemaElement</span><span class="params">(String elementTail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elementTail.equals(<span class="string">"#"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">parseArguments</span><span class="params">()</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (currentArgument = <span class="number">0</span>; currentArgument &lt; args.length; currentArgument++)</span><br><span class="line">        &#123;</span><br><span class="line">            String arg = args[currentArgument];</span><br><span class="line">            parseArgument(arg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseArgument</span><span class="params">(String arg)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg.startsWith(<span class="string">"-"</span>))</span><br><span class="line">            parseElements(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseElements</span><span class="params">(String arg)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arg.length(); i++)</span><br><span class="line">            parseElement(arg.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseElement</span><span class="params">(<span class="keyword">char</span> argChar)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (setArgument(argChar))</span><br><span class="line">            argsFound.add(argChar);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            unexpectedArguments.add(argChar);</span><br><span class="line">        errorCode = ErrorCode.UNEXPECTED_ARGUMENT;</span><br><span class="line">        valid = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">setArgument</span><span class="params">(<span class="keyword">char</span> argChar)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isBooleanArg(argChar))</span><br><span class="line">            setBooleanArg(argChar, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isStringArg(argChar))</span><br><span class="line">            setStringArg(argChar);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isIntArg(argChar))</span><br><span class="line">            setIntArg(argChar);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isIntArg</span><span class="params">(<span class="keyword">char</span> argChar)</span> </span>&#123;<span class="keyword">return</span> intArgs.containsKey(argChar);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setIntArg</span><span class="params">(<span class="keyword">char</span> argChar)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        currentArgument++;</span><br><span class="line">        String parameter = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            parameter = args[currentArgument];</span><br><span class="line">            intArgs.put(argChar, <span class="keyword">new</span> Integer(parameter));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            valid = <span class="keyword">false</span>;</span><br><span class="line">            errorArgumentId = argChar;</span><br><span class="line">            errorCode = ErrorCode.MISSING_INTEGER;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgsException();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            valid = <span class="keyword">false</span>;</span><br><span class="line">            errorArgumentId = argChar;</span><br><span class="line">            errorParameter = parameter;</span><br><span class="line">            errorCode = ErrorCode.INVALID_INTEGER;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgsException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setStringArg</span><span class="params">(<span class="keyword">char</span> argChar)</span> <span class="keyword">throws</span> ArgsException </span>&#123;</span><br><span class="line">        currentArgument++;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stringArgs.put(argChar, args[currentArgument]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            valid = <span class="keyword">false</span>;</span><br><span class="line">            errorArgumentId = argChar;</span><br><span class="line">            errorCode = ErrorCode.MISSING_STRING;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgsException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isStringArg</span><span class="params">(<span class="keyword">char</span> argChar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringArgs.containsKey(argChar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setBooleanArg</span><span class="params">(<span class="keyword">char</span> argChar, <span class="keyword">boolean</span> value)</span> </span>&#123;</span><br><span class="line">        booleanArgs.put(argChar, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBooleanArg</span><span class="params">(<span class="keyword">char</span> argChar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booleanArgs.containsKey(argChar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cardinality</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> argsFound.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">usage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (schema.length() &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"-["</span> + schema + <span class="string">"]"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">errorMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (errorCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> OK:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"TILT: Should not get here."</span>);</span><br><span class="line">            <span class="keyword">case</span> UNEXPECTED_ARGUMENT:</span><br><span class="line">                <span class="keyword">return</span> unexpectedArgumentMessage();</span><br><span class="line">            <span class="keyword">case</span> MISSING_STRING:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Could not find string parameter for -%c."</span>,</span><br><span class="line">                                errorArgumentId);</span><br><span class="line">            <span class="keyword">case</span> INVALID_INTEGER:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Argument -%c expects an integer but was '%s'."</span>,</span><br><span class="line">                                errorArgumentId, errorParameter);</span><br><span class="line">            <span class="keyword">case</span> MISSING_INTEGER:</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">"Could not find integer parameter for -%c."</span>,</span><br><span class="line">                                errorArgumentId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">unexpectedArgumentMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuffer message = <span class="keyword">new</span> StringBuffer(<span class="string">"Argument(s) -"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : unexpectedArguments) &#123;</span><br><span class="line">            message.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        message.append(<span class="string">" unexpected."</span>);</span><br><span class="line">        <span class="keyword">return</span> message.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">falseIfNull</span><span class="params">(Boolean b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b != <span class="keyword">null</span> &amp;&amp; b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">zeroIfNull</span><span class="params">(Integer i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i == <span class="keyword">null</span> ? <span class="number">0</span> : i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">blankIfNull</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s == <span class="keyword">null</span> ? <span class="string">""</span> : s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blankIfNull(stringArgs.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> zeroIfNull(intArgs.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> falseIfNull(booleanArgs.get(arg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">has</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> argsFound.contains(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> valid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 显然，这段代码需要打磨————TILT之类名称奇怪的字符串、HashSet 和 TreeSets，还有奇怪的 try-catch-finally 块。产生这些东西的原因是作者在一开始的只支持 Boolean 类型的代码上强行添加了 String 和 Integer 类。</p><h1 id="如何破坏"><a href="#如何破坏" class="headerlink" title="如何破坏"></a>如何破坏</h1><p> 通过对比作者的意图、初始目标和最后一段代码，也就是烂的实现，我们可以发现，毁坏程序最好的方法就是<strong>以改动之名大动其结构，有些程序甚至永远不能从这种所谓“改 进”中恢复过来。</strong></p><h1 id="如何改进"><a href="#如何改进" class="headerlink" title="如何改进"></a>如何改进</h1><p> 作者改进烂代码的方法是 TDD，这样来保证系统始终能够运行，不会作出破坏系统的修改，每次修改都保证系统像之前一样工作。</p><p> 具体来说，<strong>用JUnit管理单元测试、用 Fitnesse 完成验收测试</strong>，以 wiki 形式写程。从而，随时能够运行这些测试就说名系统以我们期望的方式工作。</p><p> 个人在改进、重构代码时，也可以采用类似的方法。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>《代码整洁之道》 作者：[美] Robert C·Martin 译者: 韩磊 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/code-clean-practice.jpg&quot; alt=&quot;插图&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt; 通过阅读一个 Args 
      
    
    </summary>
    
    
    
      <category term="Summary" scheme="http://yoursite.com/tags/Summary/"/>
    
      <category term="Clean Code" scheme="http://yoursite.com/tags/Clean-Code/"/>
    
      <category term="实践" scheme="http://yoursite.com/tags/%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>Netty 的内存泄漏检测</title>
    <link href="http://yoursite.com/2019/05/18/2019-07-22-Netty%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%A3%80%E6%B5%8B/"/>
    <id>http://yoursite.com/2019/05/18/2019-07-22-Netty的内存泄漏检测/</id>
    <published>2019-05-18T04:00:00.000Z</published>
    <updated>2019-10-30T03:02:46.404Z</updated>
    
    <content type="html"><![CDATA[<p>自从 Netty 4 开始，对象的生命周期由它们的引用计数( reference counts )管理，而不是由垃圾收集器( garbage collector )管理了，ByteBuf 也不例外，作为对 Java 原生 NIO ByteBuffer 的优秀封装和IO中使用最频繁的数据结构，是最值得注意的。</p><h1 id="ReferenceCounted"><a href="#ReferenceCounted" class="headerlink" title="ReferenceCounted"></a>ReferenceCounted</h1><p>在 Netty 中，通过 io.netty.util.ReferenceCounted 接口，定义了引用计数相关的一系列操作。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReferenceCounted</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得引用计数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Returns the reference count of this object.  If &#123;<span class="doctag">@code</span> 0&#125;, it means this object has been deallocated.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">refCnt</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加引用计数 1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Increases the reference count by &#123;<span class="doctag">@code</span> 1&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ReferenceCounted <span class="title">retain</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加引用计数 n</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Increases the reference count by the specified &#123;<span class="doctag">@code</span> increment&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ReferenceCounted <span class="title">retain</span><span class="params">(<span class="keyword">int</span> increment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等价于调用 `#touch(null)` 方法，即 hint 方法参数传递为 null 。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Records the current access location of this object for debugging purposes.</span></span><br><span class="line"><span class="comment">     * If this object is determined to be leaked, the information recorded by this operation will be provided to you</span></span><br><span class="line"><span class="comment">     * via &#123;<span class="doctag">@link</span> ResourceLeakDetector&#125;.  This method is a shortcut to &#123;<span class="doctag">@link</span> #touch(Object) touch(null)&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ReferenceCounted <span class="title">touch</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出于调试目的,用一个额外的任意的(arbitrary)信息记录这个对象的当前访问地址. 如果这个对象被检测到泄露了, 这个操作记录的信息将通过ResourceLeakDetector 提供.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Records the current access location of this object with an additional arbitrary information for debugging</span></span><br><span class="line"><span class="comment">     * purposes.  If this object is determined to be leaked, the information recorded by this operation will be</span></span><br><span class="line"><span class="comment">     * provided to you via &#123;<span class="doctag">@link</span> ResourceLeakDetector&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ReferenceCounted <span class="title">touch</span><span class="params">(Object hint)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减少引用计数 1 。</span></span><br><span class="line"><span class="comment">     * 当引用计数为 0 时，释放</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Decreases the reference count by &#123;<span class="doctag">@code</span> 1&#125; and deallocates this object if the reference count reaches at</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> 0&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if and only if the reference count became &#123;<span class="doctag">@code</span> 0&#125; and this object has been deallocated</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">release</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减少引用计数 n 。</span></span><br><span class="line"><span class="comment">     *  当引用计数为 0 时，释放</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Decreases the reference count by the specified &#123;<span class="doctag">@code</span> decrement&#125; and deallocates this object if the reference</span></span><br><span class="line"><span class="comment">     * count reaches at &#123;<span class="doctag">@code</span> 0&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if and only if the reference count became &#123;<span class="doctag">@code</span> 0&#125; and this object has been deallocated</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> decrement)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>refCnt()</code>、<code>retain(...)</code>、<code>release(...)</code> 三种方法比较好理解，对引用指数的获取与增减。<br><code>touch(...)</code> 方法主动记录一个 hint 给 ResourceLeakDetector ，方便我们在发现内存泄露有更多的信息进行排查。</p><p><code>ReferenceCounted</code> 的直接子类 / 子接口有两个 ：</p><ul><li><code>io.netty.buffer.ByteBuf</code> 。所以，所有 ByteBuf 实现类，都支持引用计数的操作。</li><li><code>io.netty.util.AbstractReferenceCounted</code> ，ReferenceCounted 的抽象实现类。它的子类实现类，主要是除了 ByteBuf 之外，需要引用计数的操作的类。例如：AbstractHttpData、DefaultFileRegion 等等。</li></ul><h1 id="ByteBuf"><a href="#ByteBuf" class="headerlink" title="ByteBuf"></a>ByteBuf</h1><p>ByteBuf 虽然继承了 ReferenceCounted 接口，但是并未实现相应的方法。而是实现了如下接口</p><ul><li><p><code>AbstractReferenceCountedByteBuf</code> ，实现引用计数的获取与增减的操作。</p></li><li><p><code>WrappedByteBuf</code> ，实现对 ByteBuf 的装饰器实现类。</p></li><li><p><code>WrappedCompositeByteBuf</code> ，实现对 CompositeByteBuf 的装饰器实现类。</p></li><li><p><code>SimpleLeakAwareByteBuf</code>、<code>SimpleLeakAwareCompositeByteBuf</code> ，实现了 SIMPLE 级别的内存泄露检测。</p></li><li><p><code>AdvancedLeakAwareByteBuf</code>、<code>AdvancedLeakAwareCompositeByteBuf</code> ，实现了 ADVANCED 和 PARANOID 级别的内存泄露检测。</p></li><li><p><code>UnreleasableByteBuf</code> ，用于阻止他人对装饰的 ByteBuf 的销毁，避免被错误销毁掉。</p></li></ul><h2 id="创建-LeakAware-ByteBuf-对象"><a href="#创建-LeakAware-ByteBuf-对象" class="headerlink" title="创建 LeakAware ByteBuf 对象"></a>创建 LeakAware ByteBuf 对象</h2><p>ByteBufAllocator 可用于创建 ByteBuf 对象。创建的过程中，它会调用 <code>toLeakAwareBuffer(...)</code> 方法，将 ByteBuf 装饰成 LeakAware ( 可检测内存泄露 )的 ByteBuf 对象，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractByteBufAllocator.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> ByteBuf <span class="title">toLeakAwareBuffer</span><span class="params">(ByteBuf buf)</span> </span>&#123;</span><br><span class="line">    ResourceLeakTracker&lt;ByteBuf&gt; leak;</span><br><span class="line">    <span class="keyword">switch</span> (ResourceLeakDetector.getLevel()) &#123;</span><br><span class="line">        <span class="keyword">case</span> SIMPLE:</span><br><span class="line">            leak = AbstractByteBuf.leakDetector.track(buf);</span><br><span class="line">            <span class="keyword">if</span> (leak != <span class="keyword">null</span>) &#123;</span><br><span class="line">                buf = <span class="keyword">new</span> SimpleLeakAwareByteBuf(buf, leak);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ADVANCED:</span><br><span class="line">        <span class="keyword">case</span> PARANOID:</span><br><span class="line">            leak = AbstractByteBuf.leakDetector.track(buf);</span><br><span class="line">            <span class="keyword">if</span> (leak != <span class="keyword">null</span>) &#123;</span><br><span class="line">                buf = <span class="keyword">new</span> AdvancedLeakAwareByteBuf(buf, leak);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> CompositeByteBuf <span class="title">toLeakAwareBuffer</span><span class="params">(CompositeByteBuf buf)</span> </span>&#123;</span><br><span class="line">    ResourceLeakTracker&lt;ByteBuf&gt; leak;</span><br><span class="line">    <span class="keyword">switch</span> (ResourceLeakDetector.getLevel()) &#123;</span><br><span class="line">        <span class="keyword">case</span> SIMPLE:</span><br><span class="line">            leak = AbstractByteBuf.leakDetector.track(buf);</span><br><span class="line">            <span class="keyword">if</span> (leak != <span class="keyword">null</span>) &#123;</span><br><span class="line">                buf = <span class="keyword">new</span> SimpleLeakAwareCompositeByteBuf(buf, leak);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ADVANCED:</span><br><span class="line">        <span class="keyword">case</span> PARANOID:</span><br><span class="line">            leak = AbstractByteBuf.leakDetector.track(buf);</span><br><span class="line">            <span class="keyword">if</span> (leak != <span class="keyword">null</span>) &#123;</span><br><span class="line">                buf = <span class="keyword">new</span> AdvancedLeakAwareCompositeByteBuf(buf, leak);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>有两个 <code>toLeakAwareBuffer(...)</code> 方法，分别对应带 “Composite” 的 组合 ByteBuf 类，和不带 Composite 普通 ByteBuf 类。因为这个不同，所以前者创建的是 <code>SimpleLeakAwareCompositeByteBuf</code> / <code>AdvancedLeakAwareCompositeByteBuf</code> 对象，后者创建的是 <code>SimpleLeakAwareByteBuf</code> / <code>AdvancedLeakAwareByteBuf</code> 对象。</li><li>当然，从总的逻辑来看，是一致的：<ul><li>SIMPLE 级别，创建 SimpleLeakAwareByteBuf 或 SimpleLeakAwareCompositeByteBuf 对象。</li><li>ADVANCED 和 PARANOID 级别，创建 AdvancedLeakAwareByteBuf 或者 AdvancedLeakAwareCompositeByteBuf 对象。</li></ul></li><li>是否需要创建 LeakAware ByteBuf 对象，有一个前提，调用 <code>ResourceLeakDetector.track(ByteBuf)</code> 方法，返回了 ResourceLeakTracker 对象。<ul><li>虽然说， ADVANCED 和 PARANOID 级别，都使用了 AdvancedLeakAwareByteBuf 或 <code>AdvancedLeakAwareCompositeByteBuf</code> 对象，但是它们的差异是：<ul><li>PARANOID 级别，一定返回 ResourceLeakTracker 对象；</li><li>ADVANCED 级别，随机概率( 默认为 1% 左右 )返回 ResourceLeakTracker 对象。</li></ul></li></ul></li></ol><h2 id="AbstractReferenceCountedByteBuf"><a href="#AbstractReferenceCountedByteBuf" class="headerlink" title="AbstractReferenceCountedByteBuf"></a>AbstractReferenceCountedByteBuf</h2><p><code>io.netty.buffer.AbstractReferenceCountedByteBuf</code> ，实现引用计数的获取与增减的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #refCnt&#125; 的更新器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicIntegerFieldUpdater&lt;AbstractReferenceCountedByteBuf&gt; refCntUpdater = AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, <span class="string">"refCnt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引用计数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> refCnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">AbstractReferenceCountedByteBuf</span><span class="params">(<span class="keyword">int</span> maxCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置最大容量</span></span><br><span class="line">    <span class="keyword">super</span>(maxCapacity);</span><br><span class="line">    <span class="comment">// 初始 refCnt 为 1</span></span><br><span class="line">    refCntUpdater.set(<span class="keyword">this</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计数器基于 <code>AtomicIntegerFieldUpdater</code> ，为什么不直接用 <code>AtomicInteger</code> ？因为 ByteBuf 对象很多，如果都把 int 包一层 AtomicInteger 花销较大，而AtomicIntegerFieldUpdater 只需要一个全局的静态变量。</p><h2 id="SimpleLeakAwareByteBuf"><a href="#SimpleLeakAwareByteBuf" class="headerlink" title="SimpleLeakAwareByteBuf"></a>SimpleLeakAwareByteBuf</h2><p><code>io.netty.buffer.SimpleLeakAwareByteBuf</code> ，继承 WrappedByteBuf 类，Simple 级别的 LeakAware ByteBuf 实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关联的 ByteBuf 对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This object's is associated with the &#123;<span class="doctag">@link</span> ResourceLeakTracker&#125;. When &#123;<span class="doctag">@link</span> ResourceLeakTracker#close(Object)&#125;</span></span><br><span class="line"><span class="comment"> * is called this object will be used as the argument. It is also assumed that this object is used when</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ResourceLeakDetector#track(Object)&#125; is called to create &#123;<span class="doctag">@link</span> #leak&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ByteBuf trackedByteBuf;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ResourceLeakTracker 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> ResourceLeakTracker&lt;ByteBuf&gt; leak;</span><br><span class="line"></span><br><span class="line">SimpleLeakAwareByteBuf(ByteBuf wrapped, ByteBuf trackedByteBuf, ResourceLeakTracker&lt;ByteBuf&gt; leak) &#123; <span class="comment">// &lt;2&gt;</span></span><br><span class="line">    <span class="keyword">super</span>(wrapped);</span><br><span class="line">    <span class="keyword">this</span>.trackedByteBuf = ObjectUtil.checkNotNull(trackedByteBuf, <span class="string">"trackedByteBuf"</span>);</span><br><span class="line">    <span class="keyword">this</span>.leak = ObjectUtil.checkNotNull(leak, <span class="string">"leak"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SimpleLeakAwareByteBuf(ByteBuf wrapped, ResourceLeakTracker&lt;ByteBuf&gt; leak) &#123; <span class="comment">// &lt;1&gt;</span></span><br><span class="line">    <span class="keyword">this</span>(wrapped, wrapped, leak);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>leak 属性，ResourceLeakTracker 对象。<br>trackedByteBuf 属性，真正关联 leak 的 ByteBuf 对象。<br>对于构造方法 &lt;1&gt; ，wrapped 和 trackedByteBuf 相同。<br>对于构造方法 &lt;2&gt; ，wrapped 和 trackedByteBuf 一般不同。</p><h1 id="ResourceLeakDetector-内存泄露检测器"><a href="#ResourceLeakDetector-内存泄露检测器" class="headerlink" title="ResourceLeakDetector 内存泄露检测器"></a>ResourceLeakDetector 内存泄露检测器</h1><p>ResourceLeakDetector 为了检测内存是否泄漏，使用了 WeakReference( 弱引用 )和 ReferenceQueue( 引用队列 )，过程如下：</p><ol><li>根据检测级别和采样率的设置，在需要时为需要检测的 ByteBuf 创建WeakReference 引用。</li><li>当 JVM 回收掉 ByteBuf 对象时，JVM 会将 WeakReference 放入ReferenceQueue 队列中。</li><li>通过对 ReferenceQueue 中 WeakReference 的检查，判断在 GC 前是否有释放ByteBuf 的资源，就可以知道是否有资源释放。</li></ol><p>该类中枚举了4个内存泄漏等级，默认级别为 DEFAULT_LEVEL = Level.SIMPLE 。<br>四个等级如下</p><ol><li>禁用（DISABLED） - 完全禁止泄露检测，省点消耗。</li></ol><ol start="2"><li>简单（SIMPLE） - 默认等级，告诉我们取样的1%的ByteBuf是否发生了泄露，但总共一次只打印一次，看不到就没有了。</li><li>高级（ADVANCED） - 告诉我们取样的1%的ByteBuf发生泄露的地方。每种类型的泄漏（创建的地方与访问路径一致）只打印一次。对性能有影响。</li><li>偏执（PARANOID） - 跟高级选项类似，但此选项检测所有ByteBuf，而不仅仅是取样的那1%。对性能有绝大的影响。</li></ol><h1 id="DefaultResourceLeak"><a href="#DefaultResourceLeak" class="headerlink" title="DefaultResourceLeak"></a>DefaultResourceLeak</h1><p>DefaultResourceLeak ，继承 java.lang.ref.WeakReference 类，实现 ResourceLeakTracker 接口，默认 ResourceLeakTracker 实现类。同时，它是 ResourceLeakDetector 内部静态类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceLeakDetector</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultResourceLeak</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">Object</span>&gt; <span class="keyword">implements</span> <span class="title">ResourceLeakTracker</span>&lt;<span class="title">T</span>&gt;, <span class="title">ResourceLeak</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用队列-Reference-Queue"><a href="#引用队列-Reference-Queue" class="headerlink" title="引用队列(Reference Queue)"></a>引用队列(Reference Queue)</h2><p>一旦弱引用对象开始返回null，该弱引用指向的对象就被标记成了垃圾。而这个弱引用对象（非其指向的对象）就没有什么用了。通常这时候需要进行一些清理工作。比如WeakHashMap会在这时候移除没用的条目来避免保存无限制增长的没有意义的弱引用。<br>引用队列可以很容易地实现跟踪不需要的引用。当你在构造WeakReference时传入一个ReferenceQueue对象，当该引用指向的对象被标记为垃圾的时候，这个引用对象会自动地加入到引用队列里面。接下来，你就可以在固定的周期，处理传入的引用队列，比如做一些清理工作来处理这些没有用的引用对象。</p><p>也就是说，referent 被标记为垃圾的时候，它对应的 WeakReference 对象会被添加到 refQueue 队列中。在此处，即将 DefaultResourceLeak 添加到 referent 队列中。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://blog.csdn.net/prestigeding/article/details/54233327" target="_blank" rel="noopener">Netty学习之旅—-源码分析Netty内存泄漏检测</a></li><li><a href="http://calvin1978.blogcn.com/articles/netty-leak.html" target="_blank" rel="noopener">Netty之有效规避内存泄漏</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自从 Netty 4 开始，对象的生命周期由它们的引用计数( reference counts )管理，而不是由垃圾收集器( garbage collector )管理了，ByteBuf 也不例外，作为对 Java 原生 NIO ByteBuffer 的优秀封装和IO中使用
      
    
    </summary>
    
    
    
      <category term="Netty" scheme="http://yoursite.com/tags/Netty/"/>
    
      <category term="内存泄漏" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Golang 内存模型初探</title>
    <link href="http://yoursite.com/2019/05/13/2019-06-21-Golang%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2019/05/13/2019-06-21-Golang内存模型初探/</id>
    <published>2019-05-13T01:13:14.000Z</published>
    <updated>2019-10-30T02:49:11.798Z</updated>
    
    <content type="html"><![CDATA[<p>内存模型:MM 定义了语言在计算机内存 RAM 中的工作方式，包括共享变量的可见性、共享变量的同步。</p><h1 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h1><ol><li><p>mspan</p></li><li><p>mcache</p></li></ol><h1 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h1><p>Happens Before 定义两个操作间的偏序关系，具有传递性。用于保证一个线程的内存写操作对紧跟着执行的（中间不能穿插别的项目）另一个线程可见，确切的说是执行之前就可见。<br>如果没有得到 HB 保证，会出现很大问题。Java中也是如此。</p><h2 id="Go-中可见行和顺序性的保证方法"><a href="#Go-中可见行和顺序性的保证方法" class="headerlink" title="Go 中可见行和顺序性的保证方法"></a>Go 中可见行和顺序性的保证方法</h2><p>Golang 语言的内存模型规定了一个 goroutine 可以看到另外一个 goroutine 修改同一个变量的值的条件，这类似 java 内存模型中内存可见性问题（ Java 内存可见性问题可以参考拙作：Java 并发编程之美一书）。</p><p>当多个 goroutine 并发同时存取同一个数据时候必须把并发的存取的操作顺序化，在go中可以实现操作顺序化的工具有高级的通道（channel）通信和同步原语比如sync包中的Mutex(互斥锁)、RWMutex(读写锁) 或者和 sync/atomic 中的原子操作。</p><h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><p>单线程下按代码先后顺序有 Happens Before 关系，编译器和CPU也会做优化，但不会影响其先后顺序。<br>一个读操作r1总是对最近的一个对写操作w1的内容可见，即使不是同一个变量的读写。</p><h3 id="Init函数"><a href="#Init函数" class="headerlink" title="Init函数"></a>Init函数</h3><ol><li><p>包P1中导入P2，P2中 init 函数 与 P1 形成Happens Before 关系；</p></li><li><p>main 函数 Happens After 所有的 init 函数</p></li></ol><h3 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h3><ol><li>Goroutine 创建 Happens Before 所有的 Goroutine 操作<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Print(a)</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a = <span class="string">"hello, world"</span></span><br><span class="line">    <span class="keyword">go</span> f()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    hello()</span><br><span class="line">    wg.Wait()</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Goroutine 的销毁 Happens After 所有此 Goroutine 操作<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; a = <span class="string">"hello"</span> &#125;()</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><ol><li><p>对一个元素的 send 操作 Happens Before 对应的 receive 完成操作</p></li><li><p>对 channel 的 close 操作 Happens Before receive   端的收到关闭通知操作</p></li><li><p>对于 Unbuffered Channel，对一个元素的 receive 操作 Happens Before 对应的 send 完成操作</p></li><li><p>对于 Buffered Channel，假设 Channel 的 buffer 大小为 C，那么对第 k 个元素的 receive 操作，Happens Before 第 k+C 个 send 完成操作。可以看出上一条 Unbuffered Channel 规则就是这条规则 C=0 时的特例</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a = <span class="string">"hello, world"</span> <span class="comment">//1</span></span><br><span class="line">    c &lt;- <span class="number">0</span>             <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> f()   <span class="comment">//3</span></span><br><span class="line">    &lt;-c      <span class="comment">//4</span></span><br><span class="line">    fmt.Print(a) <span class="comment">//5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类比 JMM，有很多是相似的，比如单线程下的顺序性，但 Golang 比 Java 要简单得多啦。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://ifeve.com/golang-mem/" target="_blank" rel="noopener">GoLang内存模型</a></li><li><a href="https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/" target="_blank" rel="noopener">Allocation efficiency in high-performance Go services</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;内存模型:MM 定义了语言在计算机内存 RAM 中的工作方式，包括共享变量的可见性、共享变量的同步。&lt;/p&gt;
&lt;h1 id=&quot;内存分配&quot;&gt;&lt;a href=&quot;#内存分配&quot; class=&quot;headerlink&quot; title=&quot;内存分配&quot;&gt;&lt;/a&gt;内存分配&lt;/h1&gt;&lt;ol&gt;
&lt;l
      
    
    </summary>
    
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
      <category term="内存模型" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Redis 学习笔记</title>
    <link href="http://yoursite.com/2019/05/02/2019-07-31-Redis%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2019/05/02/2019-07-31-Redis学习整理/</id>
    <published>2019-05-02T04:00:00.000Z</published>
    <updated>2019-10-30T02:41:57.566Z</updated>
    
    <content type="html"><![CDATA[<p>《Redis 设计与实现》是一本非常好的书，好的原因是可以让你非常简单地读下去并有所收获，这是作者写作能力高的体现。这里先安利和马克，有空再读一遍。</p><h1 id="Redis-特点"><a href="#Redis-特点" class="headerlink" title="Redis 特点"></a>Redis 特点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p>速度快<br>Redis 本质上是一个 Key-Value 类型的内存数据库，很像Memcached ，整个数据库统统加载在内存当中进行操作，定期通过异步操作把数据库数据 flush 到硬盘上进行保存。<br>因为是纯内存操作，Redis 的性能非常出色，每秒可以处理超过 10 万次读写操作，是已知性能最快的 Key-Value 数据库。</p></li><li><p>特性丰富</p><ol><li>订阅发布 Pub / Sub 功能</li><li>Key 过期策略</li><li>事务</li><li>支持多个 DB</li><li>计数</li></ol></li><li><p>支持丰富数据类型<br>String ，List，Set，Sorted Set，Hash 等<br>Redis 的出色之处不仅仅是性能，Redis 最大的魅力是支持保存多种数据结构，此外单个 Value 的最大限制是1GB，不像 Memcached只能保存1MB的数据，因此Redis可以用来实现很多有用的功能。比方说：<br>用他的 List 来做 FIFO 双向链表，实现一个轻量级的高性能消息队列服务。<br>用他的 Set 可以做高性能的 tag 系统等等。</p></li><li><p>持久化<br>提供 RDB 和 AOF 两种数据的持久化存储方案。</p></li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><p>由于 Redis 是内存数据库，所以，单台机器，存储的数据量，跟机器本身的内存大小。虽然 Redis 本身有 Key 过期策略，但是还是需要提前预估和节约内存。如果内存增长过快，需要定期删除数据。（可使用 Redis Cluster、Codis 等方案，对 Redis 进行分区，从单机 Redis 变成集群 Redis 。）</p></li><li><p>如果进行完整重同步，由于需要生成 RDB 文件，并进行传输，会占用主机的 CPU ，并会消耗现网的带宽。不过 Redis2.8 版本，已经有部分重同步的功能，但是还是有可能有完整重同步的。比如，新上线的备机。</p></li><li><p>修改配置文件，进行重启，将硬盘中的数据加载进内存，时间比较久。在这个过程中，Redis 不能提供服务。</p></li></ol><h2 id="对比-Memcached"><a href="#对比-Memcached" class="headerlink" title="对比 Memcached"></a>对比 Memcached</h2><ol><li><p>支持更复杂的数据结构，而不是仅仅支持字符串。</p></li><li><p>原生支持集群，3.X就可以</p></li><li><p>Redis 只使用单核，而 Memcached 可以使用多核，所以平均每一个核上 Redis在存储小数据时比 Memcached 性能更高。</p></li><li><p>内存使用效率</p><ul><li><p>简单的 Key-Value 存储的话，Memcached 的内存利用率更高，可以使用类似内存池。</p></li><li><p>如果 Redis 采用 hash 结构来做 key-value 存储，由于其组合式的压缩， 其内存利用率会高于 Memcached 。</p></li><li><p>Redis 和 Memcached 的内存管理方法不同。Redis 采用的是包装的 malloc/free ， 相较于 Memcached 的内存管理方法 tcmalloc / jmalloc 来说，要简单很多 。</p></li></ul></li><li><p>网络 IO 模型</p><ul><li><p>Memcached 是多线程，非阻塞 IO 复用的网络模型，原型上接近 Nignx 。</p></li><li><p>Redis 使用单线程的 IO 复用模型，自己封装了一个简单的 AeEvent 事件处理框架，主要实现了 epoll, kqueue 和 select ，更接近 Apache 早期的模式。</p></li></ul></li><li><p>Redis 支持持久化</p></li></ol><h1 id="为啥单线程也这么快？"><a href="#为啥单线程也这么快？" class="headerlink" title="为啥单线程也这么快？"></a>为啥单线程也这么快？</h1><p>首先没有说多线程就一定快的道理，线程上下文切换也是很费时间的，尤其是计算密集型————但显然 Redis 不是，但因为他是纯内存操作，利用非阻塞的 IO 多路复用模拟1:N，全程 Hash 所以快。<br>并且在 RDB 时会 Fork 子进程，最重要的，可以在一个服务器部署多个 Redis 实例来充分利用多核。</p><h1 id="持久化方式"><a href="#持久化方式" class="headerlink" title="持久化方式"></a>持久化方式</h1><h2 id="【全量】RDB-持久化"><a href="#【全量】RDB-持久化" class="headerlink" title="【全量】RDB 持久化"></a>【全量】RDB 持久化</h2><p>在指定的时间间隔内将内存中的数据集快照写入磁盘。实际操作过程是，fork 一个子进程，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩存储。</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol><li>灵活设置备份频率和周期。你可能打算每个小时归档一次最近 24 小时的数据，同时还要每天归档一次最近 30 天的数据。通过这样的备份策略，一旦系统出现灾难性故障，我们可以非常容易的进行恢复。</li><li>非常适合冷备份，对于灾难恢复而言，RDB 是非常不错的选择。因为我们可以非常轻松的将一个单独的文件压缩后再转移到其它存储介质上。推荐，可以将这种完整的数据文件发送到一些远程的安全存储上去，比如说 Amazon 的 S3 云服务上去，在国内可以是阿里云的 OSS 分布式存储上。<br>3， 性能最大化。对于 Redis 的服务进程而言，在开始持久化时，它唯一需要做的只是 fork 出子进程，之后再由子进程完成这些持久化的工作，这样就可以极大的避免服务进程执行 IO 操作了。也就是说，RDB 对 Redis 对外提供的读写服务，影响非常小，可以让 Redis 保持高性能。</li><li>恢复更快。相比于 AOF 机制，RDB 的恢复速度更更快，更适合恢复数据，特别是在数据集非常大的情况</li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol><li><p>系统一旦在定时持久化之前出现宕机现象，此前没有来得及写入磁盘的数据都将丢失。</p></li><li><p>由于 RDB 是通过 fork 子进程来协助完成数据持久化工作的，因此，如果当数据集较大时，可能会导致整个服务器停止服务几百毫秒，甚至是 1 秒钟。</p></li></ol><h2 id="【增量】AOF持久化"><a href="#【增量】AOF持久化" class="headerlink" title="【增量】AOF持久化"></a>【增量】AOF持久化</h2><p>以日志的形式记录服务器所处理的每一个写、删除操作，查询操作不会记录，以文本的方式记录，可以打开文件看到详细的操作记录。</p><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ol><li><p>该机制可以带来更高的数据安全性，即数据持久性。Redis 中提供了 3 种同步策略，即每秒同步、每修改(执行一个命令)同步和不同步。</p></li><li><p>该机制对日志文件的写入操作采用的是 append 模式，因此在写入过程中即使出现宕机现象，也不会破坏日志文件中已经存在的内容。以 append-only 模式写入，所以没有任何磁盘寻址的开销，写入性能非常高。</p></li><li><p>如果日志过大，Redis可以自动启用 rewrite 机制。即使出现后台重写操作，也不会影响客户端的读写。因为在 rewrite log 的时候，会对其中的指令进行压缩，创建出一份需要恢复数据的最小日志出来。再创建新日志文件的时候，老的日志文件还是照常写入。当新的 merge 后的日志文件 ready 的时候，再交换新老日志文件即可。</p></li><li><p>AOF 包含一个格式清晰、易于理解的日志文件用于记录所有的修改操作。事实上，我们也可以通过该文件完成数据的重建。</p></li></ol><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ol><li><p>对于相同数量的数据集而言，AOF 文件通常要大于 RDB 文件。RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</p></li><li><p>根据同步策略的不同，AOF 在运行效率上往往会慢于 RDB 。总之，每秒同步策略的效率是比较高的，同步禁用策略的效率和 RDB 一样高效。</p></li><li><p>以前 AOF 发生过 bug ，就是通过 AOF 记录的日志，进行数据恢复的时候，没有恢复一模一样的数据出来。所以说，类似 AOF 这种较为复杂的基于命令日志/merge/回放的方式，比基于 RDB 每次持久化一份完整的数据快照文件的方式，更加脆弱一些，容易有 bug 。不过 AOF 就是为了避免 rewrite 过程导致的 bug ，因此每次 rewrite 并不是基于旧的指令日志进行 merge 的，而是基于当时内存中的数据进行指令的重新构建，这样健壮性会好很多。</p></li></ol><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>Redis 支持同时开启开启两种持久化方式，我们可以综合使用 AOF 和 RDB 两种持久化机制，用 AOF 来保证数据不丢失，作为数据恢复的第一选择; 用 RDB 来做不同程度的冷备，在 AOF 文件都丢失或损坏不可用的时候，还可以使用 RDB 来进行快速的数据恢复。<br>Ps: 在 Redis4.0 版本开始，允许你使用 RDB-AOF 混合持久化方式</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><ol><li><p>在事务中的所有命令都将会被串行化的顺序执行，事务执行期间，Redis 不会再为其它客户端的请求提供任何服务，从而保证了事物中的所有命令被原子的执行。</p></li><li><p>和关系型数据库中的事务相比，在 Redis 事务中如果有某一条命令执行失败，其后的命令仍然会被继续执行。</p></li><li><p>我们可以通过 MULTI 命令开启一个事务，有关系型数据库开发经验的人可以将其理解为 “BEGIN TRANSACTION” 语句。在该语句之后执行的命令都，将被视为事务之内的操作，最后我们可以通过执行 EXEC / DISCARD 命令来提交 / 回滚该事务内的所有操作。这两个 Redis 命令，可被视为等同于关系型数据库中的 COMMIT / ROLLBACK 语句。</p></li><li><p>在事务开启之前，如果客户端与服务器之间出现通讯故障并导致网络断开，其后所有待执行的语句都将不会被服务器执行。然而如果网络中断事件是发生在客户端执行 EXEC 命令之后，那么该事务中的所有命令都会被服务器执行。</p></li><li><p>当使用 Append-Only 模式时，Redis 会通过调用系统函数 write 将该事务内的所有写操作在本次调用中全部写入磁盘。然而如果在写入的过程中出现系统崩溃，如电源故障导致的宕机，那么此时也许只有部分数据被写入到磁盘，而另外一部分数据却已经丢失。</p></li></ol><h1 id="主从"><a href="#主从" class="headerlink" title="主从"></a>主从</h1><p>Redis 的主从同步(replication)机制，允许 Slave 从 Master 那里，通过网络传输拷贝到完整的数据备份，从而达到主从机制。</p><ul><li><p>主数据库可以进行读写操作，当发生写操作的时候自动将数据同步到从数据库，而从数据库一般是只读的，并接收主数据库同步过来的数据。</p></li><li><p>一个主数据库可以有多个从数据库，而一个从数据库只能有一个主数据库。</p></li><li><p>第一次同步时，主节点做一次 bgsave 操作，并同时将后续修改操作记录到内存 buffer ，待完成后将 RDB 文件全量同步到复制节点，复制节点接受完成后将 RDB 镜像加载到内存。加载完成后，再通知主节点将期间修改的操作记录同步到复制节点进行重放就完成了同步过程。</p></li></ul><h1 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h1><p>redis 内部使用文件事件处理器 file event handler，这个文件事件处理器是单线程的，所以 redis 才叫做单线程的模型。它采用 IO 多路复用机制同时监听多个 socket，根据 socket 上的事件来选择对应的事件处理器进行处理。<br>文件事件处理器的结构包含 4 个部分：</p><ol><li><p>多个 socket</p></li><li><p>IO 多路复用程序</p></li><li><p>文件事件分派器</p></li><li><p>事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）</p></li></ol><p>多个 socket 可能会并发产生不同的操作，每个操作对应不同的文件事件，但是 IO 多路复用程序会监听多个 socket，会将 socket 产生的事件放入队列中排队，事件分派器每次从队列中取出一个事件，把该事件交给对应的事件处理器进行处理。<br><img src="/img/79D8A468174058EB35FF92AC30D3D6D3.jpg" alt="插图"></p><ul><li><p>客户端 socket01 向 redis 的 server socket 请求建立连接，此时 server socket 会产生一个 <code>AE_READABLE</code> 事件，IO 多路复用程序监听到 server socket 产生的事件后，将该事件压入队列中。文件事件分派器从队列中获取该事件，交给连接应答处理器。连接应答处理器会创建一个能与客户端通信的 socket01，并将该 socket01 的 AE_READABLE 事件与命令请求处理器关联。</p></li><li><p>假设此时客户端发送了一个 <code>set key value</code> 请求，此时 redis 中的 socket01 会产生 <code>AE_READABLE</code> 事件，IO 多路复用程序将事件压入队列，此时事件分派器从队列中获取到该事件，由于前面 socket01 的 <code>AE_READABLE</code> 事件已经与命令请求处理器关联，因此事件分派器将事件交给命令请求处理器来处理。命令请求处理器读取 socket01 的 key value 并在自己内存中完成 key value 的设置。操作完成后，它会将 socket01 的 AE_WRITABLE 事件与令回复处理器关联。</p></li><li><p>如果此时客户端准备好接收返回结果了，那么 redis 中的 socket01 会产生一个 <code>AE_WRITABLE</code> 事件，同样压入队列中，事件分派器找到相关联的命令回复处理器，由命令回复处理器对 socket01 输入本次操作的一个结果，比如 ok，之后解除 socket01 的 <code>AE_WRITABLE</code> 事件与命令回复处理器的关联。</p></li></ul><h1 id="用-Redis-做分布式锁"><a href="#用-Redis-做分布式锁" class="headerlink" title="用 Redis 做分布式锁"></a>用 Redis 做分布式锁</h1><p>与最常用的 Zookeeper 分布式锁对比，可靠性低，但性能高。</p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><ol><li>先拿 setnx 来争抢锁，抢到之后，再用 expire 给锁加一个过期时间防止锁忘记了释放。</li><li>可以同时把 setnx 和 expire 合成一条指令，避免在 setnx 之后执行 expire 之前进程意外 crash 或者要重启维护<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET key value [EX seconds] [PX milliseconds] [NX|XX]</span><br></pre></td></tr></table></figure></li></ol><h2 id="redlock"><a href="#redlock" class="headerlink" title="redlock"></a>redlock</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《Redis 设计与实现》是一本非常好的书，好的原因是可以让你非常简单地读下去并有所收获，这是作者写作能力高的体现。这里先安利和马克，有空再读一遍。&lt;/p&gt;
&lt;h1 id=&quot;Redis-特点&quot;&gt;&lt;a href=&quot;#Redis-特点&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>代码整洁之道</title>
    <link href="http://yoursite.com/2019/05/02/2019-05-26-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%81%8C%E4%B8%9A%E4%BF%AE%E5%85%BB/"/>
    <id>http://yoursite.com/2019/05/02/2019-05-26-代码整洁之道-程序员的职业修养/</id>
    <published>2019-05-02T04:00:00.000Z</published>
    <updated>2019-10-30T02:46:33.658Z</updated>
    
    <content type="html"><![CDATA[<p>读过《代码整洁之道》后列了如下提纲，时常翻阅可能会写出更整洁的代码。相比 Alibaba 和唯品会的 Java 开发手册，这本书从更宏观的角度以及代码之外的事情（沟通、需求、设计、管理）提出了一些可实操的有用的方法。从这点来看，书名叫做《程序员的自我修养》也不错，哈哈。</p><blockquote><p>享受职业素养。</p></blockquote><h1 id="专业主义"><a href="#专业主义" class="headerlink" title="专业主义"></a>专业主义</h1><h2 id="不行损害之事"><a href="#不行损害之事" class="headerlink" title="不行损害之事"></a>不行损害之事</h2><ul><li><p>让 QA 找不出任何问题</p></li><li><p>确信代码能正常运行（通过主动反复测试）</p></li><li><p>自动化 QA</p></li><li><p>不要破坏结构，以牺牲结构为代价发布新功能，得不偿失，将来必定后悔。</p></li></ul><p>##了解所在领域</p><ul><li><p>NS图表</p></li><li><p>Mealy &amp; Moore 状态机的差别</p></li><li><p>变换分析的含义</p></li><li><p>快速排序手写</p></li><li><p>临时传递数据</p></li><li><p>耦合性（Conascence）</p></li></ul><h2 id="每个开发人员必须精通的事项"><a href="#每个开发人员必须精通的事项" class="headerlink" title="每个开发人员必须精通的事项"></a>每个开发人员必须精通的事项</h2><ul><li><p>设计模式 （GOF，24）</p></li><li><p>设计原则（SOLID）</p></li><li><p>编程方法</p><ul><li>XP</li><li>Scrum</li><li>精益</li><li>看板</li><li>瀑布</li><li>结构化分析、设计</li></ul></li><li><p>实践</p><ul><li>测试驱动开发</li><li>面向对象设计</li><li>结构化编程</li><li>持续集成</li><li>结对编程</li></ul></li><li><p>工件</p><ul><li>UML 图</li><li>DFD 图</li><li>结构图</li><li>Petri 网络图</li><li>状态迁移图标</li><li>流程图</li><li>决策表</li><li>甘特图<h2 id="职业道德"><a href="#职业道德" class="headerlink" title="职业道德"></a>职业道德</h2></li></ul></li><li><p>坚持学习</p></li><li><p>练习</p></li><li><p>合作</p></li><li><p>辅导</p></li><li><p>了解业务领域</p></li><li><p>与客户（需求）保持一致</p></li><li><p>谦逊</p></li></ul><h1 id="说“不”"><a href="#说“不”" class="headerlink" title="说“不”"></a>说“不”</h1><ul><li>当你面对类似猩猩卖场提出的在黑色星期五之前做出一个 iPhone 应用的需求时，你应该尊重事实和自己，敢于说“不”。</li></ul><h1 id="说“是”"><a href="#说“是”" class="headerlink" title="说“是”"></a>说“是”</h1><h2 id="承诺用语"><a href="#承诺用语" class="headerlink" title="承诺用语"></a>承诺用语</h2><p>做出承诺包含三个步骤</p><ul><li><p><strong>口头上说</strong>自己将会去做</p></li><li><p><strong>心里认真对待</strong>做出的承诺</p></li><li><p>真正<strong>付诸行动</strong></p></li></ul><h2 id="逃避用语"><a href="#逃避用语" class="headerlink" title="逃避用语"></a>逃避用语</h2><ul><li>需要/应该<ul><li>我们需要把这事做完</li><li>但愿我有时间做这事</li></ul></li><li>希望/但愿<ul><li>希望我明天能完成任务</li><li>但愿电脑能快点</li></ul></li><li>让我们（而不是让我）<ul><li>让我们回头见</li><li>让我们把这事做完<br>总之，说“是”就是：你对自己将会做某事做了清晰的事实陈述，而且还说明了完成期限。</li></ul></li></ul><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><h2 id="代码要求"><a href="#代码要求" class="headerlink" title="代码要求"></a>代码要求</h2><ul><li><p>代码能正常工作</p></li><li><p>代码能满足需求</p></li><li><p>代码能和现有系统结合得天衣无缝</p></li><li><p>其他程序员能读懂你的代码</p></li></ul><h2 id="个人状态"><a href="#个人状态" class="headerlink" title="个人状态"></a>个人状态</h2><ul><li><p>凌晨三点写的可能是糟糕的代码</p></li><li><p>焦虑时也是如此</p></li><li><p>流态区可能会效率高，但也会导致<strong>忽略与全局整合</strong></p></li><li><p>音乐并不能提高效率</p></li><li><p>被打断的预防是结对编程或者 TDD</p></li><li><p>阻塞时找点别的事情干</p></li><li><p>“创造性输出”依赖于“创造性输入”，比如音乐、小说、电影等</p></li><li><p>调试也是编码的一部分</p></li></ul><h2 id="保持节奏"><a href="#保持节奏" class="headerlink" title="保持节奏"></a>保持节奏</h2><p>软件开发是一场马拉松🏃🏻‍♂️而不是短跑。</p><ul><li><p>知道何时应该离开一会，疲倦、预防颈椎病、心血管疾病（……)</p></li><li><p>开车回家路上，脑袋可以解决一些问题</p></li><li><p>洗澡同上</p></li><li><p>进度延迟时坚决坚持你的估算</p></li><li><p>加班长期来说并无好处</p></li></ul><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><ul><li><p>帮助他人可以收获更多</p></li><li><p>接受他人帮助</p></li><li><p>辅导缺乏经验的程序员是老鸟的职责</p></li></ul><h1 id="测试驱动开发"><a href="#测试驱动开发" class="headerlink" title="测试驱动开发"></a>测试驱动开发</h1><p>最早是 XP 极限编程运动的一部分，后被其他所有敏捷方法采纳。不仅是一种缩短编码周期的简单技巧。</p><h2 id="三项法则是"><a href="#三项法则是" class="headerlink" title="三项法则是"></a>三项法则是</h2><ol><li><p>编写好失败单元测试之前，不写任何产品代码</p></li><li><p>只要有一个单元测试失败，就不再写测试代码；无法通过编译也是一种失败</p></li><li><p>产品代码恰好能够让当前的失败单元测试通过即可，不必多写</p></li></ol><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li><p>确定性 修改之后运行测试，确保没有错误因修改产生</p></li><li><p>减少 Bug</p></li><li><p>让人敢于修改代码</p></li><li><p>单元测试成为示例和文档</p></li><li><p>遵循三项法则有助于做出松耦合的设计，因为测试不允许耦合</p></li><li><p>专业人士的选择</p></li></ul><h2 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h2><ul><li>某些情况下确实不适用，并非银弹，就像 DDD。</li></ul><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ul><li>用自己的时间练习————保证不落伍是自己的责任</li></ul><p>-专业人士需要练习，做到最好，拓宽视野。</p><h1 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h1><ul><li><p>不要过早精细化————你不知道哪儿应该精细化</p></li><li><p>但确定需求应该尽早</p></li><li><p>业务分析员测试“正确路径”，QA测试“错误路径”</p></li><li><p>验收测试是业务方写给业务方的，单元测试是程序员写给自己的（也可以拿来做文档的一部分）</p></li></ul><h1 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h1><ul><li><p>QA 的任务就是和业务人员一起创建自动化验收测试。</p></li><li><p>自动化测试金字塔，自顶向下依次是</p><ul><li><p>人工探索式测试：需要人工介入，既不是自动化测试，也非脚本测试，目的是探索系统预期之外的能力</p></li><li><p>系统测试：对整个集成完毕的系统的自动化测试，不会直接测试业务规则，而是测试系统是否已经正确组装完毕、各部件之间是否能正常交互。</p></li><li><p>集成测试：组装配件成组合，判断其是否正常通信，是编排型测试，只看是否协调，不管业务规则</p></li><li><p>组件测试：对组建的业务规则的验收测试</p></li><li><p>单元测试：供程序员自己使用</p></li></ul></li></ul><h1 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h1><p>8小时很短暂，只有480分钟，28800秒。</p><ul><li><p>会议需要成本，时间成本和金钱成本</p></li><li><p>会议并不总要参加，也可以离席</p></li><li><p>敏捷开发会议需要回答三个问题，每个问题不超过 20s</p><ul><li>我昨天干了什么</li><li>我今天打算干什么</li><li>我遇到了什么问题</li></ul></li><li><p>注意力</p><ul><li>足够的睡眠</li><li>不集中注意力时，注意力可以恢复</li><li>肌肉注意力不同于心智注意力，且前者可以改善后者</li><li>平衡输入与输出</li></ul></li><li><p>要避免的行为</p><ul><li>优先级错乱</li><li>死胡同（走不下去，应该折返）</li><li>泥潭（可以完成但效率严重降低，应及时抽身）</li></ul></li></ul><h1 id="预估"><a href="#预估" class="headerlink" title="预估"></a>预估</h1><p>不同的人对预估看法不同。业务方觉得预估就是承诺，开发方认为认为预估只是个猜测。</p><ul><li><p>避免暗示性承诺，分清楚预估与承诺</p></li><li><p>计划评审技术（PERT）</p><ul><li>乐观预估 O</li><li>标称预估 N</li><li>悲观预估 P</li><li>期望时间 u = (O+4N+P)/6</li><li>标准差 o = (P-O)/6</li><li></li></ul></li><li><p>生成共识的 Delphi 法</p><ul><li>亮手指</li><li>规划扑克</li><li>关联预估</li><li>三元预估</li></ul></li><li><p>大数定律防止预估出错</p></li></ul><h1 id="压力"><a href="#压力" class="headerlink" title="压力"></a>压力</h1><ul><li><p>避免压力</p><ul><li>合理的承诺</li><li>保持整洁</li><li>危机中的纪律</li></ul></li><li><p>应对压力</p><ul><li>不要惊慌失措</li><li>沟通</li><li>依靠纪律原则</li><li>寻求帮助</li></ul></li></ul><h1 id="协作"><a href="#协作" class="headerlink" title="协作"></a>协作</h1><blockquote><p>我们并非是因为喜欢和其他人在一起工作而选择做程序员的</p></blockquote><ul><li><p>与用户讨论，理解业务</p></li><li><p>与程序员密切合作</p><ul><li>共享代码</li><li>结对编程</li></ul></li></ul><h1 id="项目与团队"><a href="#项目与团队" class="headerlink" title="项目与团队"></a>项目与团队</h1><blockquote><p>项目比团队更难构建</p></blockquote><ul><li><p>让一个程序员同时投身两个项目并不明智</p></li><li><p>有凝聚力的团队可以有3-20人，最好是12人。</p></li></ul><h1 id="辅导、学徒期与技艺"><a href="#辅导、学徒期与技艺" class="headerlink" title="辅导、学徒期与技艺"></a>辅导、学徒期与技艺</h1><blockquote><p>医学专业已经建立了一套严密的辅导体系。</p></blockquote><ul><li>上升过程<ul><li>学徒期/实习生</li><li>熟练工</li><li>大师<br>学校能够传授的是理论，无法传授作为一个程序员所需掌握的原则、实践和技能。这些东西只有经由师徒个体间多年的细心监督和辅导才能获得。每个程序员都会经历上述时期，因此应该建立一种包含学徒期、实习期和长期指引的机制。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;读过《代码整洁之道》后列了如下提纲，时常翻阅可能会写出更整洁的代码。相比 Alibaba 和唯品会的 Java 开发手册，这本书从更宏观的角度以及代码之外的事情（沟通、需求、设计、管理）提出了一些可实操的有用的方法。从这点来看，书名叫做《程序员的自我修养》也不错，哈哈。&lt;/
      
    
    </summary>
    
    
    
      <category term="Summary" scheme="http://yoursite.com/tags/Summary/"/>
    
      <category term="Clean Code" scheme="http://yoursite.com/tags/Clean-Code/"/>
    
  </entry>
  
  <entry>
    <title>Golang 网络编程初探</title>
    <link href="http://yoursite.com/2019/05/02/2018-07-13-Go%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/05/02/2018-07-13-Go网络编程/</id>
    <published>2019-05-02T01:11:24.000Z</published>
    <updated>2019-10-30T02:37:23.493Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇非常接地气的文章，先讲通信的具体流程（具体到 API 名称），然后用 Golang 实现 TCP、UDP 的文件传输、聊天室、HTTP通信等功能，直接上代码，哈哈。<br>从中感觉到一些 Golang 的设计理念：不追求设计感，好写好理解好用就完了…</p><h1 id="文件传输-By-TCP"><a href="#文件传输-By-TCP" class="headerlink" title="文件传输 By TCP"></a>文件传输 By TCP</h1><p>文件传输——发送端（客户端）：</p><pre><code>1. 提示用户使用命令行参数输入文件名。接收文件名 filepath（含访问路径）2. 使用 os.Stat(）获取文件属性，得到纯文件名 fileName（去除访问路径）3. 主动发起连接服务器请求，结束时关闭连接。4. 发送文件名到接收端 conn.Write()5. 读取接收端回发的确认数据 conn.Read()6. 判断是否为“ok”。如果是，封装函数 SendFile() 发送文件内容。传参 filePath 和 conn7. 只读 Open 文件, 结束时Close文件8. 循环读本地文件，读到 EOF，读取完毕。9. 将读到的内容原封不动 conn.Write 给接收端（服务器）</code></pre><p>文件传输——接收端（服务器）：</p><pre><code>1. 创建监听 listener，程序结束时关闭。2. 阻塞等待客户端连接 conn，程序结束时关闭conn。3. 读取客户端发送文件名。保存 fileName。4. 回发“ok”。5. 封装函数 RecvFile 接收客户端发送的文件内容。传参 fileName 和 conn6. 按文件名 Create 文件，结束时 Close7. 循环 Read 发送端网络文件内容，当读到 0 说明文件读取完毕。8. 将读到的内容原封不动Write到创建的文件中</code></pre><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendFile</span><span class="params">(conn net.Conn, filePath <span class="keyword">string</span>)</span></span>  &#123;</span><br><span class="line"><span class="comment">// 只读打开文件</span></span><br><span class="line">f, err := os.Open(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"os.Open err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从本文件中，读数据，写给网络接收端。 读多少，写多少。原封不动。</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n, err := f.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">"发送文件完成。"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"os.Open err:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写到网络socket中</span></span><br><span class="line">_, err = conn.Write(buf[:n])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Write err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">list := os.Args<span class="comment">// 获取命令行参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(list) != <span class="number">2</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"格式为：go run xxx.go 文件绝对路径"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 提取 文件的绝对路径</span></span><br><span class="line">filePath := list[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//提取文件名</span></span><br><span class="line">fileInfo, err := os.Stat(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"os.Stat err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fileName := fileInfo.Name()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主动发起连接请求</span></span><br><span class="line">conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:8008"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Dial err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送文件名给 接收端</span></span><br><span class="line">_, err = conn.Write([]<span class="keyword">byte</span>(fileName))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Write err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 读取服务器回发的 OK</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">16</span>)</span><br><span class="line">n, err := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">"ok"</span> == <span class="keyword">string</span>(buf[:n]) &#123;</span><br><span class="line"><span class="comment">// 写文件内容给服务器——借助conn</span></span><br><span class="line">sendFile(conn, filePath)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接收端</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recvFile</span><span class="params">(conn net.Conn, fileName <span class="keyword">string</span>)</span></span>  &#123;</span><br><span class="line"><span class="comment">// 按照文件名创建新文件</span></span><br><span class="line">f, err := os.Create(fileName+<span class="string">".new"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"os.Create err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 网络中读数据，写入本地文件</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n,_ := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"接收文件完成。"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写入本地文件，读多少，写多少。</span></span><br><span class="line">f.Write(buf[:n])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">// 创建用于监听的socket</span></span><br><span class="line">listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:8008"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">" net.Listen err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listener.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻塞监听</span></span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">" listener.Accept() err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件名，保存</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line">n, err := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">" conn.Read err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fileName := <span class="keyword">string</span>(buf[:n])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回写 ok 给发送端</span></span><br><span class="line">conn.Write([]<span class="keyword">byte</span>(<span class="string">"ok"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件内容</span></span><br><span class="line">recvFile(conn, fileName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="UDP-服务器"><a href="#UDP-服务器" class="headerlink" title="UDP 服务器"></a>UDP 服务器</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">// 组织一个 udp 地址结构, 指定服务器的IP+port</span></span><br><span class="line">srvAddr, err := net.ResolveUDPAddr(<span class="string">"udp"</span>, <span class="string">"127.0.0.1:8006"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ResolveUDPAddr err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"udp 服务器地址结构，创建完程!!!"</span>)</span><br><span class="line"><span class="comment">// 创建用户通信的 socket</span></span><br><span class="line">udpConn, err := net.ListenUDP(<span class="string">"udp"</span>, srvAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ListenUDP err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> udpConn.Close()</span><br><span class="line">fmt.Println(<span class="string">"udp 服务器通信socket创建完成!!!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取客户端发送的数据</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回3个值，分别是 读取到的字节数， 客户端的地址， error</span></span><br><span class="line">n, cltAddr, err := udpConn.ReadFromUDP(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ReadFromUDP err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 模拟处理数据</span></span><br><span class="line">fmt.Printf(<span class="string">"服务器读到 %v 的数据：%s\n"</span>, cltAddr, <span class="keyword">string</span>(buf[:n]))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取系统当前时间</span></span><br><span class="line">daytime := time.Now().String()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回写数据给客户端</span></span><br><span class="line">_, err = udpConn.WriteToUDP([]<span class="keyword">byte</span>(daytime), cltAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"WriteToUDP err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">// 指定 服务器 IP + port 创建 通信套接字。</span></span><br><span class="line">conn, err := net.Dial(<span class="string">"udp"</span>, <span class="string">"127.0.0.1:8006"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Dial err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i &lt;<span class="number">1000000</span>; i++&#123;</span><br><span class="line"><span class="comment">// 主动写数据给服务器</span></span><br><span class="line">conn.Write([]<span class="keyword">byte</span>(<span class="string">"Are you Ready?"</span>))</span><br><span class="line"></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"><span class="comment">// 接收服务器回发的数据</span></span><br><span class="line">n, err := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"服务器回发："</span>, <span class="keyword">string</span>(buf[:n]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="UDP-服务器改为并发"><a href="#UDP-服务器改为并发" class="headerlink" title="UDP 服务器改为并发"></a>UDP 服务器改为并发</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组织一个 udp 地址结构, 指定服务器的IP+port</span></span><br><span class="line">srvAddr, err := net.ResolveUDPAddr(<span class="string">"udp"</span>, <span class="string">"127.0.0.1:8006"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ResolveUDPAddr err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"udp 服务器地址结构，创建完程!!!"</span>)</span><br><span class="line"><span class="comment">// 创建用户通信的 socket</span></span><br><span class="line">udpConn, err := net.ListenUDP(<span class="string">"udp"</span>, srvAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ListenUDP err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> udpConn.Close()</span><br><span class="line">fmt.Println(<span class="string">"udp 服务器通信socket创建完成!!!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取客户端发送的数据</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 返回3个值，分别是 读取到的字节数， 客户端的地址， error</span></span><br><span class="line">n, cltAddr, err := udpConn.ReadFromUDP(buf)<span class="comment">// --- 主go程读取客户端发送数据</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ReadFromUDP err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 模拟处理数据</span></span><br><span class="line">fmt.Printf(<span class="string">"服务器读到 %v 的数据：%s\n"</span>, cltAddr, <span class="keyword">string</span>(buf[:n]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;<span class="comment">// 每有一个客户端连接上来，启动一个go程 写数据。</span></span><br><span class="line"><span class="comment">// 提取系统当前时间</span></span><br><span class="line">daytime := time.Now().String() + <span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回写数据给客户端</span></span><br><span class="line">_, err = udpConn.WriteToUDP([]<span class="keyword">byte</span>(daytime), cltAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"WriteToUDP err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最简单的TCP-C-S"><a href="#最简单的TCP-C-S" class="headerlink" title="最简单的TCP-C/S"></a>最简单的TCP-C/S</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">// 指定服务器 通信协议、IP地址、port。 创建一个用于监听的 socket</span></span><br><span class="line">listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:8000"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Listen err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listener.Close()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"服务器等待客户端建立连接..."</span>)</span><br><span class="line"><span class="comment">// 阻塞监听客户端连接请求, 成功建立连接，返回用于通信的socket</span></span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"listener.Accept() err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">fmt.Println(<span class="string">"服务器与客户端成功建立连接！！！"</span>)</span><br><span class="line"><span class="comment">// 读取客户端发送的数据</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line">n, err := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">conn.Write(buf[:n])<span class="comment">// 读多少写多少。原封不动</span></span><br><span class="line"><span class="comment">// 处理数据—— 打印</span></span><br><span class="line">fmt.Println(<span class="string">"服务器读到数据："</span>, <span class="keyword">string</span>(buf[:n]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//client</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">// 指定 服务器 IP + port 创建 通信套接字。</span></span><br><span class="line">conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:8000"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Dial err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主动写数据给服务器</span></span><br><span class="line">conn.Write([]<span class="keyword">byte</span>(<span class="string">"Are you Ready?"</span>))</span><br><span class="line"></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"><span class="comment">// 接收服务器回发的数据</span></span><br><span class="line">n, err := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"服务器回发："</span>, <span class="keyword">string</span>(buf[:n]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="并发版本TCP-C-S"><a href="#并发版本TCP-C-S" class="headerlink" title="并发版本TCP-C/S"></a>并发版本TCP-C/S</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandlerConnect</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取连接的客户端 Addr</span></span><br><span class="line">addr := conn.RemoteAddr()</span><br><span class="line">fmt.Println(addr, <span class="string">"客户端成功连接！"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环读取客户端发送数据</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n, err := conn.Read(buf)</span><br><span class="line"><span class="comment">//fmt.Println(buf[:n])</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">"exit\n"</span> == <span class="keyword">string</span>(buf[:n]) || <span class="string">"exit\r\n"</span> == <span class="keyword">string</span>(buf[:n]) &#123;</span><br><span class="line">fmt.Println(<span class="string">"服务器接收的客户端退出请求，服务器关闭"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"服务器检测到客户端已关闭，断开连接！！！"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"服务器读到数据："</span>, <span class="keyword">string</span>(buf[:n]))<span class="comment">// 使用数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小写转大写，回发给客户端</span></span><br><span class="line">conn.Write([]<span class="keyword">byte</span>(strings.ToUpper(<span class="keyword">string</span>(buf[:n]))))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">// 创建监听套接字</span></span><br><span class="line"><span class="comment">//listener, err := net.Listen("tcp", "127.0.0.1:8001")</span></span><br><span class="line">listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"localhost:8001"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Listen err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listener.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听客户端连接请求</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"服务器等待客户端连接..."</span>)</span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"listener.Accept err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体完成服务器和客户端的数据通信</span></span><br><span class="line"><span class="keyword">go</span> HandlerConnect(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//client</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">// 主动发起连接请求</span></span><br><span class="line">conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">"localhost:8001"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Dial err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="comment">// 获取用户键盘输入( stdin )，将输入数据发送给服务器</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n, err := os.Stdin.Read(str)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"os.Stdin.Read err:"</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写给服务器, 读多少，写多少！</span></span><br><span class="line">conn.Write(str[:n])</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回显服务器回发的大写数据</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n, err := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"检查到服务器关闭，客户端也关闭"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"客户端读到服务器回发："</span>, <span class="keyword">string</span>(buf[:n]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="聊天室"><a href="#聊天室" class="headerlink" title="聊天室"></a>聊天室</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 创建用户结构体类型！</span></span><br><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">C <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Addr <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建全局map，存储在线用户</span></span><br><span class="line"><span class="keyword">var</span> onlineMap <span class="keyword">map</span>[<span class="keyword">string</span>]Client</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建全局 channel 传递用户消息。</span></span><br><span class="line"><span class="keyword">var</span> message = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteMsgToClient</span><span class="params">(clnt Client, conn net.Conn)</span></span>  &#123;</span><br><span class="line"><span class="comment">// 监听 用户自带Channel 上是否有消息。</span></span><br><span class="line"><span class="keyword">for</span> msg := <span class="keyword">range</span> clnt.C &#123;</span><br><span class="line">conn.Write([]<span class="keyword">byte</span>(msg + <span class="string">"\n"</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeMsg</span><span class="params">(clnt Client, msg <span class="keyword">string</span>)</span> <span class="params">(buf <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">buf = <span class="string">"["</span> + clnt.Addr + <span class="string">"]"</span> + clnt.Name + <span class="string">": "</span> + msg</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandlerConnect</span><span class="params">(conn net.Conn)</span></span>  &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="comment">// 创建channel 判断，用户是否活跃。</span></span><br><span class="line">hasData := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户 网络地址 IP+port</span></span><br><span class="line">netAddr := conn.RemoteAddr().String()</span><br><span class="line"><span class="comment">// 创建新连接用户的 结构体. 默认用户是 IP+port</span></span><br><span class="line">clnt := Client&#123;<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>), netAddr, netAddr&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将新连接用户，添加到在线用户map中. key: IP+port value：client</span></span><br><span class="line">onlineMap[netAddr] = clnt</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建专门用来给当前 用户发送消息的 go 程</span></span><br><span class="line"><span class="keyword">go</span> WriteMsgToClient(clnt, conn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送 用户上线消息到 全局channel 中</span></span><br><span class="line"><span class="comment">//message &lt;- "[" + netAddr + "]" + clnt.Name + "login"</span></span><br><span class="line">message &lt;- MakeMsg(clnt, <span class="string">"login"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 channel ， 用来判断用退出状态</span></span><br><span class="line">isQuit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个匿名 go 程， 专门处理用户发送的消息。</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n, err := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">isQuit &lt;- <span class="literal">true</span></span><br><span class="line">fmt.Printf(<span class="string">"检测到客户端:%s退出\n"</span>, clnt.Name)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将读到的用户消息，保存到msg中，string 类型</span></span><br><span class="line">msg := <span class="keyword">string</span>(buf[:n<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取在线用户列表</span></span><br><span class="line"><span class="keyword">if</span> msg == <span class="string">"who"</span> &amp;&amp; <span class="built_in">len</span>(msg) == <span class="number">3</span> &#123;</span><br><span class="line">conn.Write([]<span class="keyword">byte</span>(<span class="string">"online user list:\n"</span>))</span><br><span class="line"><span class="comment">// 遍历当前 map ，获取在线用户</span></span><br><span class="line"><span class="keyword">for</span> _, user := <span class="keyword">range</span> onlineMap &#123;</span><br><span class="line">userInfo := user.Addr + <span class="string">":"</span> + user.Name + <span class="string">"\n"</span></span><br><span class="line">conn.Write([]<span class="keyword">byte</span>(userInfo))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断用户发送了 改名 命令</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">len</span>(msg) &gt;=<span class="number">8</span> &amp;&amp; msg[:<span class="number">6</span>] == <span class="string">"rename"</span> &#123;<span class="comment">// rename|</span></span><br><span class="line">newName := strings.Split(msg, <span class="string">"|"</span>)[<span class="number">1</span>]<span class="comment">// msg[8:]</span></span><br><span class="line">clnt.Name = newName<span class="comment">// 修改结构体成员name</span></span><br><span class="line">onlineMap[netAddr] = clnt<span class="comment">// 更新 onlineMap</span></span><br><span class="line">conn.Write([]<span class="keyword">byte</span>(<span class="string">"rename successful\n"</span>))</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 将读到的用户消息，写入到message中。</span></span><br><span class="line">message &lt;- MakeMsg(clnt, msg)</span><br><span class="line">&#125;</span><br><span class="line">hasData &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保证 不退出</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 监听 channel 上的数据流动</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-isQuit:</span><br><span class="line"><span class="built_in">delete</span>(onlineMap, clnt.Addr)<span class="comment">// 将用户从 online移除</span></span><br><span class="line">message &lt;- MakeMsg(clnt, <span class="string">"logout"</span>)   <span class="comment">// 写入用户退出消息到全局channel</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> &lt;-hasData:</span><br><span class="line"><span class="comment">// 什么都不做。 目的是重置 下面 case 的计时器。</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">60</span>):</span><br><span class="line"><span class="built_in">delete</span>(onlineMap, clnt.Addr)       <span class="comment">// 将用户从 online移除</span></span><br><span class="line">message &lt;- MakeMsg(clnt, <span class="string">"time out leaved"</span>) <span class="comment">// 写入用户退出消息到全局channel</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Manager</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">// 初始化 onlineMap</span></span><br><span class="line">onlineMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Client)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听全局channel 中是否有数据, 有数据存储至 msg， 无数据阻塞。</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">msg := &lt;-message</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环发送消息给 所有在线用户。要想执行，必须 msg := &lt;-message 执行完， 解除阻塞。</span></span><br><span class="line"><span class="keyword">for</span> _, clnt := <span class="keyword">range</span> onlineMap &#123;</span><br><span class="line">clnt.C &lt;- msg</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">// 创建监听套接字</span></span><br><span class="line">listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:8000"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Listen err"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listener.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建管理者go程，管理map 和全局channel</span></span><br><span class="line"><span class="keyword">go</span> Manager()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环监听客户端连接请求</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Accept err"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 启动go程处理客户端数据请求</span></span><br><span class="line"><span class="keyword">go</span> HandlerConnect(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端用法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:8000"</span>)</span><br><span class="line">errFunc2(err, <span class="string">"Dial"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">httpRequest := <span class="string">"GET /itcast88 HTTP/1.1\r\nHost:127.0.0.1:8000\r\n\r\n"</span></span><br><span class="line"></span><br><span class="line">conn.Write([]<span class="keyword">byte</span>(httpRequest))</span><br><span class="line"></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line">n, _ := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"|%s|\n"</span>, <span class="keyword">string</span>(buf[:n]))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器用法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandle</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// w : 写给客户端的数据内容</span></span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">"this is a Web server"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// r: 从客户端读到的内容</span></span><br><span class="line">fmt.Println(<span class="string">"Header:"</span>, r.Header)</span><br><span class="line">fmt.Println(<span class="string">"URL:"</span>, r.URL)</span><br><span class="line">fmt.Println(<span class="string">"Method:"</span>, r.Method)</span><br><span class="line">fmt.Println(<span class="string">"Host:"</span>, r.Host)</span><br><span class="line">fmt.Println(<span class="string">"RemoteAddr:"</span>, r.RemoteAddr)</span><br><span class="line">fmt.Println(<span class="string">"Body:"</span>, r.Body)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">// 注册回调函数， 该函数在客户端访问服务器时，会自动被调用</span></span><br><span class="line"><span class="comment">//http.HandleFunc("/itcast", myHandle)</span></span><br><span class="line">http.HandleFunc(<span class="string">"/"</span>, myHandle)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定服务器监听地址</span></span><br><span class="line">http.ListenAndServe(<span class="string">"127.0.0.1:8000"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HTTP-服务器客户端实例"><a href="#HTTP-服务器客户端实例" class="headerlink" title="HTTP 服务器客户端实例"></a>HTTP 服务器客户端实例</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">// 使用Get方法获取服务器响应包数据</span></span><br><span class="line"><span class="comment">//resp, err := http.Get("http://www.baidu.com")</span></span><br><span class="line">resp, err := http.Get(<span class="string">"http://127.0.0.1:8000/hello"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Get err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取服务器端读到的数据</span></span><br><span class="line">fmt.Println(<span class="string">"Status = "</span>, resp.Status)           <span class="comment">// 状态</span></span><br><span class="line">fmt.Println(<span class="string">"StatusCode = "</span>, resp.StatusCode)   <span class="comment">// 状态码</span></span><br><span class="line">fmt.Println(<span class="string">"Header = "</span>, resp.Header)           <span class="comment">// 响应头部</span></span><br><span class="line">fmt.Println(<span class="string">"Body = "</span>, resp.Body)               <span class="comment">// 响应包体</span></span><br><span class="line"></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)         <span class="comment">// 定义切片缓冲区，存读到的内容</span></span><br><span class="line"><span class="keyword">var</span> result <span class="keyword">string</span></span><br><span class="line"><span class="comment">// 获取服务器发送的数据包内容</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n, err := resp.Body.Read(buf)  <span class="comment">// 读body中的内容。</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"--Read finish!"</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">"resp.Body.Read err:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result += <span class="keyword">string</span>(buf[:n])     <span class="comment">// 累加读到的数据内容</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印从body中读到的所有内容</span></span><br><span class="line">fmt.Println(<span class="string">"result = "</span>, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//server</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OpenSendFile</span><span class="params">(fNmae <span class="keyword">string</span>, w http.ResponseWriter)</span></span>  &#123;</span><br><span class="line">pathFileName := <span class="string">"C:/itcast/test"</span> + fNmae</span><br><span class="line">f, err := os.Open(pathFileName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Open err:"</span>, err)</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">" No such file or directory !"</span>))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n, _ := f.Read(buf)<span class="comment">// 从本地将文件内容读取。</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">w.Write(buf[:n])<span class="comment">// 写到 客户端（浏览器）上</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"客户端请求："</span>, r.URL)</span><br><span class="line">OpenSendFile(r.URL.String(), w)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">// 注册回调函数</span></span><br><span class="line">http.HandleFunc(<span class="string">"/"</span>, myHandler)</span><br><span class="line"><span class="comment">// 绑定监听地址</span></span><br><span class="line">http.ListenAndServe(<span class="string">"127.0.0.1:8000"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一篇非常接地气的文章，先讲通信的具体流程（具体到 API 名称），然后用 Golang 实现 TCP、UDP 的文件传输、聊天室、HTTP通信等功能，直接上代码，哈哈。&lt;br&gt;从中感觉到一些 Golang 的设计理念：不追求设计感，好写好理解好用就完了…&lt;/p&gt;
&lt;h1
      
    
    </summary>
    
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
      <category term="代码" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 性能优化初步</title>
    <link href="http://yoursite.com/2019/05/01/2019-06-18-Java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/05/01/2019-06-18-Java性能优化权威指南笔记/</id>
    <published>2019-05-01T00:31:11.000Z</published>
    <updated>2019-10-30T02:26:45.506Z</updated>
    
    <content type="html"><![CDATA[<p>对应用程序的性能进行评估或推算时，基准测试是常用的方法。本文介绍 Java 基准测试的一些概念和自己的思考，至于如何测试出出不好的代码和调优，留到后边。</p><h2 id="微基准测试"><a href="#微基准测试" class="headerlink" title="微基准测试"></a>微基准测试</h2><p>Java应用程序功能的某个小的方面。由于JVM的运行时优化，开发者容易得出错误结论，因此创建基准测试可以说是一种艺术</p><h2 id="宏基准测试"><a href="#宏基准测试" class="headerlink" title="宏基准测试"></a>宏基准测试</h2><p>系统级性能评估，包括硬件和软件，SPEC 定义了很多这样的基准测试。</p><h1 id="可能的问题"><a href="#可能的问题" class="headerlink" title="可能的问题"></a>可能的问题</h1><p>有很多，JMH 甚至放弃官方文档，用 39 个 examples 来解释 Java 微基准测试中遇到的坑。这里是一些最简单的。</p><h2 id="预热阶段"><a href="#预热阶段" class="headerlink" title="预热阶段"></a>预热阶段</h2><p>服务端超过10000次/客户端超过1500次为 Bytecode 生成本地机器码。<br><code>-XX:+PrintCompilation</code> 判断何时完成预热</p><h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>会暂停应用程序线程或者并行地消耗CPU周期，会导致微基准测试不正确的结论（除非测试目的就是评估垃圾收集的性能）</p><ul><li>尽量避免</li><li>或者使用Serial 收集器 <code>-XX:+UseSerialGC</code>显式地设置 heap 的初始值 <code>-Xms</code>和最大值 <code>Xmx</code>以及新生代的大小<code>-Xmn</code>.</li><li>一般来说，在计时开始之前会调用<code>System.GC()</code>来释放垃圾，当对象不可达时，调用<code>System.runFinalization()</code> 来请求 JVM 执行 <code>finalize()</code> 方法</li></ul><h2 id="使用-Java-Time-接口"><a href="#使用-Java-Time-接口" class="headerlink" title="使用 Java Time 接口"></a>使用 Java Time 接口</h2><p>Java 本身提供的毫秒级接口依赖于底层操作系统的实现，可能达到 30ms 为单位</p><h2 id="剔除无效代码"><a href="#剔除无效代码" class="headerlink" title="剔除无效代码"></a>剔除无效代码</h2><p>微基准测试很少有有意义的输出，部分代码会被JIT视为dead code 。<br>写段代码巩固记忆，如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ubique</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/6/18 9:32 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadCode1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> NANOS_PER_MS = <span class="number">1000L</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> NUMBER = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//unrecur</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calaFib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> prev = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            sum = prev+result;</span><br><span class="line">            prev = result;</span><br><span class="line">            result = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doTest</span><span class="params">(<span class="keyword">long</span> iterations)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>;i&lt;iterations;i++)</span><br><span class="line">            calaFib(NUMBER);</span><br><span class="line">        <span class="keyword">long</span> elapsedTime = System.nanoTime()-startTime;</span><br><span class="line">        System.out.println(<span class="string">"Elapsed nanoseconds -&gt;"</span>+</span><br><span class="line">        elapsedTime);</span><br><span class="line">        <span class="keyword">float</span> millis = elapsedTime/NANOS_PER_MS;</span><br><span class="line">        <span class="keyword">float</span> itrsPerMs = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(millis!=<span class="number">0</span>)</span><br><span class="line">            itrsPerMs = iterations/millis;</span><br><span class="line">        System.out .println((<span class="string">"  Iteration per ms---&gt;"</span>+itrsPerMs));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(System.getProperty(<span class="string">"java.vm.name"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Warming up"</span>);</span><br><span class="line">        doTest(<span class="number">10000</span>);</span><br><span class="line">        System.out.println(<span class="string">"Warmup done."</span>);</span><br><span class="line">        System.out.println(<span class="string">"Starting measurement"</span>);</span><br><span class="line">        doTest(<span class="number">90000</span>);</span><br><span class="line">        System.out.println(<span class="string">"Measurement done"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Test completed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM</span><br><span class="line">Warming up</span><br><span class="line">Elapsed nanoseconds -&gt;1038293</span><br><span class="line">  Iteration per ms---&gt;9.633911</span><br><span class="line">Warmup done.</span><br><span class="line">Starting measurement</span><br><span class="line">Elapsed nanoseconds -&gt;2128094</span><br><span class="line">  Iteration per ms---&gt;42.293232</span><br><span class="line">Measurement done</span><br><span class="line">Test completed.</span><br></pre></td></tr></table></figure><p>比较每毫秒迭代次数可发现性能提升了1000%以上，显然这不合理，原因是<code>calcFib</code>被看作 DeadCode，优化到 no-op 队列中，JIT 编译器优化时消除了 no-op 中方法的调用。<br>为此作如下更改：</p><ol><li>保存 <code>calcFib()</code> 的返回值 answer</li><li>打印保存的返回值 answer</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM</span><br><span class="line">Warming up</span><br><span class="line">answer:75025</span><br><span class="line">Elapsed nanoseconds -&gt;1074088</span><br><span class="line">  Iteration per ms---&gt;9.3109865</span><br><span class="line">Warmup done.</span><br><span class="line">Starting measurement</span><br><span class="line">answer:75025</span><br><span class="line">Elapsed nanoseconds -&gt;2365503</span><br><span class="line">  Iteration per ms---&gt;38.05497</span><br><span class="line">Measurement done</span><br><span class="line">Test completed.</span><br></pre></td></tr></table></figure><p>性能提升在 400% 左右，比之前更加可信。<br>通过添加二次预热，可以消除采样时段的编译活动。主方法添加如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Warming2 up"</span>);</span><br><span class="line">doTest(<span class="number">10000</span>);</span><br><span class="line">System.out.println(<span class="string">"Warmup2 done."</span>);</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM</span><br><span class="line">Warming1 up</span><br><span class="line">answer:75025</span><br><span class="line">Elapsed nanoseconds -&gt;1359640</span><br><span class="line">  Iteration per ms---&gt;7.3583517</span><br><span class="line">Warmup1 done.</span><br><span class="line">Warming2 up</span><br><span class="line">answer:75025</span><br><span class="line">Elapsed nanoseconds -&gt;298469</span><br><span class="line">  Iteration per ms---&gt;33.55705</span><br><span class="line">Warmup2 done.</span><br><span class="line">Starting measurement</span><br><span class="line">answer:75025</span><br><span class="line">Elapsed nanoseconds -&gt;2470707</span><br><span class="line">  Iteration per ms---&gt;36.43725</span><br><span class="line">Measurement done</span><br><span class="line">Test completed.</span><br></pre></td></tr></table></figure><p>说明预热足够，避免了采样时段的编译活动</p><h2 id="内联"><a href="#内联" class="headerlink" title="内联"></a>内联</h2><p>目标方法展开到调用方法中，该过程由JIT完成</p><h2 id="逆优化"><a href="#逆优化" class="headerlink" title="逆优化"></a>逆优化</h2><p>有些时候优化可能被证明是错误的，此时JIT会进行逆优化。</p><h1 id="测试与统计"><a href="#测试与统计" class="headerlink" title="测试与统计"></a>测试与统计</h1><ol><li>均值</li><li>标准差</li><li>置信区间</li><li>使用假设测试</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>不应该过分担心JIT的不合理优化，而是专注于软件架构设计和实现。——好的代码是重构出来的，更何况 Java9 之后有专门的微基准测试工具来避免因为 JVM 优化导致的性能测试的不准确。<br>【后记】美团技术博客里写不要“战术编程”，即避免写了之后推倒重改的情况发生。所以究竟如何？<br>一方面，对于一些难易上手的代码，如实习时直接用新学的 Rust 写项目，leetcode 上 一些比较难的 medium 和 hard 的题，我都是直接写，然后一点点改和完善，这帮助我打开思路和加快速度，避免一筹莫展，从这一点来讲，我对重构非常推崇。另一方面，对于 Java 业务逻辑的 Mapper、Controller、Service 层的业务代码，我巴不得四只手啪啪啪的写甚至直接代码生成。<br>所以应该分开来考虑，重构来上手难的，简单的一遍过，就像刷 leetcode 的 easy 练手一样。<br>另一点是微基准测试之于 Java 的意义。在 GC 要高几百毫秒的情况下，以纳秒计的微基准测试意义大吗？至少应该在 广义上的针对 GC、OOM、大对象等宏基准测试OK后，这个问题才有意义。另外，不同于宏基准测试写-&gt;测-&gt;改的循环，微基准测试的意义可能在于让程序员搞明白编译和执行的时候的“过度优化”和“不会优化”的地方，从而在一开始就写出更编译器、JVM友好的代码————毕竟在单元测试程序员写、测试开发来做功能 test 的情况下，JMH在业务逻辑主导的代码中似乎很难被用到。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>《Java 性能优化权威指南》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对应用程序的性能进行评估或推算时，基准测试是常用的方法。本文介绍 Java 基准测试的一些概念和自己的思考，至于如何测试出出不好的代码和调优，留到后边。&lt;/p&gt;
&lt;h2 id=&quot;微基准测试&quot;&gt;&lt;a href=&quot;#微基准测试&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="性能" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>基于 SpringBoot 的 MyBlog 项目总结</title>
    <link href="http://yoursite.com/2019/04/29/2019-05-01-Myblog-Springboot-Summary/"/>
    <id>http://yoursite.com/2019/04/29/2019-05-01-Myblog-Springboot-Summary/</id>
    <published>2019-04-29T04:00:00.000Z</published>
    <updated>2019-10-30T02:10:11.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><p>两周左右</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>整体使用 Springboot 进行后台快速开发，通过纯注解的方式使用 SpringMVC 来完成 URL 跳转和模型视图控制器的解耦，避免了配置文件的繁琐。同时利用 Spring 的 AOP 完成 log 功能，DI 完成 Service 层中 DAO 层的注入，也没有使用配置文件。<br>对于 ORM，选择 Mybatis，通过 xml 配置文件的方式完成（为了以后扩展，注解方式不太好写复杂的sql语句）<br>整体使用 REST，通过名词的 URL+http 动作来给后台传输数据，后台根据 controller 层的 requestmapping 注解选择合适的方法处理，在方法中调用 Service 层的服务得到 ViewObject，通过 setattributes 传给视图层，并处理一些特殊情况和错误。</p><h4 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h4><ol><li>Springboot 快速开发</li><li>Mybatis ORM 框架减少DB代码</li><li>前端 CSS 网上找的</li><li>调试、部署</li><li>大头：maven bug解决（最终发现是 setting.xml 设置问题，当初为了用 aliyun 的 mirrors 加快速度，从网上找的配置文件，结果出了问题。）</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>这个项目花的最多的时间不是写后端代码，而是调试 mvn，package 老是不成功，通过各种命令分析，包括但不限于 tree 分析依赖关系，更换 mvn 仓库，mirror 源。在 mvn 打包 Springboot 不成功之后尝试按照之前的 web 项目打 war 包，或者用 docker 配置。<br>最终在用 docker 配置时的错误信息使我发现是 setting.xml 的本地仓库配置有问题，这也解释了为什么我的 IDEA 的默认 maven 配置文件和仓库不匹配（之前不匹配我都以为是我修改了IDEA的默认自带的maven仓库导致的）。<br>问题的关键在于我的IDEA的 pom 配置文件和终端的 mvn 命令默认的配置文件不一致：这是 IDEA的锅。</p><p>这段经历使我收获了很多，面对bug，最重要的是要<strong>仔细读报错信息</strong>，如本次在用docker配置之前的<code>mvn clean package</code>报错“包找不到”，我去IDE看，明明包都在那里，pox.xml也没报错，lib里边也确实有文件。</p><p>最终解决是<code>vim ~/.m2/setting.xml</code>改对应repo即可。</p><p>其实之前出过几次这样的事，印象最深的是 zsh 的配置、mysql 配置文件以及 Spring boot启动事件。得出的经验教训都一样：仔细读报错信息，<strong>分析错误原因（画重点</strong>）上<a href="www.google.com">google</a> <a href="https://stackoverflow.com" target="_blank" rel="noopener">stackoverflow</a>查找错误信息。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从这件事上看，时间大概三成写代码，七成调 bug。<br>显然效率很低，正确的做法一是加快 bug 解决速度（fq 不好用时，百度技术问题 -csdn，二是少写工程性强、“八股文”、无用的代码（比如配置文件，服务器配置，静态资源管理）等，而是多学习，加快知识吸收速度，等实际用到再操作。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>从暑假在 QingCloud 的实习经历来看，大部分时间都在读代码和思考如何改，剩下的大部分时间是对写的代码进行重构和改 Bug，至于之前总结提到的问题。一方面只需要功能符合要求，另一方面只需要跑过 CI。运维的问题不需要我来考虑（但也应该看看，哈哈）</p><p>又后记：从后来的实习以及其他项目、OS 升级后出现问题等 debug 过程来看，直接读报错信息然后自己解决是最好的办法。如果不能自己解决，就学相关的知识如写 shell 脚本、查官网文档。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h4 id=&quot;时间&quot;&gt;&lt;a href=&quot;#时间&quot; class=&quot;headerlink&quot; title=&quot;时间&quot;&gt;&lt;/a&gt;时间&lt;/h4&gt;&lt;p&gt;两周左
      
    
    </summary>
    
    
    
      <category term="Summary" scheme="http://yoursite.com/tags/Summary/"/>
    
      <category term="Project" scheme="http://yoursite.com/tags/Project/"/>
    
  </entry>
  
  <entry>
    <title>Java 自带的 Fork/Join 框架</title>
    <link href="http://yoursite.com/2019/04/21/2019-06-16-Fork%20Join%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/04/21/2019-06-16-Fork Join框架/</id>
    <published>2019-04-21T03:00:00.000Z</published>
    <updated>2019-10-30T02:04:20.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><p>分治是一个有效的降低复杂度进而处理大量数据的算法思想。其原理是将问题划分为较小的问题，采用递归方式重复该过程，直到需要解决的问题变得很小，可以直接解决。算法应用如二分查找、外部归并排序等，著名的 MapReduce 也采用了分而治之的思想。</p><p>Java 可以通过多线程实现分治，但如果线程开的过多或者线程的创建、销毁过于频繁会影响性能，我们知道可以通过线程复用也就是线程池解决这个问题，JDK5 中提供了 Fork/Join 框架帮我们做分治。</p><p>按照 Java API 文档的说明，该基本问题的规模应该介于 100 到 10 000 个基本计算步骤之间。</p><p>数据可用前，不应使用阻塞型 I/O 操作，例如读取用户输入或者来自网络套接字的数据。这样的操作将导致 CPU 核资源空闲，降低并行处理等级，进而使性能无法达到最佳。</p><p>不能在任务内部抛出校验异常，必须编写代码来处理异常</p><h1 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THRESHOLD = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> end;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CountTask</span><span class="params">(<span class="keyword">long</span> start,<span class="keyword">long</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start=start;</span><br><span class="line">        <span class="keyword">this</span>.end=end;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">compute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> canCompute = (end-start)&lt;THRESHOLD;</span><br><span class="line">        <span class="keyword">if</span>(canCompute)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">long</span> i=start;i&lt;=end;i++)&#123;</span><br><span class="line">                sum +=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//分成100个小任务</span></span><br><span class="line">            <span class="keyword">long</span> step=(start+end)/<span class="number">100</span>;</span><br><span class="line">            ArrayList&lt;CountTask&gt; subTasks=<span class="keyword">new</span> ArrayList&lt;CountTask&gt;();</span><br><span class="line">            <span class="keyword">long</span> pos=start;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">long</span> lastOne=pos+step;</span><br><span class="line">                <span class="keyword">if</span>(lastOne&gt;end)lastOne=end;</span><br><span class="line">                CountTask subTask=<span class="keyword">new</span> CountTask(pos,lastOne);</span><br><span class="line">                pos+=step+<span class="number">1</span>;</span><br><span class="line">                subTasks.add(subTask);</span><br><span class="line">                subTask.fork();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(CountTask  t:subTasks)&#123;</span><br><span class="line">                sum+=t.join();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        CountTask task = <span class="keyword">new</span> CountTask(<span class="number">0</span>,<span class="number">200000000000L</span>);</span><br><span class="line">        ForkJoinTask&lt;Long&gt; result = forkJoinPool.submit(task);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">long</span> res = result.get();</span><br><span class="line">            System.out.println(<span class="string">"sum="</span>+res);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ExecutionException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>Java 8 中的 CountedCompleter 类作为面向 Fork/Join 任务的基类提供了某种机制， 当其所有子任务完成执行后会执行某个方法。 这种机制就是 onCompletion()方法。<br>因此，我们使用 compute()方法分割数组，使用 onCompletion()方法将子列表合并成一个经过排序的列表。<br>要实现的东西如下</p><ol><li>MergeSortTask 类，该类扩展了 CountedCompleter 类并且实现了执行归并排序算法的任务。<br>存放待排序数据的数组。<br>任务必须进行排序操作的这部分数组的起始位置和终止位置。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSortTask</span> <span class="keyword">extends</span> <span class="title">CountedCompleter</span>&lt;<span class="title">Void</span>&gt; </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> Comparable[] data;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start, end; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> middle;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MergeSortTask</span><span class="params">(Comparable[] data, <span class="keyword">int</span> start, <span class="keyword">int</span> end, MergeSortTask parent)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">super</span>(parent);      </span><br><span class="line">         <span class="keyword">this</span>.data = data;     </span><br><span class="line">         <span class="keyword">this</span>.start = start;     </span><br><span class="line">         <span class="keyword">this</span>.end = end;   </span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>如果起始索引和终止索引之间的差距大于或等于 1024，那么使用 <code>compute()</code>方法，将任务分割成两个子任务来分别处理原集合的两个子集。两个任务采用 <code>fork()</code>方法以异步方式将任务发送给 ForkJoinPool。否则，执行<code>SerialMergeSorg.mergeSort()</code>对数组（具有小于或等于 1024 个元素）进行排序， 然后调用 <code>tryComplete()</code>方法。 子任务执行完毕之后， 该方法将从内部调用 <code>onCompletion(</code>)` 方法。如下述代码所示：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">if</span> (end - start &gt;= <span class="number">1024</span>) &#123;     </span><br><span class="line">        middle = (end+start)&gt;&gt;&gt;<span class="number">1</span>;     </span><br><span class="line">        MergeSortTask task1 = <span class="keyword">new</span> MergeSortTask(data, start, middle, <span class="keyword">this</span>);    </span><br><span class="line">        MergeSortTask task2 = <span class="keyword">new</span> MergeSortTask(data, middle, end, <span class="keyword">this</span>);     </span><br><span class="line">        addToPendingCount(<span class="number">1</span>);     </span><br><span class="line">        task1.fork();     </span><br><span class="line">        task2.fork();   </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;     </span><br><span class="line">            <span class="keyword">new</span> SerialMergeSort().mergeSort(data, start, end);     </span><br><span class="line">            tryComplete();   </span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>采用 <code>onCompletion()</code>方法进行归并和排序操作， 进而获得排序后的列表。 一旦任务完成 <code>onCompletion()</code>方法的执行后，它将在其父任务的层面上调用 <code>tryComplete()</code>方法以完成该任务的执行。 <code>onCompletion()</code>方法的源代码与该算法串行版本的 <code>merge()</code>方法非常相似。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(CountedCompleter&lt;?&gt; caller)</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">if</span> (middle==<span class="number">0</span>) &#123;     </span><br><span class="line">        <span class="keyword">return</span>;   </span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">int</span> length = end - start + <span class="number">1</span>;   </span><br><span class="line">        Comparable tmp[] = <span class="keyword">new</span> Comparable[length];   </span><br><span class="line">        <span class="keyword">int</span> i, j, index;   </span><br><span class="line">        i = start;   </span><br><span class="line">        j = middle;</span><br><span class="line">        index = <span class="number">0</span>;   </span><br><span class="line">        <span class="keyword">while</span> ((i &lt; middle) &amp;&amp; (j &lt; end)) &#123;     </span><br><span class="line">            <span class="keyword">if</span> (data[i].compareTo(data[j]) &lt;= <span class="number">0</span>) &#123;       </span><br><span class="line">                tmp[index] = data[i];       </span><br><span class="line">                i++;     </span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">else</span> &#123;       </span><br><span class="line">                    tmp[index] = data[j];       </span><br><span class="line">                    j++;     </span><br><span class="line">                &#125;     </span><br><span class="line">                index++;   </span><br><span class="line">                    &#125;   </span><br><span class="line">                    <span class="keyword">while</span> (i &lt; middle) &#123;     </span><br><span class="line">                        tmp[index] = data[i];     </span><br><span class="line">                        i++;     </span><br><span class="line">                        index++;   </span><br><span class="line">                    &#125;   </span><br><span class="line">                    <span class="keyword">while</span> (j &lt; end) &#123;     </span><br><span class="line">                        tmp[index] = data[j];     </span><br><span class="line">                        j++;     </span><br><span class="line">                        index++;   </span><br><span class="line">                        &#125;   </span><br><span class="line">                        <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; (end - start); index++) &#123;     </span><br><span class="line">                            data[index + start] = tmp[index];   </span><br><span class="line">                        &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>ConcurrentMergeSort 类，该类启动了第一个任务<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentMergeSort</span> </span>&#123;     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span> <span class="params">(Comparable data[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;      </span><br><span class="line">        MergeSortTask task=<span class="keyword">new</span> MergeSortTask(data, start, end,<span class="keyword">null</span>);     </span><br><span class="line">        ForkJoinPool.commonPool().invoke(task);    </span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>ConcurrentMetaData 类，该类提供了 main()方法来测试归并排序算法的并发版本。<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1>可以确定的是，当数据量足够大时，并行算法会比串行实现快，具体快多少，留到玩 JMH 的时候一起测，哈哈。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>《精通 Java8 并发编程》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;理解&quot;&gt;&lt;a href=&quot;#理解&quot; class=&quot;headerlink&quot; title=&quot;理解&quot;&gt;&lt;/a&gt;理解&lt;/h1&gt;&lt;p&gt;分治是一个有效的降低复杂度进而处理大量数据的算法思想。其原理是将问题划分为较小的问题，采用递归方式重复该过程，直到需要解决的问题变得很小，可
      
    
    </summary>
    
    
    
      <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>最长回文子串的优化过程</title>
    <link href="http://yoursite.com/2019/04/01/2019-05-31-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E7%9A%84%E4%BC%98%E5%8C%96%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/04/01/2019-05-31-最长回文子串的优化过程/</id>
    <published>2019-04-01T03:00:00.000Z</published>
    <updated>2019-10-30T01:41:24.515Z</updated>
    
    <content type="html"><![CDATA[<p>这里分享一道有趣的题目，笔者在 POJ 上使用多种不同的方法进行求解，这其中包括最基本的暴力解、动态规划、分治算法+字符串哈希以及 Manacher 算法和后缀数组。其算法的手写难度不断增加，但时间空间复杂度不断下降。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>聪明的计算机科学的学生安迪正在参加一个算法课，教授问学生一个简单的问题：“你能提出一个有效的算法来找出字符串中最大回文长度吗？”<br>如果一个字符串向前和向后读相同，例如“madam”是回文，而“ACM”则不是回文，则称为回文。<br>学生们认识到这是一个经典的问题，但无法给出一个比遍历所有子串和检查它们是否是回文的方法更好的解答，过了一会儿安迪举起手说：“好吧，我有一个更好的。”在他开始解释他的想法之前，他停了一会儿，然后说：“嗯，我有一个更好的算法！”.<br>如果你认为你知道安迪的最终解决方案，那就证明它吧！给定一个最多1000000个字符的字符串，查找并打印字符串中最大回文长度。</p></blockquote><h2 id="暴力解"><a href="#暴力解" class="headerlink" title="暴力解"></a>暴力解</h2><p>枚举字符串的每一个子串，判断其是否是回文串，如果是且比 <code>res.length()</code>，就更新 res 。枚举每个字串需要 O(n^2) 的时间复杂度，判断每一个子串是否为回文串需要 O(n) 的时间复杂度，因此，总的时间复杂度为 O(n^3). 思路非常简单，这里不再赘述,实现如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        String res=s.substring(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= s.length(); j++) &#123;</span><br><span class="line">                String k=s.substring(i,j);</span><br><span class="line">                String rk=<span class="keyword">new</span> StringBuffer(k).reverse().toString();</span><br><span class="line">                <span class="keyword">if</span>(k.equals(rk)&amp;&amp;k.length()&gt;res.length())&#123;</span><br><span class="line">                    res=k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.length();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划法"><a href="#动态规划法" class="headerlink" title="动态规划法"></a>动态规划法</h2><p>因为之前解决过最长公共子串 LCS 的问题，于是很自然地想到，将题目所给字符串倒置，利用回文串正序读和逆序读结果一样的特性，对其求 LCS ，res 就是本题的答案。但在制作 case 的时候，笔者发现这是错误的解法，因为一旦原来的字符串中已经同时存在某个字串及其逆序，这个算法就无法找到最长的那一个。比如abcdefcba，输出的是错误结果 abc。</p><p>所以应该换如下思路：令 <code>dp[i][j]</code> 表示 <code>S[i]~S[j]</code> 所表示的子串是否是回文子串，是则为1，不是则为0，这样根据 <code>S[i]是否=S[j]</code> ，可以把转移情况分成两类</p><ol><li><code>S[i]==S[j]</code> ,那么只要 <code>S[i+1]～S[j-1]</code> 是回文子串，那么 <code>S[i]~S[j]</code> 就是回文子串，如果 <code>S[i+1]～S[j-1]</code> 不是回文子串，那么 <code>S[i]~S[j]</code> 就不是回文子串。</li><li><code>S[i]!=S[j]</code> ，那么 <code>S[i]~S[j]</code> 就不是回文子串。</li></ol><p>由此可得状态转移方程 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j]=S[i]==S[j]? dp[i+<span class="number">1</span>][j-<span class="number">1</span>]:<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>但还有一个问题，对于该状态转移方程，如果按照 i 和 j 从小到大的顺序来枚举子串的两个端点，然后更新 <code>dp[i][j]</code> ，会无法保证 <code>dp[i+1][j-1]</code> 已经被计算过，出现空指针异常。注意到回文子串的对称性，通过手动计算 dp 二维数组，发现可通过枚举子串长度的方式进行第一轮遍历，第二遍按照子串的初始位置进行遍历，如此，即可获得正确的dp数组。<br>时间复杂度方面，先枚举子串的长度再枚举作第一轮循环，再枚举子串的起始端点作为第二轮循环，因此时间复杂度为 O(n^2),比最基本的蛮力法要好多了。关键代码如下所示（笔者大二上提交 OJ 的 C++ 代码）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> L = <span class="number">3</span>; L &lt;= len; L++)<span class="comment">//枚举子串的长度作为一轮遍历的方法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + L - <span class="number">1</span> &lt; len; i++)<span class="comment">//枚举子串的起始端点作为第二轮循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i + L - <span class="number">1</span>;<span class="comment">//子串的右端点</span></span><br><span class="line">        <span class="keyword">if</span> (S[i] == S[j] &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">            dp[i][j] = <span class="number">1</span>;</span><br><span class="line">            ans = L;<span class="comment">//更新最长回文子串长度</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对于该二重循环，显然其时间复杂度为 O(n^2)。</p><h2 id="中心扩展法"><a href="#中心扩展法" class="headerlink" title="中心扩展法"></a>中心扩展法</h2><p>从上述动态规划算法中注意到回文子串的中心对称性，可以从字符串的中心开始，向两边分别扩散来检查回文，且对每一个字符都如此操作。每个中心的检查需要线性时间复杂度，遍历整个字符串也是如此，因此总的复杂度为O(n^2)。注意需要分 aba 和 abba 两种情况讨论</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">​    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">​            <span class="keyword">if</span> (s.length() &lt; <span class="number">2</span>) &#123; </span><br><span class="line">​               <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> center = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> begin = centerExpand(s, i, i);                     </span><br><span class="line">            <span class="keyword">int</span>  end = centerExpand(s, i, i + <span class="number">1</span>);    </span><br><span class="line">            <span class="keyword">if</span> (maxLength &lt; Math.max(begin, end))&#123;</span><br><span class="line">                center = i;                                                 </span><br><span class="line">                maxLength = Math.max(begin, end);        </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(center - (maxLength - <span class="number">1</span>) / <span class="number">2</span>, center + maxLength / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">centerExpand</span><span class="params">(String s, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = begin, right = end;</span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left) == s.charAt(right))&#123;</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="字符串-Hash-amp-二分"><a href="#字符串-Hash-amp-二分" class="headerlink" title="字符串 Hash &amp; 二分"></a>字符串 Hash &amp; 二分</h2><p>在讲之前需要了解字符串进制哈希和查询子串的 hash 值 ，字符串哈希就是一种字符串到数字的映射。进制哈希就是规定进制数 base 和模数 mod 后，将字符串从 a-z 对应 0-26 按 26 进制转换后取模的过程。当然，为了防止哈希冲突（不同字符串有相同哈希值），你可以设置双哈希、大质数来尽可能避免。</p><p>例如某字符串前缀的哈希值记为：h[i]，我们哈希时使用的进制为 base，那么有 <code>h[i]=h[i-1]*base+s[i]</code>,记 p[i] 表示 base<br>的 i 次方。从而我们可以以常数时间复杂度得到字符串某子串的哈希值。就像对于数字，1234567，你想获得345，那就用<code>12345-12*345.length*base</code>一样，当然这里的base是10.被减数是12345而不是1234567.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ull <span class="title">get_hash</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后回到回文串的问题，注意到回文子串具有单调性，即回文串的包含中心的子串也是回文串。因此我们可以进行二分，注意和上边的方法一样，需要区分奇回文aba和偶回文abba，最终结果取大即可。奇回文举例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_Search_od</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span><span class="comment">//二分答案中的奇数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxx=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;=right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(left+right)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> val=ask(od[mid]);<span class="comment">//判断长度有没有为am[mid]的回文</span></span><br><span class="line">        <span class="keyword">if</span>(val)<span class="comment">//如果存在且大于maxx，更新maxx</span></span><br><span class="line">        &#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">            maxx=max(maxx,val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right=mid-<span class="number">1</span>;<span class="comment">//否则减小长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 master theorem 来看，由于哈希的常数时间复杂度，整个的时间复杂度达到了 O(nlogn),比之前的中心扩展、dp 都要好。</p><h2 id="Manacher-算法"><a href="#Manacher-算法" class="headerlink" title="Manacher 算法"></a>Manacher 算法</h2><p>上边几种算法都是当初刷 OJ 自己想出来的，但这个算法太过于巧妙以至于我花了蛮久来理解。该算法由 Glenn Manacher 于1975年发明。是我们先梳理求解过程，然后试图通过对称性理解。<br>该方法基于之前O(n^2)的中心扩展法，Manacher 算法的核心在于之前字符的“扩充”过程可以指导之后字符的“扩充”过程，使得之后每次扩充过程都不是从零开始。具体方法如下</p><ol><li><p>把每个字符开头、中间和结尾插入填充字符如 # 来组成新的字符串以解决奇回文和偶回文不统一问题。确切的说是处理了偶回文问题，如cc，扩充后为#c#c#,可以从中间轴#处扩充并找到。这个过程是线性时间复杂度的。如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] manacherString(String str) &#123;</span><br><span class="line"><span class="keyword">char</span>[] charArr = str.toCharArray();</span><br><span class="line"><span class="keyword">char</span>[] res = <span class="keyword">new</span> <span class="keyword">char</span>[str.length() * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != res.length; i++) &#123;</span><br><span class="line">res[i] = (i &amp; <span class="number">1</span>) == <span class="number">0</span> ? <span class="string">'#'</span> : charArr[index++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对每个字符进行类似之前中心扩展法一样的扩充过程。设置如下三个辅助变量</p><pre><code>- 数组 pArr，长度等同于处理后的字符串，pArr[i]的意义是以 i 位置上的字符作为回文中心的情况下，扩出去得到的最大回文半径是多少。比如对于字符串str： #d#b#u#b#d# 来说，pArr为[1,2,1,2,1,6,1,2,1,2,1]- 整数 pR，指之前遍历的所有字符的所有回文半径中，最右即将到达的位置。还是用 #d#b#u#b#d# 为例：没遍历之前 pR 为 -1，str[0]=&apos;#&apos;，其回文半径为1，所以目前回文半径向右只能扩展到0位置，即将到达的位置为 pR=1。pR只会增大不会减小。- 整数 index，最近一次 pR 更新时，回文中心的位置。如 str[0] 时 pR更新，index 就为0.</code></pre></li><li><p>pArr 中的最大值就是处理后的 str 的最大回文半径，再对应回未加 # 前的字符串，问题就解决了。步骤3就是从左到右计算 pArr 的过程，就是在这个过程中有些情况获得了加速从而最终获得线性时间复杂度。</p><pre><code>- 假设现在计算到 str[i]，在i之前的计算过程中，pR和index都是动态更新的。可以分为两种情况。- 如果pR-1位置没有包住当前的i位置，#d#b#u#b#d# 计算到str[1]=&apos;u&apos;，pR=1，此时和普通做法一样，从i位置向两侧扩展，这样并没有获得加速。- 如果pR-1位置包住了当前的i位置，如#d#b#u#b#d#计算到 str[6...10]的时候，pR始终为11，此时可以获得优化。根据之前的pR定义我们知道，以 index 为中心，pR-1和pR-1关于index对称的字符是回文串，我们将其称为大回文串。以遍历所在当前位置i为中心的回文串称为右小，i关于index对称的称为左小，有三种情况  1. 左小和右小完全在左大和右大内部，此时以位置i为中心的最大回文串可以直接确定为从右小&apos;到左小&apos;这一部分。2. 左小和右小的左侧部分在左大和右大的外部，此时可以直接确定以i为中心的最长回文子串为为右大到右大&apos;这一部分3. 左小和左大是同一位置，即以i&apos;为中心的最大回文串压在以 index 为中心的最大回文串边界上，此时右小和右大&apos;也肯定同一个位置，此时以i为中心的最大回文串至少是右大&apos;和右大这一段，但可能更大。</code></pre></li></ol><p>时间复杂度分析，我们可以看出来 Manacher 算法在检查过程中有明显优化，从步骤3来看，在计算一个未知的回文半径时要么完全不需要扩出去检查，要么每扩出去都会让回文半径 pR 到达更右的位置，pR前边已经定义过，只增不减，因此时间复杂度就是O(n)啦。<br>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxLcpsLength</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span>[] charArr = manacherString(str);</span><br><span class="line"><span class="keyword">int</span>[] pArr = <span class="keyword">new</span> <span class="keyword">int</span>[charArr.length];</span><br><span class="line"><span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> pR = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != charArr.length; i++) &#123;</span><br><span class="line">pArr[i] = pR &gt; i ? Math.min(pArr[<span class="number">2</span> * index - i], pR - i) : <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i + pArr[i] &lt; charArr.length &amp;&amp; i - pArr[i] &gt; -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (charArr[i + pArr[i]] == charArr[i - pArr[i]])</span><br><span class="line">pArr[i]++;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i + pArr[i] &gt; pR) &#123;</span><br><span class="line">pR = i + pArr[i];</span><br><span class="line">index = i;</span><br><span class="line">&#125;</span><br><span class="line">max = Math.max(max, pArr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 按照步骤3得到 pArr 之后，再遍历一遍 aArr 数组，找到最大回文半径，然后对应回原来的长度即可（-1）。</p><h2 id="后缀树"><a href="#后缀树" class="headerlink" title="后缀树"></a>后缀树</h2><p>Manacher 算法虽然巧妙，但是需要很大的技巧，理解有些困难，这里有一种更加通用的解法，就是后缀树。<br>设S[i]表示字符串从i位置到最后的子数组，用S[i…S.length()-1]这些子数组构造 <a href="https://ubique0305.github.io/2019/03/22/Trie/" target="_blank" rel="noopener">Trie 树</a>，就得到后缀树。且将重复节点按如下规则<br>        1. 每个节点可以存储多个字母<br>        2. 字符串后+一个符号结尾，以防因某后缀是其他后缀的前缀而被压缩<br>压缩后，就得到压缩后缀树。</p><p>那么这和最长回文子串有什么关系呢？实际上有如下关系 <strong>str与其逆序的最长公共前缀是其最长回文子串的半径对应的字符串</strong>，从而，我们将求最长回文子串的问题转化为求某字符串与其逆序的最长公共前缀问题（LCA），利用 trie 求 LCA 方法如下：反转 str，两者生成的所有后缀子串压入到 trie 中，计算<code>S1(i)</code>与<code>S2(n-i+1)</code>节点的最低公共祖先,从而得到其最长公共前缀,再得到最长回文子串。<br>所以问题转化为求两棵树的最低公共祖先，这个问题之前已经解决过了，<a href="https://ubique0305.github.io/2019/03/23/二叉树中两节点的最近公共祖先/" target="_blank" rel="noopener">在这里</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从暴力，到动态规划，到利用其对称性的中心扩展法，再到进位哈希+二分，然后是 Manacher 和后缀树，可以看出，因为回文串特殊的中心对称性，最优解可以做到线性时间复杂度————不可能更低了，你至少需要扫描一遍字符串。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/henry-1202/p/10324966.html" target="_blank" rel="noopener">hash进阶：使用字符串hash乱搞的姿势</a></li><li><a href="https://blog.csdn.net/ice110956/article/details/17299453" target="_blank" rel="noopener">后缀树与最长回文子串</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里分享一道有趣的题目，笔者在 POJ 上使用多种不同的方法进行求解，这其中包括最基本的暴力解、动态规划、分治算法+字符串哈希以及 Manacher 算法和后缀数组。其算法的手写难度不断增加，但时间空间复杂度不断下降。&lt;/p&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="优化" scheme="http://yoursite.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
